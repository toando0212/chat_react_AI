[
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/manipulating-the-dom-with-refs",
    "source_title": "Manipulating the DOM with Refs – React",
    "section": "Manipulating the DOM with Refs",
    "code": "import { useRef } from 'react';",
    "code_language": "javascript/jsx",
    "code_type": "import",
    "tags": [
      "refs",
      "dom",
      "manipulating"
    ],
    "code_length": 1,
    "is_duplicate": false,
    "topic": "Manipulating the DOM with Refs",
    "purpose": "Manipulating the DOM with Refs",
    "explanation": "Manipulating the DOM with Refs – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/manipulating-the-dom-with-refs",
    "source_title": "Manipulating the DOM with Refs – React",
    "section": "Manipulating the DOM with Refs",
    "code": "const myRef = useRef(null);",
    "code_language": "unknown",
    "code_type": "snippet",
    "tags": [
      "refs",
      "dom",
      "manipulating"
    ],
    "code_length": 1,
    "is_duplicate": false,
    "topic": "Manipulating the DOM with Refs",
    "purpose": "Manipulating the DOM with Refs",
    "explanation": "Manipulating the DOM with Refs – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/manipulating-the-dom-with-refs",
    "source_title": "Manipulating the DOM with Refs – React",
    "section": "Manipulating the DOM with Refs",
    "code": "<div ref={myRef}>",
    "code_language": "html/jsx",
    "code_type": "snippet",
    "tags": [
      "refs",
      "dom",
      "manipulating"
    ],
    "code_length": 1,
    "is_duplicate": false,
    "topic": "Manipulating the DOM with Refs",
    "purpose": "Manipulating the DOM with Refs",
    "explanation": "Manipulating the DOM with Refs – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/manipulating-the-dom-with-refs",
    "source_title": "Manipulating the DOM with Refs – React",
    "section": "Manipulating the DOM with Refs",
    "code": "// You can use any browser APIs, for example:\nmyRef.current.scrollIntoView();",
    "code_language": "unknown",
    "code_type": "snippet",
    "tags": [
      "refs",
      "dom",
      "manipulating"
    ],
    "code_length": 2,
    "is_duplicate": false,
    "topic": "Manipulating the DOM with Refs",
    "purpose": "Manipulating the DOM with Refs",
    "explanation": "Manipulating the DOM with Refs – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/manipulating-the-dom-with-refs",
    "source_title": "Manipulating the DOM with Refs – React",
    "section": "Manipulating the DOM with Refs",
    "code": "import { useRef } from 'react';\n\nexport default function Form() {\n  const inputRef = useRef(null);\n\n  function handleClick() {\n    inputRef.current.focus();\n  }\n\n  return (\n    <>\n      <input ref={inputRef} />\n      <button onClick={handleClick}>\n        Focus the input\n      </button>\n    </>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "refs",
      "dom",
      "manipulating",
      "component"
    ],
    "code_length": 18,
    "is_duplicate": false,
    "topic": "Manipulating the DOM with Refs",
    "purpose": "Manipulating the DOM with Refs",
    "explanation": "Manipulating the DOM with Refs – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/manipulating-the-dom-with-refs",
    "source_title": "Manipulating the DOM with Refs – React",
    "section": "Manipulating the DOM with Refs",
    "code": "import { useRef } from 'react';\n\nexport default function CatFriends() {\n  const firstCatRef = useRef(null);\n  const secondCatRef = useRef(null);\n  const thirdCatRef = useRef(null);\n\n  function handleScrollToFirstCat() {\n    firstCatRef.current.scrollIntoView({\n      behavior: 'smooth',\n      block: 'nearest',\n      inline: 'center'\n    });\n  }\n\n  function handleScrollToSecondCat() {\n    secondCatRef.current.scrollIntoView({\n      behavior: 'smooth',\n      block: 'nearest',\n      inline: 'center'\n    });\n  }\n\n  function handleScrollToThirdCat() {\n    thirdCatRef.current.scrollIntoView({\n      behavior: 'smooth',\n      block: 'nearest',\n      inline: 'center'\n    });\n  }\n\n  return (\n    <>\n      <nav>\n        <button onClick={handleScrollToFirstCat}>\n          Neo\n        </button>\n        <button onClick={handleScrollToSecondCat}>\n          Millie\n        </button>\n        <button onClick={handleScrollToThirdCat}>\n          Bella\n        </button>\n      </nav>\n      <div>\n        <ul>\n          <li>\n            <img\n              src=\"https://placecats.com/neo/300/200\"\n              alt=\"Neo\"\n              ref={firstCatRef}\n            />\n          </li>\n          <li>\n            <img\n              src=\"https://placecats.com/millie/200/200\"\n              alt=\"Millie\"\n              ref={secondCatRef}\n            />\n          </li>\n          <li>\n            <img\n              src=\"https://placecats.com/bella/199/200\"\n              alt=\"Bella\"\n              ref={thirdCatRef}\n            />\n          </li>\n        </ul>\n      </div>\n    </>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "refs",
      "dom",
      "manipulating",
      "component"
    ],
    "code_length": 72,
    "is_duplicate": false,
    "topic": "Manipulating the DOM with Refs",
    "purpose": "Manipulating the DOM with Refs",
    "explanation": "Manipulating the DOM with Refs – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/manipulating-the-dom-with-refs",
    "source_title": "Manipulating the DOM with Refs – React",
    "section": "Manipulating the DOM with Refs",
    "code": "import { useRef } from 'react';\n\nfunction MyInput({ ref }) {\n  return <input ref={ref} />;\n}\n\nfunction MyForm() {\n  const inputRef = useRef(null);\n  return <MyInput ref={inputRef} />\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "refs",
      "dom",
      "manipulating"
    ],
    "code_length": 10,
    "is_duplicate": false,
    "topic": "Manipulating the DOM with Refs",
    "purpose": "Manipulating the DOM with Refs",
    "explanation": "Manipulating the DOM with Refs – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/manipulating-the-dom-with-refs",
    "source_title": "Manipulating the DOM with Refs – React",
    "section": "Manipulating the DOM with Refs",
    "code": "import { useRef } from 'react';\n\nfunction MyInput({ ref }) {\n  return <input ref={ref} />;\n}\n\nexport default function MyForm() {\n  const inputRef = useRef(null);\n\n  function handleClick() {\n    inputRef.current.focus();\n  }\n\n  return (\n    <>\n      <MyInput ref={inputRef} />\n      <button onClick={handleClick}>\n        Focus the input\n      </button>\n    </>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "refs",
      "dom",
      "manipulating",
      "component"
    ],
    "code_length": 22,
    "is_duplicate": false,
    "topic": "Manipulating the DOM with Refs",
    "purpose": "Manipulating the DOM with Refs",
    "explanation": "Manipulating the DOM with Refs – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/manipulating-the-dom-with-refs",
    "source_title": "Manipulating the DOM with Refs – React",
    "section": "Manipulating the DOM with Refs",
    "code": "import { useState, useRef } from 'react';\n\nexport default function Counter() {\n  const [show, setShow] = useState(true);\n  const ref = useRef(null);\n\n  return (\n    <div>\n      <button\n        onClick={() => {\n          setShow(!show);\n        }}>\n        Toggle with setState\n      </button>\n      <button\n        onClick={() => {\n          ref.current.remove();\n        }}>\n        Remove from the DOM\n      </button>\n      {show && <p ref={ref}>Hello world</p>}\n    </div>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "state",
      "component",
      "refs",
      "dom",
      "manipulating"
    ],
    "code_length": 24,
    "is_duplicate": false,
    "topic": "Manipulating the DOM with Refs",
    "purpose": "Manipulating the DOM with Refs",
    "explanation": "Manipulating the DOM with Refs – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/manipulating-the-dom-with-refs",
    "source_title": "Manipulating the DOM with Refs – React",
    "section": "Manipulating the DOM with Refs",
    "code": "import { useState, useRef } from 'react';\n\nexport default function VideoPlayer() {\n  const [isPlaying, setIsPlaying] = useState(false);\n\n  function handleClick() {\n    const nextIsPlaying = !isPlaying;\n    setIsPlaying(nextIsPlaying);\n  }\n\n  return (\n    <>\n      <button onClick={handleClick}>\n        {isPlaying ? 'Pause' : 'Play'}\n      </button>\n      <video width=\"250\">\n        <source\n          src=\"https://interactive-examples.mdn.mozilla.net/media/cc0-videos/flower.mp4\"\n          type=\"video/mp4\"\n        />\n      </video>\n    </>\n  )\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "state",
      "component",
      "refs",
      "dom",
      "manipulating"
    ],
    "code_length": 24,
    "is_duplicate": false,
    "topic": "Manipulating the DOM with Refs",
    "purpose": "Manipulating the DOM with Refs",
    "explanation": "Manipulating the DOM with Refs – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/preserving-and-resetting-state",
    "source_title": "Preserving and Resetting State – React",
    "section": "Preserving and Resetting State",
    "code": "import { useState } from 'react';\n\nexport default function App() {\n  return (\n    <div>\n      <Counter />\n      <Counter />\n    </div>\n  );\n}\n\nfunction Counter() {\n  const [score, setScore] = useState(0);\n  const [hover, setHover] = useState(false);\n\n  let className = 'counter';\n  if (hover) {\n    className += ' hover';\n  }\n\n  return (\n    <div\n      className={className}\n      onPointerEnter={() => setHover(true)}\n      onPointerLeave={() => setHover(false)}\n    >\n      <h1>{score}</h1>\n      <button onClick={() => setScore(score + 1)}>\n        Add one\n      </button>\n    </div>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "resetting",
      "preserving",
      "state",
      "component"
    ],
    "code_length": 33,
    "is_duplicate": false,
    "topic": "Preserving and Resetting State",
    "purpose": "Preserving and Resetting State",
    "explanation": "Preserving and Resetting State – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/preserving-and-resetting-state",
    "source_title": "Preserving and Resetting State – React",
    "section": "Preserving and Resetting State",
    "code": "import { useState } from 'react';\n\nexport default function App() {\n  const [showB, setShowB] = useState(true);\n  return (\n    <div>\n      <Counter />\n      {showB && <Counter />} \n      <label>\n        <input\n          type=\"checkbox\"\n          checked={showB}\n          onChange={e => {\n            setShowB(e.target.checked)\n          }}\n        />\n        Render the second counter\n      </label>\n    </div>\n  );\n}\n\nfunction Counter() {\n  const [score, setScore] = useState(0);\n  const [hover, setHover] = useState(false);\n\n  let className = 'counter';\n  if (hover) {\n    className += ' hover';\n  }\n\n  return (\n    <div\n      className={className}\n      onPointerEnter={() => setHover(true)}\n      onPointerLeave={() => setHover(false)}\n    >\n      <h1>{score}</h1>\n      <button onClick={() => setScore(score + 1)}>\n        Add one\n      </button>\n    </div>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "resetting",
      "preserving",
      "state",
      "component"
    ],
    "code_length": 44,
    "is_duplicate": false,
    "topic": "Preserving and Resetting State",
    "purpose": "Preserving and Resetting State",
    "explanation": "Preserving and Resetting State – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/preserving-and-resetting-state",
    "source_title": "Preserving and Resetting State – React",
    "section": "Preserving and Resetting State",
    "code": "import { useState } from 'react';\n\nexport default function App() {\n  const [isFancy, setIsFancy] = useState(false);\n  return (\n    <div>\n      {isFancy ? (\n        <Counter isFancy={true} /> \n      ) : (\n        <Counter isFancy={false} /> \n      )}\n      <label>\n        <input\n          type=\"checkbox\"\n          checked={isFancy}\n          onChange={e => {\n            setIsFancy(e.target.checked)\n          }}\n        />\n        Use fancy styling\n      </label>\n    </div>\n  );\n}\n\nfunction Counter({ isFancy }) {\n  const [score, setScore] = useState(0);\n  const [hover, setHover] = useState(false);\n\n  let className = 'counter';\n  if (hover) {\n    className += ' hover';\n  }\n  if (isFancy) {\n    className += ' fancy';\n  }\n\n  return (\n    <div\n      className={className}\n      onPointerEnter={() => setHover(true)}\n      onPointerLeave={() => setHover(false)}\n    >\n      <h1>{score}</h1>\n      <button onClick={() => setScore(score + 1)}>\n        Add one\n      </button>\n    </div>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "resetting",
      "preserving",
      "state",
      "component"
    ],
    "code_length": 50,
    "is_duplicate": false,
    "topic": "Preserving and Resetting State",
    "purpose": "Preserving and Resetting State",
    "explanation": "Preserving and Resetting State – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/preserving-and-resetting-state",
    "source_title": "Preserving and Resetting State – React",
    "section": "Preserving and Resetting State",
    "code": "import { useState } from 'react';\n\nexport default function App() {\n  const [isFancy, setIsFancy] = useState(false);\n  if (isFancy) {\n    return (\n      <div>\n        <Counter isFancy={true} />\n        <label>\n          <input\n            type=\"checkbox\"\n            checked={isFancy}\n            onChange={e => {\n              setIsFancy(e.target.checked)\n            }}\n          />\n          Use fancy styling\n        </label>\n      </div>\n    );\n  }\n  return (\n    <div>\n      <Counter isFancy={false} />\n      <label>\n        <input\n          type=\"checkbox\"\n          checked={isFancy}\n          onChange={e => {\n            setIsFancy(e.target.checked)\n          }}\n        />\n        Use fancy styling\n      </label>\n    </div>\n  );\n}\n\nfunction Counter({ isFancy }) {\n  const [score, setScore] = useState(0);\n  const [hover, setHover] = useState(false);\n\n  let className = 'counter';\n  if (hover) {\n    className += ' hover';\n  }\n  if (isFancy) {\n    className += ' fancy';\n  }\n\n  return (\n    <div\n      className={className}\n      onPointerEnter={() => setHover(true)}\n      onPointerLeave={() => setHover(false)}\n    >\n      <h1>{score}</h1>\n      <button onClick={() => setScore(score + 1)}>\n        Add one\n      </button>\n    </div>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "resetting",
      "preserving",
      "state",
      "component"
    ],
    "code_length": 63,
    "is_duplicate": false,
    "topic": "Preserving and Resetting State",
    "purpose": "Preserving and Resetting State",
    "explanation": "Preserving and Resetting State – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/preserving-and-resetting-state",
    "source_title": "Preserving and Resetting State – React",
    "section": "Preserving and Resetting State",
    "code": "import { useState } from 'react';\n\nexport default function App() {\n  const [isPaused, setIsPaused] = useState(false);\n  return (\n    <div>\n      {isPaused ? (\n        <p>See you later!</p> \n      ) : (\n        <Counter /> \n      )}\n      <label>\n        <input\n          type=\"checkbox\"\n          checked={isPaused}\n          onChange={e => {\n            setIsPaused(e.target.checked)\n          }}\n        />\n        Take a break\n      </label>\n    </div>\n  );\n}\n\nfunction Counter() {\n  const [score, setScore] = useState(0);\n  const [hover, setHover] = useState(false);\n\n  let className = 'counter';\n  if (hover) {\n    className += ' hover';\n  }\n\n  return (\n    <div\n      className={className}\n      onPointerEnter={() => setHover(true)}\n      onPointerLeave={() => setHover(false)}\n    >\n      <h1>{score}</h1>\n      <button onClick={() => setScore(score + 1)}>\n        Add one\n      </button>\n    </div>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "resetting",
      "preserving",
      "state",
      "component"
    ],
    "code_length": 47,
    "is_duplicate": false,
    "topic": "Preserving and Resetting State",
    "purpose": "Preserving and Resetting State",
    "explanation": "Preserving and Resetting State – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/preserving-and-resetting-state",
    "source_title": "Preserving and Resetting State – React",
    "section": "Preserving and Resetting State",
    "code": "import { useState } from 'react';\n\nexport default function App() {\n  const [isFancy, setIsFancy] = useState(false);\n  return (\n    <div>\n      {isFancy ? (\n        <div>\n          <Counter isFancy={true} /> \n        </div>\n      ) : (\n        <section>\n          <Counter isFancy={false} />\n        </section>\n      )}\n      <label>\n        <input\n          type=\"checkbox\"\n          checked={isFancy}\n          onChange={e => {\n            setIsFancy(e.target.checked)\n          }}\n        />\n        Use fancy styling\n      </label>\n    </div>\n  );\n}\n\nfunction Counter({ isFancy }) {\n  const [score, setScore] = useState(0);\n  const [hover, setHover] = useState(false);\n\n  let className = 'counter';\n  if (hover) {\n    className += ' hover';\n  }\n  if (isFancy) {\n    className += ' fancy';\n  }\n\n  return (\n    <div\n      className={className}\n      onPointerEnter={() => setHover(true)}\n      onPointerLeave={() => setHover(false)}\n    >\n      <h1>{score}</h1>\n      <button onClick={() => setScore(score + 1)}>\n        Add one\n      </button>\n    </div>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "resetting",
      "preserving",
      "state",
      "component"
    ],
    "code_length": 54,
    "is_duplicate": false,
    "topic": "Preserving and Resetting State",
    "purpose": "Preserving and Resetting State",
    "explanation": "Preserving and Resetting State – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/preserving-and-resetting-state",
    "source_title": "Preserving and Resetting State – React",
    "section": "Preserving and Resetting State",
    "code": "import { useState } from 'react';\n\nexport default function MyComponent() {\n  const [counter, setCounter] = useState(0);\n\n  function MyTextField() {\n    const [text, setText] = useState('');\n\n    return (\n      <input\n        value={text}\n        onChange={e => setText(e.target.value)}\n      />\n    );\n  }\n\n  return (\n    <>\n      <MyTextField />\n      <button onClick={() => {\n        setCounter(counter + 1)\n      }}>Clicked {counter} times</button>\n    </>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "resetting",
      "preserving",
      "state",
      "component"
    ],
    "code_length": 25,
    "is_duplicate": false,
    "topic": "Preserving and Resetting State",
    "purpose": "Preserving and Resetting State",
    "explanation": "Preserving and Resetting State – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/preserving-and-resetting-state",
    "source_title": "Preserving and Resetting State – React",
    "section": "Preserving and Resetting State",
    "code": "import { useState } from 'react';\n\nexport default function Scoreboard() {\n  const [isPlayerA, setIsPlayerA] = useState(true);\n  return (\n    <div>\n      {isPlayerA ? (\n        <Counter person=\"Taylor\" />\n      ) : (\n        <Counter person=\"Sarah\" />\n      )}\n      <button onClick={() => {\n        setIsPlayerA(!isPlayerA);\n      }}>\n        Next player!\n      </button>\n    </div>\n  );\n}\n\nfunction Counter({ person }) {\n  const [score, setScore] = useState(0);\n  const [hover, setHover] = useState(false);\n\n  let className = 'counter';\n  if (hover) {\n    className += ' hover';\n  }\n\n  return (\n    <div\n      className={className}\n      onPointerEnter={() => setHover(true)}\n      onPointerLeave={() => setHover(false)}\n    >\n      <h1>{person}'s score: {score}</h1>\n      <button onClick={() => setScore(score + 1)}>\n        Add one\n      </button>\n    </div>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "resetting",
      "preserving",
      "state",
      "component"
    ],
    "code_length": 42,
    "is_duplicate": false,
    "topic": "Preserving and Resetting State",
    "purpose": "Preserving and Resetting State",
    "explanation": "Preserving and Resetting State – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/preserving-and-resetting-state",
    "source_title": "Preserving and Resetting State – React",
    "section": "Preserving and Resetting State",
    "code": "import { useState } from 'react';\n\nexport default function Scoreboard() {\n  const [isPlayerA, setIsPlayerA] = useState(true);\n  return (\n    <div>\n      {isPlayerA &&\n        <Counter person=\"Taylor\" />\n      }\n      {!isPlayerA &&\n        <Counter person=\"Sarah\" />\n      }\n      <button onClick={() => {\n        setIsPlayerA(!isPlayerA);\n      }}>\n        Next player!\n      </button>\n    </div>\n  );\n}\n\nfunction Counter({ person }) {\n  const [score, setScore] = useState(0);\n  const [hover, setHover] = useState(false);\n\n  let className = 'counter';\n  if (hover) {\n    className += ' hover';\n  }\n\n  return (\n    <div\n      className={className}\n      onPointerEnter={() => setHover(true)}\n      onPointerLeave={() => setHover(false)}\n    >\n      <h1>{person}'s score: {score}</h1>\n      <button onClick={() => setScore(score + 1)}>\n        Add one\n      </button>\n    </div>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "resetting",
      "preserving",
      "state",
      "component"
    ],
    "code_length": 43,
    "is_duplicate": false,
    "topic": "Preserving and Resetting State",
    "purpose": "Preserving and Resetting State",
    "explanation": "Preserving and Resetting State – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/preserving-and-resetting-state",
    "source_title": "Preserving and Resetting State – React",
    "section": "Preserving and Resetting State",
    "code": "import { useState } from 'react';\n\nexport default function Scoreboard() {\n  const [isPlayerA, setIsPlayerA] = useState(true);\n  return (\n    <div>\n      {isPlayerA ? (\n        <Counter key=\"Taylor\" person=\"Taylor\" />\n      ) : (\n        <Counter key=\"Sarah\" person=\"Sarah\" />\n      )}\n      <button onClick={() => {\n        setIsPlayerA(!isPlayerA);\n      }}>\n        Next player!\n      </button>\n    </div>\n  );\n}\n\nfunction Counter({ person }) {\n  const [score, setScore] = useState(0);\n  const [hover, setHover] = useState(false);\n\n  let className = 'counter';\n  if (hover) {\n    className += ' hover';\n  }\n\n  return (\n    <div\n      className={className}\n      onPointerEnter={() => setHover(true)}\n      onPointerLeave={() => setHover(false)}\n    >\n      <h1>{person}'s score: {score}</h1>\n      <button onClick={() => setScore(score + 1)}>\n        Add one\n      </button>\n    </div>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "resetting",
      "preserving",
      "state",
      "component"
    ],
    "code_length": 42,
    "is_duplicate": false,
    "topic": "Preserving and Resetting State",
    "purpose": "Preserving and Resetting State",
    "explanation": "Preserving and Resetting State – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/preserving-and-resetting-state",
    "source_title": "Preserving and Resetting State – React",
    "section": "Preserving and Resetting State",
    "code": "{isPlayerA ? (\n  <Counter key=\"Taylor\" person=\"Taylor\" />\n) : (\n  <Counter key=\"Sarah\" person=\"Sarah\" />\n)}",
    "code_language": "unknown",
    "code_type": "snippet",
    "tags": [
      "resetting",
      "preserving",
      "state"
    ],
    "code_length": 5,
    "is_duplicate": false,
    "topic": "Preserving and Resetting State",
    "purpose": "Preserving and Resetting State",
    "explanation": "Preserving and Resetting State – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/preserving-and-resetting-state",
    "source_title": "Preserving and Resetting State – React",
    "section": "Preserving and Resetting State",
    "code": "import { useState } from 'react';\nimport Chat from './Chat.js';\nimport ContactList from './ContactList.js';\n\nexport default function Messenger() {\n  const [to, setTo] = useState(contacts[0]);\n  return (\n    <div>\n      <ContactList\n        contacts={contacts}\n        selectedContact={to}\n        onSelect={contact => setTo(contact)}\n      />\n      <Chat contact={to} />\n    </div>\n  )\n}\n\nconst contacts = [\n  { id: 0, name: 'Taylor', email: 'taylor@mail.com' },\n  { id: 1, name: 'Alice', email: 'alice@mail.com' },\n  { id: 2, name: 'Bob', email: 'bob@mail.com' }\n];",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "resetting",
      "preserving",
      "state",
      "component"
    ],
    "code_length": 23,
    "is_duplicate": false,
    "topic": "Preserving and Resetting State",
    "purpose": "Preserving and Resetting State",
    "explanation": "Preserving and Resetting State – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/preserving-and-resetting-state",
    "source_title": "Preserving and Resetting State – React",
    "section": "Preserving and Resetting State",
    "code": "<Chat key={to.id} contact={to} />",
    "code_language": "html/jsx",
    "code_type": "snippet",
    "tags": [
      "resetting",
      "preserving",
      "state"
    ],
    "code_length": 1,
    "is_duplicate": false,
    "topic": "Preserving and Resetting State",
    "purpose": "Preserving and Resetting State",
    "explanation": "Preserving and Resetting State – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/preserving-and-resetting-state",
    "source_title": "Preserving and Resetting State – React",
    "section": "Preserving and Resetting State",
    "code": "import { useState } from 'react';\nimport Chat from './Chat.js';\nimport ContactList from './ContactList.js';\n\nexport default function Messenger() {\n  const [to, setTo] = useState(contacts[0]);\n  return (\n    <div>\n      <ContactList\n        contacts={contacts}\n        selectedContact={to}\n        onSelect={contact => setTo(contact)}\n      />\n      <Chat key={to.id} contact={to} />\n    </div>\n  )\n}\n\nconst contacts = [\n  { id: 0, name: 'Taylor', email: 'taylor@mail.com' },\n  { id: 1, name: 'Alice', email: 'alice@mail.com' },\n  { id: 2, name: 'Bob', email: 'bob@mail.com' }\n];",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "resetting",
      "preserving",
      "state",
      "component"
    ],
    "code_length": 23,
    "is_duplicate": false,
    "topic": "Preserving and Resetting State",
    "purpose": "Preserving and Resetting State",
    "explanation": "Preserving and Resetting State – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/preserving-and-resetting-state",
    "source_title": "Preserving and Resetting State – React",
    "section": "Preserving and Resetting State",
    "code": "import { useState } from 'react';\n\nexport default function App() {\n  const [showHint, setShowHint] = useState(false);\n  if (showHint) {\n    return (\n      <div>\n        <p><i>Hint: Your favorite city?</i></p>\n        <Form />\n        <button onClick={() => {\n          setShowHint(false);\n        }}>Hide hint</button>\n      </div>\n    );\n  }\n  return (\n    <div>\n      <Form />\n      <button onClick={() => {\n        setShowHint(true);\n      }}>Show hint</button>\n    </div>\n  );\n}\n\nfunction Form() {\n  const [text, setText] = useState('');\n  return (\n    <textarea\n      value={text}\n      onChange={e => setText(e.target.value)}\n    />\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "resetting",
      "preserving",
      "state",
      "component"
    ],
    "code_length": 34,
    "is_duplicate": false,
    "topic": "Preserving and Resetting State",
    "purpose": "Preserving and Resetting State",
    "explanation": "Preserving and Resetting State – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/keeping-components-pure",
    "source_title": "Keeping Components Pure – React",
    "section": "Keeping Components Pure",
    "code": "function double(number) {\n  return 2 * number;\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "components",
      "pure",
      "keeping"
    ],
    "code_length": 3,
    "is_duplicate": false,
    "topic": "Keeping Components Pure",
    "purpose": "Keeping Components Pure",
    "explanation": "Keeping Components Pure – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/keeping-components-pure",
    "source_title": "Keeping Components Pure – React",
    "section": "Keeping Components Pure",
    "code": "function Recipe({ drinkers }) {\n  return (\n    <ol>    \n      <li>Boil {drinkers} cups of water.</li>\n      <li>Add {drinkers} spoons of tea and {0.5 * drinkers} spoons of spice.</li>\n      <li>Add {0.5 * drinkers} cups of milk to boil and sugar to taste.</li>\n    </ol>\n  );\n}\n\nexport default function App() {\n  return (\n    <section>\n      <h1>Spiced Chai Recipe</h1>\n      <h2>For two</h2>\n      <Recipe drinkers={2} />\n      <h2>For a gathering</h2>\n      <Recipe drinkers={4} />\n    </section>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "components",
      "pure",
      "keeping",
      "component"
    ],
    "code_length": 21,
    "is_duplicate": false,
    "topic": "Keeping Components Pure",
    "purpose": "Keeping Components Pure",
    "explanation": "Keeping Components Pure – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/keeping-components-pure",
    "source_title": "Keeping Components Pure – React",
    "section": "Keeping Components Pure",
    "code": "let guest = 0;\n\nfunction Cup() {\n  // Bad: changing a preexisting variable!\n  guest = guest + 1;\n  return <h2>Tea cup for guest #{guest}</h2>;\n}\n\nexport default function TeaSet() {\n  return (\n    <>\n      <Cup />\n      <Cup />\n      <Cup />\n    </>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "components",
      "pure",
      "keeping",
      "component"
    ],
    "code_length": 17,
    "is_duplicate": false,
    "topic": "Keeping Components Pure",
    "purpose": "Keeping Components Pure",
    "explanation": "Keeping Components Pure – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/keeping-components-pure",
    "source_title": "Keeping Components Pure – React",
    "section": "Keeping Components Pure",
    "code": "function Cup({ guest }) {\n  return <h2>Tea cup for guest #{guest}</h2>;\n}\n\nexport default function TeaSet() {\n  return (\n    <>\n      <Cup guest={1} />\n      <Cup guest={2} />\n      <Cup guest={3} />\n    </>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "components",
      "pure",
      "keeping",
      "component"
    ],
    "code_length": 13,
    "is_duplicate": false,
    "topic": "Keeping Components Pure",
    "purpose": "Keeping Components Pure",
    "explanation": "Keeping Components Pure – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/keeping-components-pure",
    "source_title": "Keeping Components Pure – React",
    "section": "Keeping Components Pure",
    "code": "function Cup({ guest }) {\n  return <h2>Tea cup for guest #{guest}</h2>;\n}\n\nexport default function TeaGathering() {\n  const cups = [];\n  for (let i = 1; i <= 12; i++) {\n    cups.push(<Cup key={i} guest={i} />);\n  }\n  return cups;\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "components",
      "pure",
      "keeping",
      "component"
    ],
    "code_length": 11,
    "is_duplicate": false,
    "topic": "Keeping Components Pure",
    "purpose": "Keeping Components Pure",
    "explanation": "Keeping Components Pure – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/keeping-components-pure",
    "source_title": "Keeping Components Pure – React",
    "section": "Keeping Components Pure",
    "code": "export default function Clock({ time }) {\n  const hours = time.getHours();\n  if (hours >= 0 && hours <= 6) {\n    document.getElementById('time').className = 'night';\n  } else {\n    document.getElementById('time').className = 'day';\n  }\n  return (\n    <h1 id=\"time\">\n      {time.toLocaleTimeString()}\n    </h1>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "components",
      "pure",
      "keeping",
      "component"
    ],
    "code_length": 13,
    "is_duplicate": false,
    "topic": "Keeping Components Pure",
    "purpose": "Keeping Components Pure",
    "explanation": "Keeping Components Pure – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/javascript-in-jsx-with-curly-braces",
    "source_title": "JavaScript in JSX with Curly Braces – React",
    "section": "JavaScript in JSX with Curly Braces",
    "code": "export default function Avatar() {\n  const avatar = 'https://i.imgur.com/7vQD0fPs.jpg';\n  const description = 'Gregorio Y. Zara';\n  return (\n    <img\n      className=\"avatar\"\n      src={avatar}\n      alt={description}\n    />\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "component",
      "javascript",
      "jsx",
      "curly",
      "braces"
    ],
    "code_length": 11,
    "is_duplicate": false,
    "topic": "JavaScript in JSX with Curly Braces",
    "purpose": "JavaScript in JSX with Curly Braces",
    "explanation": "JavaScript in JSX with Curly Braces – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/javascript-in-jsx-with-curly-braces",
    "source_title": "JavaScript in JSX with Curly Braces – React",
    "section": "JavaScript in JSX with Curly Braces",
    "code": "export default function TodoList() {\n  const name = 'Gregorio Y. Zara';\n  return (\n    <h1>{name}'s To Do List</h1>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "component",
      "javascript",
      "jsx",
      "curly",
      "braces"
    ],
    "code_length": 6,
    "is_duplicate": false,
    "topic": "JavaScript in JSX with Curly Braces",
    "purpose": "JavaScript in JSX with Curly Braces",
    "explanation": "JavaScript in JSX with Curly Braces – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/javascript-in-jsx-with-curly-braces",
    "source_title": "JavaScript in JSX with Curly Braces – React",
    "section": "JavaScript in JSX with Curly Braces",
    "code": "const today = new Date();\n\nfunction formatDate(date) {\n  return new Intl.DateTimeFormat(\n    'en-US',\n    { weekday: 'long' }\n  ).format(date);\n}\n\nexport default function TodoList() {\n  return (\n    <h1>To Do List for {formatDate(today)}</h1>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "component",
      "javascript",
      "jsx",
      "curly",
      "braces"
    ],
    "code_length": 14,
    "is_duplicate": false,
    "topic": "JavaScript in JSX with Curly Braces",
    "purpose": "JavaScript in JSX with Curly Braces",
    "explanation": "JavaScript in JSX with Curly Braces – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/javascript-in-jsx-with-curly-braces",
    "source_title": "JavaScript in JSX with Curly Braces – React",
    "section": "JavaScript in JSX with Curly Braces",
    "code": "export default function TodoList() {\n  return (\n    <ul style={{\n      backgroundColor: 'black',\n      color: 'pink'\n    }}>\n      <li>Improve the videophone</li>\n      <li>Prepare aeronautics lectures</li>\n      <li>Work on the alcohol-fuelled engine</li>\n    </ul>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "component",
      "javascript",
      "jsx",
      "curly",
      "braces"
    ],
    "code_length": 12,
    "is_duplicate": false,
    "topic": "JavaScript in JSX with Curly Braces",
    "purpose": "JavaScript in JSX with Curly Braces",
    "explanation": "JavaScript in JSX with Curly Braces – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/javascript-in-jsx-with-curly-braces",
    "source_title": "JavaScript in JSX with Curly Braces – React",
    "section": "JavaScript in JSX with Curly Braces",
    "code": "<ul style={\n  {\n    backgroundColor: 'black',\n    color: 'pink'\n  }\n}>",
    "code_language": "html/jsx",
    "code_type": "snippet",
    "tags": [
      "curly",
      "braces",
      "javascript",
      "jsx"
    ],
    "code_length": 6,
    "is_duplicate": false,
    "topic": "JavaScript in JSX with Curly Braces",
    "purpose": "JavaScript in JSX with Curly Braces",
    "explanation": "JavaScript in JSX with Curly Braces – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/javascript-in-jsx-with-curly-braces",
    "source_title": "JavaScript in JSX with Curly Braces – React",
    "section": "JavaScript in JSX with Curly Braces",
    "code": "const person = {\n  name: 'Gregorio Y. Zara',\n  theme: {\n    backgroundColor: 'black',\n    color: 'pink'\n  }\n};\n\nexport default function TodoList() {\n  return (\n    <div style={person.theme}>\n      <h1>{person.name}'s Todos</h1>\n      <img\n        className=\"avatar\"\n        src=\"https://i.imgur.com/7vQD0fPs.jpg\"\n        alt=\"Gregorio Y. Zara\"\n      />\n      <ul>\n        <li>Improve the videophone</li>\n        <li>Prepare aeronautics lectures</li>\n        <li>Work on the alcohol-fuelled engine</li>\n      </ul>\n    </div>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "component",
      "javascript",
      "jsx",
      "curly",
      "braces"
    ],
    "code_length": 25,
    "is_duplicate": false,
    "topic": "JavaScript in JSX with Curly Braces",
    "purpose": "JavaScript in JSX with Curly Braces",
    "explanation": "JavaScript in JSX with Curly Braces – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/javascript-in-jsx-with-curly-braces",
    "source_title": "JavaScript in JSX with Curly Braces – React",
    "section": "JavaScript in JSX with Curly Braces",
    "code": "const person = {\n  name: 'Gregorio Y. Zara',\n  theme: {\n    backgroundColor: 'black',\n    color: 'pink'\n  }\n};",
    "code_language": "unknown",
    "code_type": "snippet",
    "tags": [
      "curly",
      "braces",
      "javascript",
      "jsx"
    ],
    "code_length": 7,
    "is_duplicate": false,
    "topic": "JavaScript in JSX with Curly Braces",
    "purpose": "JavaScript in JSX with Curly Braces",
    "explanation": "JavaScript in JSX with Curly Braces – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/javascript-in-jsx-with-curly-braces",
    "source_title": "JavaScript in JSX with Curly Braces – React",
    "section": "JavaScript in JSX with Curly Braces",
    "code": "<div style={person.theme}>\n  <h1>{person.name}'s Todos</h1>",
    "code_language": "html/jsx",
    "code_type": "snippet",
    "tags": [
      "curly",
      "braces",
      "javascript",
      "jsx"
    ],
    "code_length": 2,
    "is_duplicate": false,
    "topic": "JavaScript in JSX with Curly Braces",
    "purpose": "JavaScript in JSX with Curly Braces",
    "explanation": "JavaScript in JSX with Curly Braces – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/javascript-in-jsx-with-curly-braces",
    "source_title": "JavaScript in JSX with Curly Braces – React",
    "section": "JavaScript in JSX with Curly Braces",
    "code": "const person = {\n  name: 'Gregorio Y. Zara',\n  theme: {\n    backgroundColor: 'black',\n    color: 'pink'\n  }\n};\n\nexport default function TodoList() {\n  return (\n    <div style={person.theme}>\n      <h1>{person}'s Todos</h1>\n      <img\n        className=\"avatar\"\n        src=\"https://i.imgur.com/7vQD0fPs.jpg\"\n        alt=\"Gregorio Y. Zara\"\n      />\n      <ul>\n        <li>Improve the videophone</li>\n        <li>Prepare aeronautics lectures</li>\n        <li>Work on the alcohol-fuelled engine</li>\n      </ul>\n    </div>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "component",
      "javascript",
      "jsx",
      "curly",
      "braces"
    ],
    "code_length": 25,
    "is_duplicate": false,
    "topic": "JavaScript in JSX with Curly Braces",
    "purpose": "JavaScript in JSX with Curly Braces",
    "explanation": "JavaScript in JSX with Curly Braces – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/reusing-logic-with-custom-hooks",
    "source_title": "Reusing Logic with Custom Hooks – React",
    "section": "Reusing Logic with Custom Hooks",
    "code": "import { useState, useEffect } from 'react';\n\nexport default function SaveButton() {\n  const [isOnline, setIsOnline] = useState(true);\n  useEffect(() => {\n    function handleOnline() {\n      setIsOnline(true);\n    }\n    function handleOffline() {\n      setIsOnline(false);\n    }\n    window.addEventListener('online', handleOnline);\n    window.addEventListener('offline', handleOffline);\n    return () => {\n      window.removeEventListener('online', handleOnline);\n      window.removeEventListener('offline', handleOffline);\n    };\n  }, []);\n\n  function handleSaveClick() {\n    console.log('✅ Progress saved');\n  }\n\n  return (\n    <button disabled={!isOnline} onClick={handleSaveClick}>\n      {isOnline ? 'Save progress' : 'Reconnecting...'}\n    </button>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "logic",
      "effect",
      "state",
      "hooks",
      "component",
      "reusing",
      "custom"
    ],
    "code_length": 29,
    "is_duplicate": false,
    "topic": "Reusing Logic with Custom Hooks",
    "purpose": "Reusing Logic with Custom Hooks",
    "explanation": "Reusing Logic with Custom Hooks – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/reusing-logic-with-custom-hooks",
    "source_title": "Reusing Logic with Custom Hooks – React",
    "section": "Reusing Logic with Custom Hooks",
    "code": "function StatusBar() {\n  const isOnline = useOnlineStatus();\n  return <h1>{isOnline ? '✅ Online' : '❌ Disconnected'}</h1>;\n}\n\nfunction SaveButton() {\n  const isOnline = useOnlineStatus();\n\n  function handleSaveClick() {\n    console.log('✅ Progress saved');\n  }\n\n  return (\n    <button disabled={!isOnline} onClick={handleSaveClick}>\n      {isOnline ? 'Save progress' : 'Reconnecting...'}\n    </button>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "reusing",
      "logic",
      "hooks",
      "custom"
    ],
    "code_length": 18,
    "is_duplicate": false,
    "topic": "Reusing Logic with Custom Hooks",
    "purpose": "Reusing Logic with Custom Hooks",
    "explanation": "Reusing Logic with Custom Hooks – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/reusing-logic-with-custom-hooks",
    "source_title": "Reusing Logic with Custom Hooks – React",
    "section": "Reusing Logic with Custom Hooks",
    "code": "function useOnlineStatus() {\n  const [isOnline, setIsOnline] = useState(true);\n  useEffect(() => {\n    function handleOnline() {\n      setIsOnline(true);\n    }\n    function handleOffline() {\n      setIsOnline(false);\n    }\n    window.addEventListener('online', handleOnline);\n    window.addEventListener('offline', handleOffline);\n    return () => {\n      window.removeEventListener('online', handleOnline);\n      window.removeEventListener('offline', handleOffline);\n    };\n  }, []);\n  return isOnline;\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "logic",
      "effect",
      "state",
      "hooks",
      "reusing",
      "custom"
    ],
    "code_length": 18,
    "is_duplicate": false,
    "topic": "Reusing Logic with Custom Hooks",
    "purpose": "Reusing Logic with Custom Hooks",
    "explanation": "Reusing Logic with Custom Hooks – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/reusing-logic-with-custom-hooks",
    "source_title": "Reusing Logic with Custom Hooks – React",
    "section": "Reusing Logic with Custom Hooks",
    "code": "import { useOnlineStatus } from './useOnlineStatus.js';\n\nfunction StatusBar() {\n  const isOnline = useOnlineStatus();\n  return <h1>{isOnline ? '✅ Online' : '❌ Disconnected'}</h1>;\n}\n\nfunction SaveButton() {\n  const isOnline = useOnlineStatus();\n\n  function handleSaveClick() {\n    console.log('✅ Progress saved');\n  }\n\n  return (\n    <button disabled={!isOnline} onClick={handleSaveClick}>\n      {isOnline ? 'Save progress' : 'Reconnecting...'}\n    </button>\n  );\n}\n\nexport default function App() {\n  return (\n    <>\n      <SaveButton />\n      <StatusBar />\n    </>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "logic",
      "component",
      "hooks",
      "reusing",
      "custom"
    ],
    "code_length": 29,
    "is_duplicate": false,
    "topic": "Reusing Logic with Custom Hooks",
    "purpose": "Reusing Logic with Custom Hooks",
    "explanation": "Reusing Logic with Custom Hooks – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/reusing-logic-with-custom-hooks",
    "source_title": "Reusing Logic with Custom Hooks – React",
    "section": "Reusing Logic with Custom Hooks",
    "code": "function StatusBar() {\n  const isOnline = useOnlineStatus();\n  // ...\n}\n\nfunction SaveButton() {\n  const isOnline = useOnlineStatus();\n  // ...\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "reusing",
      "logic",
      "hooks",
      "custom"
    ],
    "code_length": 9,
    "is_duplicate": false,
    "topic": "Reusing Logic with Custom Hooks",
    "purpose": "Reusing Logic with Custom Hooks",
    "explanation": "Reusing Logic with Custom Hooks – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/reusing-logic-with-custom-hooks",
    "source_title": "Reusing Logic with Custom Hooks – React",
    "section": "Reusing Logic with Custom Hooks",
    "code": "function StatusBar() {\n  const [isOnline, setIsOnline] = useState(true);\n  useEffect(() => {\n    // ...\n  }, []);\n  // ...\n}\n\nfunction SaveButton() {\n  const [isOnline, setIsOnline] = useState(true);\n  useEffect(() => {\n    // ...\n  }, []);\n  // ...\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "logic",
      "effect",
      "state",
      "hooks",
      "reusing",
      "custom"
    ],
    "code_length": 15,
    "is_duplicate": false,
    "topic": "Reusing Logic with Custom Hooks",
    "purpose": "Reusing Logic with Custom Hooks",
    "explanation": "Reusing Logic with Custom Hooks – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/reusing-logic-with-custom-hooks",
    "source_title": "Reusing Logic with Custom Hooks – React",
    "section": "Reusing Logic with Custom Hooks",
    "code": "import { useState } from 'react';\n\nexport default function Form() {\n  const [firstName, setFirstName] = useState('Mary');\n  const [lastName, setLastName] = useState('Poppins');\n\n  function handleFirstNameChange(e) {\n    setFirstName(e.target.value);\n  }\n\n  function handleLastNameChange(e) {\n    setLastName(e.target.value);\n  }\n\n  return (\n    <>\n      <label>\n        First name:\n        <input value={firstName} onChange={handleFirstNameChange} />\n      </label>\n      <label>\n        Last name:\n        <input value={lastName} onChange={handleLastNameChange} />\n      </label>\n      <p><b>Good morning, {firstName} {lastName}.</b></p>\n    </>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "logic",
      "state",
      "hooks",
      "component",
      "reusing",
      "custom"
    ],
    "code_length": 28,
    "is_duplicate": false,
    "topic": "Reusing Logic with Custom Hooks",
    "purpose": "Reusing Logic with Custom Hooks",
    "explanation": "Reusing Logic with Custom Hooks – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/reusing-logic-with-custom-hooks",
    "source_title": "Reusing Logic with Custom Hooks – React",
    "section": "Reusing Logic with Custom Hooks",
    "code": "import { useState } from 'react';\n\nexport function useFormInput(initialValue) {\n  const [value, setValue] = useState(initialValue);\n\n  function handleChange(e) {\n    setValue(e.target.value);\n  }\n\n  const inputProps = {\n    value: value,\n    onChange: handleChange\n  };\n\n  return inputProps;\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "logic",
      "state",
      "hooks",
      "reusing",
      "custom"
    ],
    "code_length": 16,
    "is_duplicate": false,
    "topic": "Reusing Logic with Custom Hooks",
    "purpose": "Reusing Logic with Custom Hooks",
    "explanation": "Reusing Logic with Custom Hooks – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/reusing-logic-with-custom-hooks",
    "source_title": "Reusing Logic with Custom Hooks – React",
    "section": "Reusing Logic with Custom Hooks",
    "code": "function Form() {\n  const firstNameProps = useFormInput('Mary');\n  const lastNameProps = useFormInput('Poppins');\n  // ...",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "reusing",
      "logic",
      "hooks",
      "custom"
    ],
    "code_length": 4,
    "is_duplicate": false,
    "topic": "Reusing Logic with Custom Hooks",
    "purpose": "Reusing Logic with Custom Hooks",
    "explanation": "Reusing Logic with Custom Hooks – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/reusing-logic-with-custom-hooks",
    "source_title": "Reusing Logic with Custom Hooks – React",
    "section": "Reusing Logic with Custom Hooks",
    "code": "import { useState, useEffect } from 'react';\nimport { createConnection } from './chat.js';\nimport { showNotification } from './notifications.js';\n\nexport default function ChatRoom({ roomId }) {\n  const [serverUrl, setServerUrl] = useState('https://localhost:1234');\n\n  useEffect(() => {\n    const options = {\n      serverUrl: serverUrl,\n      roomId: roomId\n    };\n    const connection = createConnection(options);\n    connection.on('message', (msg) => {\n      showNotification('New message: ' + msg);\n    });\n    connection.connect();\n    return () => connection.disconnect();\n  }, [roomId, serverUrl]);\n\n  return (\n    <>\n      <label>\n        Server URL:\n        <input value={serverUrl} onChange={e => setServerUrl(e.target.value)} />\n      </label>\n      <h1>Welcome to the {roomId} room!</h1>\n    </>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "logic",
      "effect",
      "state",
      "hooks",
      "component",
      "reusing",
      "custom"
    ],
    "code_length": 30,
    "is_duplicate": false,
    "topic": "Reusing Logic with Custom Hooks",
    "purpose": "Reusing Logic with Custom Hooks",
    "explanation": "Reusing Logic with Custom Hooks – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/reusing-logic-with-custom-hooks",
    "source_title": "Reusing Logic with Custom Hooks – React",
    "section": "Reusing Logic with Custom Hooks",
    "code": "export function useChatRoom({ serverUrl, roomId }) {\n  useEffect(() => {\n    const options = {\n      serverUrl: serverUrl,\n      roomId: roomId\n    };\n    const connection = createConnection(options);\n    connection.connect();\n    connection.on('message', (msg) => {\n      showNotification('New message: ' + msg);\n    });\n    return () => connection.disconnect();\n  }, [roomId, serverUrl]);\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "effect",
      "logic",
      "hooks",
      "reusing",
      "custom"
    ],
    "code_length": 14,
    "is_duplicate": false,
    "topic": "Reusing Logic with Custom Hooks",
    "purpose": "Reusing Logic with Custom Hooks",
    "explanation": "Reusing Logic with Custom Hooks – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/reusing-logic-with-custom-hooks",
    "source_title": "Reusing Logic with Custom Hooks – React",
    "section": "Reusing Logic with Custom Hooks",
    "code": "export default function ChatRoom({ roomId }) {\n  const [serverUrl, setServerUrl] = useState('https://localhost:1234');\n\n  useChatRoom({\n    roomId: roomId,\n    serverUrl: serverUrl\n  });\n\n  return (\n    <>\n      <label>\n        Server URL:\n        <input value={serverUrl} onChange={e => setServerUrl(e.target.value)} />\n      </label>\n      <h1>Welcome to the {roomId} room!</h1>\n    </>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "logic",
      "state",
      "hooks",
      "component",
      "reusing",
      "custom"
    ],
    "code_length": 18,
    "is_duplicate": false,
    "topic": "Reusing Logic with Custom Hooks",
    "purpose": "Reusing Logic with Custom Hooks",
    "explanation": "Reusing Logic with Custom Hooks – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/reusing-logic-with-custom-hooks",
    "source_title": "Reusing Logic with Custom Hooks – React",
    "section": "Reusing Logic with Custom Hooks",
    "code": "import { useState } from 'react';\nimport { useChatRoom } from './useChatRoom.js';\n\nexport default function ChatRoom({ roomId }) {\n  const [serverUrl, setServerUrl] = useState('https://localhost:1234');\n\n  useChatRoom({\n    roomId: roomId,\n    serverUrl: serverUrl\n  });\n\n  return (\n    <>\n      <label>\n        Server URL:\n        <input value={serverUrl} onChange={e => setServerUrl(e.target.value)} />\n      </label>\n      <h1>Welcome to the {roomId} room!</h1>\n    </>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "logic",
      "state",
      "hooks",
      "component",
      "reusing",
      "custom"
    ],
    "code_length": 21,
    "is_duplicate": false,
    "topic": "Reusing Logic with Custom Hooks",
    "purpose": "Reusing Logic with Custom Hooks",
    "explanation": "Reusing Logic with Custom Hooks – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/reusing-logic-with-custom-hooks",
    "source_title": "Reusing Logic with Custom Hooks – React",
    "section": "Reusing Logic with Custom Hooks",
    "code": "export default function ChatRoom({ roomId }) {\n  const [serverUrl, setServerUrl] = useState('https://localhost:1234');\n\n  useChatRoom({\n    roomId: roomId,\n    serverUrl: serverUrl\n  });\n  // ...",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "logic",
      "state",
      "hooks",
      "component",
      "reusing",
      "custom"
    ],
    "code_length": 8,
    "is_duplicate": false,
    "topic": "Reusing Logic with Custom Hooks",
    "purpose": "Reusing Logic with Custom Hooks",
    "explanation": "Reusing Logic with Custom Hooks – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/reusing-logic-with-custom-hooks",
    "source_title": "Reusing Logic with Custom Hooks – React",
    "section": "Reusing Logic with Custom Hooks",
    "code": "export default function ChatRoom({ roomId }) {\n  const [serverUrl, setServerUrl] = useState('https://localhost:1234');\n\n  useChatRoom({\n    roomId: roomId,\n    serverUrl: serverUrl\n  });\n  // ...",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "logic",
      "state",
      "hooks",
      "component",
      "reusing",
      "custom"
    ],
    "code_length": 8,
    "is_duplicate": true,
    "topic": "Reusing Logic with Custom Hooks",
    "purpose": "Reusing Logic with Custom Hooks",
    "explanation": "Reusing Logic with Custom Hooks – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/reusing-logic-with-custom-hooks",
    "source_title": "Reusing Logic with Custom Hooks – React",
    "section": "Reusing Logic with Custom Hooks",
    "code": "export function useChatRoom({ serverUrl, roomId }) {\n  useEffect(() => {\n    const options = {\n      serverUrl: serverUrl,\n      roomId: roomId\n    };\n    const connection = createConnection(options);\n    connection.connect();\n    connection.on('message', (msg) => {\n      showNotification('New message: ' + msg);\n    });\n    return () => connection.disconnect();\n  }, [roomId, serverUrl]);\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "effect",
      "logic",
      "hooks",
      "reusing",
      "custom"
    ],
    "code_length": 14,
    "is_duplicate": true,
    "topic": "Reusing Logic with Custom Hooks",
    "purpose": "Reusing Logic with Custom Hooks",
    "explanation": "Reusing Logic with Custom Hooks – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/reusing-logic-with-custom-hooks",
    "source_title": "Reusing Logic with Custom Hooks – React",
    "section": "Reusing Logic with Custom Hooks",
    "code": "export default function ChatRoom({ roomId }) {\n  const [serverUrl, setServerUrl] = useState('https://localhost:1234');\n\n  useChatRoom({\n    roomId: roomId,\n    serverUrl: serverUrl,\n    onReceiveMessage(msg) {\n      showNotification('New message: ' + msg);\n    }\n  });\n  // ...",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "logic",
      "state",
      "hooks",
      "component",
      "reusing",
      "custom"
    ],
    "code_length": 11,
    "is_duplicate": false,
    "topic": "Reusing Logic with Custom Hooks",
    "purpose": "Reusing Logic with Custom Hooks",
    "explanation": "Reusing Logic with Custom Hooks – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/reusing-logic-with-custom-hooks",
    "source_title": "Reusing Logic with Custom Hooks – React",
    "section": "Reusing Logic with Custom Hooks",
    "code": "export function useChatRoom({ serverUrl, roomId, onReceiveMessage }) {\n  useEffect(() => {\n    const options = {\n      serverUrl: serverUrl,\n      roomId: roomId\n    };\n    const connection = createConnection(options);\n    connection.connect();\n    connection.on('message', (msg) => {\n      onReceiveMessage(msg);\n    });\n    return () => connection.disconnect();\n  }, [roomId, serverUrl, onReceiveMessage]); // ✅ All dependencies declared\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "effect",
      "logic",
      "hooks",
      "reusing",
      "custom"
    ],
    "code_length": 14,
    "is_duplicate": false,
    "topic": "Reusing Logic with Custom Hooks",
    "purpose": "Reusing Logic with Custom Hooks",
    "explanation": "Reusing Logic with Custom Hooks – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/reusing-logic-with-custom-hooks",
    "source_title": "Reusing Logic with Custom Hooks – React",
    "section": "Reusing Logic with Custom Hooks",
    "code": "import { useEffect, useEffectEvent } from 'react';\n// ...\n\nexport function useChatRoom({ serverUrl, roomId, onReceiveMessage }) {\n  const onMessage = useEffectEvent(onReceiveMessage);\n\n  useEffect(() => {\n    const options = {\n      serverUrl: serverUrl,\n      roomId: roomId\n    };\n    const connection = createConnection(options);\n    connection.connect();\n    connection.on('message', (msg) => {\n      onMessage(msg);\n    });\n    return () => connection.disconnect();\n  }, [roomId, serverUrl]); // ✅ All dependencies declared\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "effect",
      "logic",
      "hooks",
      "reusing",
      "custom"
    ],
    "code_length": 19,
    "is_duplicate": false,
    "topic": "Reusing Logic with Custom Hooks",
    "purpose": "Reusing Logic with Custom Hooks",
    "explanation": "Reusing Logic with Custom Hooks – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/reusing-logic-with-custom-hooks",
    "source_title": "Reusing Logic with Custom Hooks – React",
    "section": "Reusing Logic with Custom Hooks",
    "code": "import { useState } from 'react';\nimport { useChatRoom } from './useChatRoom.js';\nimport { showNotification } from './notifications.js';\n\nexport default function ChatRoom({ roomId }) {\n  const [serverUrl, setServerUrl] = useState('https://localhost:1234');\n\n  useChatRoom({\n    roomId: roomId,\n    serverUrl: serverUrl,\n    onReceiveMessage(msg) {\n      showNotification('New message: ' + msg);\n    }\n  });\n\n  return (\n    <>\n      <label>\n        Server URL:\n        <input value={serverUrl} onChange={e => setServerUrl(e.target.value)} />\n      </label>\n      <h1>Welcome to the {roomId} room!</h1>\n    </>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "logic",
      "state",
      "hooks",
      "component",
      "reusing",
      "custom"
    ],
    "code_length": 25,
    "is_duplicate": false,
    "topic": "Reusing Logic with Custom Hooks",
    "purpose": "Reusing Logic with Custom Hooks",
    "explanation": "Reusing Logic with Custom Hooks – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/reusing-logic-with-custom-hooks",
    "source_title": "Reusing Logic with Custom Hooks – React",
    "section": "Reusing Logic with Custom Hooks",
    "code": "function ShippingForm({ country }) {\n  const [cities, setCities] = useState(null);\n  // This Effect fetches cities for a country\n  useEffect(() => {\n    let ignore = false;\n    fetch(`/api/cities?country=${country}`)\n      .then(response => response.json())\n      .then(json => {\n        if (!ignore) {\n          setCities(json);\n        }\n      });\n    return () => {\n      ignore = true;\n    };\n  }, [country]);\n\n  const [city, setCity] = useState(null);\n  const [areas, setAreas] = useState(null);\n  // This Effect fetches areas for the selected city\n  useEffect(() => {\n    if (city) {\n      let ignore = false;\n      fetch(`/api/areas?city=${city}`)\n        .then(response => response.json())\n        .then(json => {\n          if (!ignore) {\n            setAreas(json);\n          }\n        });\n      return () => {\n        ignore = true;\n      };\n    }\n  }, [city]);\n\n  // ...",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "logic",
      "effect",
      "state",
      "hooks",
      "reusing",
      "custom"
    ],
    "code_length": 37,
    "is_duplicate": false,
    "topic": "Reusing Logic with Custom Hooks",
    "purpose": "Reusing Logic with Custom Hooks",
    "explanation": "Reusing Logic with Custom Hooks – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/reusing-logic-with-custom-hooks",
    "source_title": "Reusing Logic with Custom Hooks – React",
    "section": "Reusing Logic with Custom Hooks",
    "code": "function useData(url) {\n  const [data, setData] = useState(null);\n  useEffect(() => {\n    if (url) {\n      let ignore = false;\n      fetch(url)\n        .then(response => response.json())\n        .then(json => {\n          if (!ignore) {\n            setData(json);\n          }\n        });\n      return () => {\n        ignore = true;\n      };\n    }\n  }, [url]);\n  return data;\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "logic",
      "effect",
      "state",
      "hooks",
      "reusing",
      "custom"
    ],
    "code_length": 19,
    "is_duplicate": false,
    "topic": "Reusing Logic with Custom Hooks",
    "purpose": "Reusing Logic with Custom Hooks",
    "explanation": "Reusing Logic with Custom Hooks – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/reusing-logic-with-custom-hooks",
    "source_title": "Reusing Logic with Custom Hooks – React",
    "section": "Reusing Logic with Custom Hooks",
    "code": "function ShippingForm({ country }) {\n  const cities = useData(`/api/cities?country=${country}`);\n  const [city, setCity] = useState(null);\n  const areas = useData(city ? `/api/areas?city=${city}` : null);\n  // ...",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "logic",
      "state",
      "hooks",
      "reusing",
      "custom"
    ],
    "code_length": 5,
    "is_duplicate": false,
    "topic": "Reusing Logic with Custom Hooks",
    "purpose": "Reusing Logic with Custom Hooks",
    "explanation": "Reusing Logic with Custom Hooks – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/reusing-logic-with-custom-hooks",
    "source_title": "Reusing Logic with Custom Hooks – React",
    "section": "Reusing Logic with Custom Hooks",
    "code": "import { useState, useEffect } from 'react';\n\nexport function useOnlineStatus() {\n  const [isOnline, setIsOnline] = useState(true);\n  useEffect(() => {\n    function handleOnline() {\n      setIsOnline(true);\n    }\n    function handleOffline() {\n      setIsOnline(false);\n    }\n    window.addEventListener('online', handleOnline);\n    window.addEventListener('offline', handleOffline);\n    return () => {\n      window.removeEventListener('online', handleOnline);\n      window.removeEventListener('offline', handleOffline);\n    };\n  }, []);\n  return isOnline;\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "logic",
      "effect",
      "state",
      "hooks",
      "reusing",
      "custom"
    ],
    "code_length": 20,
    "is_duplicate": false,
    "topic": "Reusing Logic with Custom Hooks",
    "purpose": "Reusing Logic with Custom Hooks",
    "explanation": "Reusing Logic with Custom Hooks – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/reusing-logic-with-custom-hooks",
    "source_title": "Reusing Logic with Custom Hooks – React",
    "section": "Reusing Logic with Custom Hooks",
    "code": "import { useSyncExternalStore } from 'react';\n\nfunction subscribe(callback) {\n  window.addEventListener('online', callback);\n  window.addEventListener('offline', callback);\n  return () => {\n    window.removeEventListener('online', callback);\n    window.removeEventListener('offline', callback);\n  };\n}\n\nexport function useOnlineStatus() {\n  return useSyncExternalStore(\n    subscribe,\n    () => navigator.onLine, // How to get the value on the client\n    () => true // How to get the value on the server\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "reusing",
      "logic",
      "hooks",
      "custom"
    ],
    "code_length": 18,
    "is_duplicate": false,
    "topic": "Reusing Logic with Custom Hooks",
    "purpose": "Reusing Logic with Custom Hooks",
    "explanation": "Reusing Logic with Custom Hooks – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/reusing-logic-with-custom-hooks",
    "source_title": "Reusing Logic with Custom Hooks – React",
    "section": "Reusing Logic with Custom Hooks",
    "code": "function StatusBar() {\n  const isOnline = useOnlineStatus();\n  // ...\n}\n\nfunction SaveButton() {\n  const isOnline = useOnlineStatus();\n  // ...\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "reusing",
      "logic",
      "hooks",
      "custom"
    ],
    "code_length": 9,
    "is_duplicate": true,
    "topic": "Reusing Logic with Custom Hooks",
    "purpose": "Reusing Logic with Custom Hooks",
    "explanation": "Reusing Logic with Custom Hooks – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/reusing-logic-with-custom-hooks",
    "source_title": "Reusing Logic with Custom Hooks – React",
    "section": "Reusing Logic with Custom Hooks",
    "code": "import { useState, useEffect, useRef } from 'react';\n\nfunction Welcome() {\n  const ref = useRef(null);\n\n  useEffect(() => {\n    const duration = 1000;\n    const node = ref.current;\n\n    let startTime = performance.now();\n    let frameId = null;\n\n    function onFrame(now) {\n      const timePassed = now - startTime;\n      const progress = Math.min(timePassed / duration, 1);\n      onProgress(progress);\n      if (progress < 1) {\n        // We still have more frames to paint\n        frameId = requestAnimationFrame(onFrame);\n      }\n    }\n\n    function onProgress(progress) {\n      node.style.opacity = progress;\n    }\n\n    function start() {\n      onProgress(0);\n      startTime = performance.now();\n      frameId = requestAnimationFrame(onFrame);\n    }\n\n    function stop() {\n      cancelAnimationFrame(frameId);\n      startTime = null;\n      frameId = null;\n    }\n\n    start();\n    return () => stop();\n  }, []);\n\n  return (\n    <h1 className=\"welcome\" ref={ref}>\n      Welcome\n    </h1>\n  );\n}\n\nexport default function App() {\n  const [show, setShow] = useState(false);\n  return (\n    <>\n      <button onClick={() => setShow(!show)}>\n        {show ? 'Remove' : 'Show'}\n      </button>\n      <hr />\n      {show && <Welcome />}\n    </>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "logic",
      "effect",
      "state",
      "hooks",
      "component",
      "reusing",
      "custom"
    ],
    "code_length": 61,
    "is_duplicate": false,
    "topic": "Reusing Logic with Custom Hooks",
    "purpose": "Reusing Logic with Custom Hooks",
    "explanation": "Reusing Logic with Custom Hooks – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/reusing-logic-with-custom-hooks",
    "source_title": "Reusing Logic with Custom Hooks – React",
    "section": "Reusing Logic with Custom Hooks",
    "code": "import { useState, useEffect, useRef } from 'react';\nimport { useFadeIn } from './useFadeIn.js';\n\nfunction Welcome() {\n  const ref = useRef(null);\n\n  useFadeIn(ref, 1000);\n\n  return (\n    <h1 className=\"welcome\" ref={ref}>\n      Welcome\n    </h1>\n  );\n}\n\nexport default function App() {\n  const [show, setShow] = useState(false);\n  return (\n    <>\n      <button onClick={() => setShow(!show)}>\n        {show ? 'Remove' : 'Show'}\n      </button>\n      <hr />\n      {show && <Welcome />}\n    </>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "logic",
      "effect",
      "state",
      "hooks",
      "component",
      "reusing",
      "custom"
    ],
    "code_length": 27,
    "is_duplicate": false,
    "topic": "Reusing Logic with Custom Hooks",
    "purpose": "Reusing Logic with Custom Hooks",
    "explanation": "Reusing Logic with Custom Hooks – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/reusing-logic-with-custom-hooks",
    "source_title": "Reusing Logic with Custom Hooks – React",
    "section": "Reusing Logic with Custom Hooks",
    "code": "import { useState, useEffect } from 'react';\nimport { experimental_useEffectEvent as useEffectEvent } from 'react';\n\nexport function useFadeIn(ref, duration) {\n  const [isRunning, setIsRunning] = useState(true);\n\n  useAnimationLoop(isRunning, (timePassed) => {\n    const progress = Math.min(timePassed / duration, 1);\n    ref.current.style.opacity = progress;\n    if (progress === 1) {\n      setIsRunning(false);\n    }\n  });\n}\n\nfunction useAnimationLoop(isRunning, drawFrame) {\n  const onFrame = useEffectEvent(drawFrame);\n\n  useEffect(() => {\n    if (!isRunning) {\n      return;\n    }\n\n    const startTime = performance.now();\n    let frameId = null;\n\n    function tick(now) {\n      const timePassed = now - startTime;\n      onFrame(timePassed);\n      frameId = requestAnimationFrame(tick);\n    }\n\n    tick();\n    return () => cancelAnimationFrame(frameId);\n  }, [isRunning]);\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "logic",
      "effect",
      "state",
      "hooks",
      "reusing",
      "custom"
    ],
    "code_length": 36,
    "is_duplicate": false,
    "topic": "Reusing Logic with Custom Hooks",
    "purpose": "Reusing Logic with Custom Hooks",
    "explanation": "Reusing Logic with Custom Hooks – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/reusing-logic-with-custom-hooks",
    "source_title": "Reusing Logic with Custom Hooks – React",
    "section": "Reusing Logic with Custom Hooks",
    "code": "import { useState, useEffect } from 'react';\nimport { FadeInAnimation } from './animation.js';\n\nexport function useFadeIn(ref, duration) {\n  useEffect(() => {\n    const animation = new FadeInAnimation(ref.current);\n    animation.start(duration);\n    return () => {\n      animation.stop();\n    };\n  }, [ref, duration]);\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "logic",
      "effect",
      "state",
      "hooks",
      "reusing",
      "custom"
    ],
    "code_length": 12,
    "is_duplicate": false,
    "topic": "Reusing Logic with Custom Hooks",
    "purpose": "Reusing Logic with Custom Hooks",
    "explanation": "Reusing Logic with Custom Hooks – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/reusing-logic-with-custom-hooks",
    "source_title": "Reusing Logic with Custom Hooks – React",
    "section": "Reusing Logic with Custom Hooks",
    "code": ".welcome {\n  color: white;\n  padding: 50px;\n  text-align: center;\n  font-size: 50px;\n  background-image: radial-gradient(circle, rgba(63,94,251,1) 0%, rgba(252,70,107,1) 100%);\n\n  animation: fadeIn 1000ms;\n}\n\n@keyframes fadeIn {\n  0% { opacity: 0; }\n  100% { opacity: 1; }\n}",
    "code_language": "unknown",
    "code_type": "snippet",
    "tags": [
      "reusing",
      "logic",
      "hooks",
      "custom"
    ],
    "code_length": 14,
    "is_duplicate": false,
    "topic": "Reusing Logic with Custom Hooks",
    "purpose": "Reusing Logic with Custom Hooks",
    "explanation": "Reusing Logic with Custom Hooks – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/reusing-logic-with-custom-hooks",
    "source_title": "Reusing Logic with Custom Hooks – React",
    "section": "Reusing Logic with Custom Hooks",
    "code": "export default function Counter() {\n  const count = useCounter();\n  return <h1>Seconds passed: {count}</h1>;\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "logic",
      "component",
      "hooks",
      "reusing",
      "custom"
    ],
    "code_length": 4,
    "is_duplicate": false,
    "topic": "Reusing Logic with Custom Hooks",
    "purpose": "Reusing Logic with Custom Hooks",
    "explanation": "Reusing Logic with Custom Hooks – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/reusing-logic-with-custom-hooks",
    "source_title": "Reusing Logic with Custom Hooks – React",
    "section": "Reusing Logic with Custom Hooks",
    "code": "import { useState, useEffect } from 'react';\n\nexport default function Counter() {\n  const [count, setCount] = useState(0);\n  useEffect(() => {\n    const id = setInterval(() => {\n      setCount(c => c + 1);\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n  return <h1>Seconds passed: {count}</h1>;\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "logic",
      "effect",
      "state",
      "hooks",
      "component",
      "reusing",
      "custom"
    ],
    "code_length": 12,
    "is_duplicate": false,
    "topic": "Reusing Logic with Custom Hooks",
    "purpose": "Reusing Logic with Custom Hooks",
    "explanation": "Reusing Logic with Custom Hooks – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/thinking-in-react",
    "source_title": "Thinking in React – React",
    "section": "Thinking in React",
    "code": "[\n  { category: \"Fruits\", price: \"$1\", stocked: true, name: \"Apple\" },\n  { category: \"Fruits\", price: \"$1\", stocked: true, name: \"Dragonfruit\" },\n  { category: \"Fruits\", price: \"$2\", stocked: false, name: \"Passionfruit\" },\n  { category: \"Vegetables\", price: \"$2\", stocked: true, name: \"Spinach\" },\n  { category: \"Vegetables\", price: \"$4\", stocked: false, name: \"Pumpkin\" },\n  { category: \"Vegetables\", price: \"$1\", stocked: true, name: \"Peas\" }\n]",
    "code_language": "unknown",
    "code_type": "snippet",
    "tags": [
      "thinking"
    ],
    "code_length": 8,
    "is_duplicate": false,
    "topic": "Thinking in React",
    "purpose": "Thinking in React",
    "explanation": "Thinking in React – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/thinking-in-react",
    "source_title": "Thinking in React – React",
    "section": "Thinking in React",
    "code": "function ProductCategoryRow({ category }) {\n  return (\n    <tr>\n      <th colSpan=\"2\">\n        {category}\n      </th>\n    </tr>\n  );\n}\n\nfunction ProductRow({ product }) {\n  const name = product.stocked ? product.name :\n    <span style={{ color: 'red' }}>\n      {product.name}\n    </span>;\n\n  return (\n    <tr>\n      <td>{name}</td>\n      <td>{product.price}</td>\n    </tr>\n  );\n}\n\nfunction ProductTable({ products }) {\n  const rows = [];\n  let lastCategory = null;\n\n  products.forEach((product) => {\n    if (product.category !== lastCategory) {\n      rows.push(\n        <ProductCategoryRow\n          category={product.category}\n          key={product.category} />\n      );\n    }\n    rows.push(\n      <ProductRow\n        product={product}\n        key={product.name} />\n    );\n    lastCategory = product.category;\n  });\n\n  return (\n    <table>\n      <thead>\n        <tr>\n          <th>Name</th>\n          <th>Price</th>\n        </tr>\n      </thead>\n      <tbody>{rows}</tbody>\n    </table>\n  );\n}\n\nfunction SearchBar() {\n  return (\n    <form>\n      <input type=\"text\" placeholder=\"Search...\" />\n      <label>\n        <input type=\"checkbox\" />\n        {' '}\n        Only show products in stock\n      </label>\n    </form>\n  );\n}\n\nfunction FilterableProductTable({ products }) {\n  return (\n    <div>\n      <SearchBar />\n      <ProductTable products={products} />\n    </div>\n  );\n}\n\nconst PRODUCTS = [\n  {category: \"Fruits\", price: \"$1\", stocked: true, name: \"Apple\"},\n  {category: \"Fruits\", price: \"$1\", stocked: true, name: \"Dragonfruit\"},\n  {category: \"Fruits\", price: \"$2\", stocked: false, name: \"Passionfruit\"},\n  {category: \"Vegetables\", price: \"$2\", stocked: true, name: \"Spinach\"},\n  {category: \"Vegetables\", price: \"$4\", stocked: false, name: \"Pumpkin\"},\n  {category: \"Vegetables\", price: \"$1\", stocked: true, name: \"Peas\"}\n];\n\nexport default function App() {\n  return <FilterableProductTable products={PRODUCTS} />;\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "thinking",
      "component"
    ],
    "code_length": 91,
    "is_duplicate": false,
    "topic": "Thinking in React",
    "purpose": "Thinking in React",
    "explanation": "Thinking in React – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/thinking-in-react",
    "source_title": "Thinking in React – React",
    "section": "Thinking in React",
    "code": "function FilterableProductTable({ products }) {\n  const [filterText, setFilterText] = useState('');\n  const [inStockOnly, setInStockOnly] = useState(false);",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "state",
      "thinking"
    ],
    "code_length": 3,
    "is_duplicate": false,
    "topic": "Thinking in React",
    "purpose": "Thinking in React",
    "explanation": "Thinking in React – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/thinking-in-react",
    "source_title": "Thinking in React – React",
    "section": "Thinking in React",
    "code": "<div>\n  <SearchBar \n    filterText={filterText} \n    inStockOnly={inStockOnly} />\n  <ProductTable \n    products={products}\n    filterText={filterText}\n    inStockOnly={inStockOnly} />\n</div>",
    "code_language": "html/jsx",
    "code_type": "snippet",
    "tags": [
      "thinking"
    ],
    "code_length": 9,
    "is_duplicate": false,
    "topic": "Thinking in React",
    "purpose": "Thinking in React",
    "explanation": "Thinking in React – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/thinking-in-react",
    "source_title": "Thinking in React – React",
    "section": "Thinking in React",
    "code": "import { useState } from 'react';\n\nfunction FilterableProductTable({ products }) {\n  const [filterText, setFilterText] = useState('');\n  const [inStockOnly, setInStockOnly] = useState(false);\n\n  return (\n    <div>\n      <SearchBar \n        filterText={filterText} \n        inStockOnly={inStockOnly} />\n      <ProductTable \n        products={products}\n        filterText={filterText}\n        inStockOnly={inStockOnly} />\n    </div>\n  );\n}\n\nfunction ProductCategoryRow({ category }) {\n  return (\n    <tr>\n      <th colSpan=\"2\">\n        {category}\n      </th>\n    </tr>\n  );\n}\n\nfunction ProductRow({ product }) {\n  const name = product.stocked ? product.name :\n    <span style={{ color: 'red' }}>\n      {product.name}\n    </span>;\n\n  return (\n    <tr>\n      <td>{name}</td>\n      <td>{product.price}</td>\n    </tr>\n  );\n}\n\nfunction ProductTable({ products, filterText, inStockOnly }) {\n  const rows = [];\n  let lastCategory = null;\n\n  products.forEach((product) => {\n    if (\n      product.name.toLowerCase().indexOf(\n        filterText.toLowerCase()\n      ) === -1\n    ) {\n      return;\n    }\n    if (inStockOnly && !product.stocked) {\n      return;\n    }\n    if (product.category !== lastCategory) {\n      rows.push(\n        <ProductCategoryRow\n          category={product.category}\n          key={product.category} />\n      );\n    }\n    rows.push(\n      <ProductRow\n        product={product}\n        key={product.name} />\n    );\n    lastCategory = product.category;\n  });\n\n  return (\n    <table>\n      <thead>\n        <tr>\n          <th>Name</th>\n          <th>Price</th>\n        </tr>\n      </thead>\n      <tbody>{rows}</tbody>\n    </table>\n  );\n}\n\nfunction SearchBar({ filterText, inStockOnly }) {\n  return (\n    <form>\n      <input \n        type=\"text\" \n        value={filterText} \n        placeholder=\"Search...\"/>\n      <label>\n        <input \n          type=\"checkbox\" \n          checked={inStockOnly} />\n        {' '}\n        Only show products in stock\n      </label>\n    </form>\n  );\n}\n\nconst PRODUCTS = [\n  {category: \"Fruits\", price: \"$1\", stocked: true, name: \"Apple\"},\n  {category: \"Fruits\", price: \"$1\", stocked: true, name: \"Dragonfruit\"},\n  {category: \"Fruits\", price: \"$2\", stocked: false, name: \"Passionfruit\"},\n  {category: \"Vegetables\", price: \"$2\", stocked: true, name: \"Spinach\"},\n  {category: \"Vegetables\", price: \"$4\", stocked: false, name: \"Pumpkin\"},\n  {category: \"Vegetables\", price: \"$1\", stocked: true, name: \"Peas\"}\n];\n\nexport default function App() {\n  return <FilterableProductTable products={PRODUCTS} />;\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "state",
      "thinking",
      "component"
    ],
    "code_length": 116,
    "is_duplicate": false,
    "topic": "Thinking in React",
    "purpose": "Thinking in React",
    "explanation": "Thinking in React – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/thinking-in-react",
    "source_title": "Thinking in React – React",
    "section": "Thinking in React",
    "code": "function SearchBar({ filterText, inStockOnly }) {\n  return (\n    <form>\n      <input \n        type=\"text\" \n        value={filterText} \n        placeholder=\"Search...\"/>",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "thinking"
    ],
    "code_length": 7,
    "is_duplicate": false,
    "topic": "Thinking in React",
    "purpose": "Thinking in React",
    "explanation": "Thinking in React – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/thinking-in-react",
    "source_title": "Thinking in React – React",
    "section": "Thinking in React",
    "code": "function FilterableProductTable({ products }) {\n  const [filterText, setFilterText] = useState('');\n  const [inStockOnly, setInStockOnly] = useState(false);\n\n  return (\n    <div>\n      <SearchBar \n        filterText={filterText} \n        inStockOnly={inStockOnly}\n        onFilterTextChange={setFilterText}\n        onInStockOnlyChange={setInStockOnly} />",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "state",
      "thinking"
    ],
    "code_length": 11,
    "is_duplicate": false,
    "topic": "Thinking in React",
    "purpose": "Thinking in React",
    "explanation": "Thinking in React – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/thinking-in-react",
    "source_title": "Thinking in React – React",
    "section": "Thinking in React",
    "code": "function SearchBar({\n  filterText,\n  inStockOnly,\n  onFilterTextChange,\n  onInStockOnlyChange\n}) {\n  return (\n    <form>\n      <input\n        type=\"text\"\n        value={filterText}\n        placeholder=\"Search...\"\n        onChange={(e) => onFilterTextChange(e.target.value)}\n      />\n      <label>\n        <input\n          type=\"checkbox\"\n          checked={inStockOnly}\n          onChange={(e) => onInStockOnlyChange(e.target.checked)}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "thinking"
    ],
    "code_length": 19,
    "is_duplicate": false,
    "topic": "Thinking in React",
    "purpose": "Thinking in React",
    "explanation": "Thinking in React – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/thinking-in-react",
    "source_title": "Thinking in React – React",
    "section": "Thinking in React",
    "code": "import { useState } from 'react';\n\nfunction FilterableProductTable({ products }) {\n  const [filterText, setFilterText] = useState('');\n  const [inStockOnly, setInStockOnly] = useState(false);\n\n  return (\n    <div>\n      <SearchBar \n        filterText={filterText} \n        inStockOnly={inStockOnly} \n        onFilterTextChange={setFilterText} \n        onInStockOnlyChange={setInStockOnly} />\n      <ProductTable \n        products={products} \n        filterText={filterText}\n        inStockOnly={inStockOnly} />\n    </div>\n  );\n}\n\nfunction ProductCategoryRow({ category }) {\n  return (\n    <tr>\n      <th colSpan=\"2\">\n        {category}\n      </th>\n    </tr>\n  );\n}\n\nfunction ProductRow({ product }) {\n  const name = product.stocked ? product.name :\n    <span style={{ color: 'red' }}>\n      {product.name}\n    </span>;\n\n  return (\n    <tr>\n      <td>{name}</td>\n      <td>{product.price}</td>\n    </tr>\n  );\n}\n\nfunction ProductTable({ products, filterText, inStockOnly }) {\n  const rows = [];\n  let lastCategory = null;\n\n  products.forEach((product) => {\n    if (\n      product.name.toLowerCase().indexOf(\n        filterText.toLowerCase()\n      ) === -1\n    ) {\n      return;\n    }\n    if (inStockOnly && !product.stocked) {\n      return;\n    }\n    if (product.category !== lastCategory) {\n      rows.push(\n        <ProductCategoryRow\n          category={product.category}\n          key={product.category} />\n      );\n    }\n    rows.push(\n      <ProductRow\n        product={product}\n        key={product.name} />\n    );\n    lastCategory = product.category;\n  });\n\n  return (\n    <table>\n      <thead>\n        <tr>\n          <th>Name</th>\n          <th>Price</th>\n        </tr>\n      </thead>\n      <tbody>{rows}</tbody>\n    </table>\n  );\n}\n\nfunction SearchBar({\n  filterText,\n  inStockOnly,\n  onFilterTextChange,\n  onInStockOnlyChange\n}) {\n  return (\n    <form>\n      <input \n        type=\"text\" \n        value={filterText} placeholder=\"Search...\" \n        onChange={(e) => onFilterTextChange(e.target.value)} />\n      <label>\n        <input \n          type=\"checkbox\" \n          checked={inStockOnly} \n          onChange={(e) => onInStockOnlyChange(e.target.checked)} />\n        {' '}\n        Only show products in stock\n      </label>\n    </form>\n  );\n}\n\nconst PRODUCTS = [\n  {category: \"Fruits\", price: \"$1\", stocked: true, name: \"Apple\"},\n  {category: \"Fruits\", price: \"$1\", stocked: true, name: \"Dragonfruit\"},\n  {category: \"Fruits\", price: \"$2\", stocked: false, name: \"Passionfruit\"},\n  {category: \"Vegetables\", price: \"$2\", stocked: true, name: \"Spinach\"},\n  {category: \"Vegetables\", price: \"$4\", stocked: false, name: \"Pumpkin\"},\n  {category: \"Vegetables\", price: \"$1\", stocked: true, name: \"Peas\"}\n];\n\nexport default function App() {\n  return <FilterableProductTable products={PRODUCTS} />;\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "state",
      "thinking",
      "component"
    ],
    "code_length": 124,
    "is_duplicate": false,
    "topic": "Thinking in React",
    "purpose": "Thinking in React",
    "explanation": "Thinking in React – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/choosing-the-state-structure",
    "source_title": "Choosing the State Structure – React",
    "section": "Choosing the State Structure",
    "code": "const [x, setX] = useState(0);\nconst [y, setY] = useState(0);",
    "code_language": "unknown",
    "code_type": "snippet",
    "tags": [
      "structure",
      "state",
      "choosing"
    ],
    "code_length": 2,
    "is_duplicate": false,
    "topic": "Choosing the State Structure",
    "purpose": "Choosing the State Structure",
    "explanation": "Choosing the State Structure – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/choosing-the-state-structure",
    "source_title": "Choosing the State Structure – React",
    "section": "Choosing the State Structure",
    "code": "const [position, setPosition] = useState({ x: 0, y: 0 });",
    "code_language": "unknown",
    "code_type": "snippet",
    "tags": [
      "structure",
      "state",
      "choosing"
    ],
    "code_length": 1,
    "is_duplicate": false,
    "topic": "Choosing the State Structure",
    "purpose": "Choosing the State Structure",
    "explanation": "Choosing the State Structure – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/choosing-the-state-structure",
    "source_title": "Choosing the State Structure – React",
    "section": "Choosing the State Structure",
    "code": "import { useState } from 'react';\n\nexport default function MovingDot() {\n  const [position, setPosition] = useState({\n    x: 0,\n    y: 0\n  });\n  return (\n    <div\n      onPointerMove={e => {\n        setPosition({\n          x: e.clientX,\n          y: e.clientY\n        });\n      }}\n      style={{\n        position: 'relative',\n        width: '100vw',\n        height: '100vh',\n      }}>\n      <div style={{\n        position: 'absolute',\n        backgroundColor: 'red',\n        borderRadius: '50%',\n        transform: `translate(${position.x}px, ${position.y}px)`,\n        left: -10,\n        top: -10,\n        width: 20,\n        height: 20,\n      }} />\n    </div>\n  )\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "structure",
      "component",
      "state",
      "choosing"
    ],
    "code_length": 33,
    "is_duplicate": false,
    "topic": "Choosing the State Structure",
    "purpose": "Choosing the State Structure",
    "explanation": "Choosing the State Structure – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/choosing-the-state-structure",
    "source_title": "Choosing the State Structure – React",
    "section": "Choosing the State Structure",
    "code": "import { useState } from 'react';\n\nexport default function FeedbackForm() {\n  const [text, setText] = useState('');\n  const [isSending, setIsSending] = useState(false);\n  const [isSent, setIsSent] = useState(false);\n\n  async function handleSubmit(e) {\n    e.preventDefault();\n    setIsSending(true);\n    await sendMessage(text);\n    setIsSending(false);\n    setIsSent(true);\n  }\n\n  if (isSent) {\n    return <h1>Thanks for feedback!</h1>\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <p>How was your stay at The Prancing Pony?</p>\n      <textarea\n        disabled={isSending}\n        value={text}\n        onChange={e => setText(e.target.value)}\n      />\n      <br />\n      <button\n        disabled={isSending}\n        type=\"submit\"\n      >\n        Send\n      </button>\n      {isSending && <p>Sending...</p>}\n    </form>\n  );\n}\n\n// Pretend to send a message.\nfunction sendMessage(text) {\n  return new Promise(resolve => {\n    setTimeout(resolve, 2000);\n  });\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "structure",
      "component",
      "state",
      "choosing"
    ],
    "code_length": 45,
    "is_duplicate": false,
    "topic": "Choosing the State Structure",
    "purpose": "Choosing the State Structure",
    "explanation": "Choosing the State Structure – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/choosing-the-state-structure",
    "source_title": "Choosing the State Structure – React",
    "section": "Choosing the State Structure",
    "code": "import { useState } from 'react';\n\nexport default function FeedbackForm() {\n  const [text, setText] = useState('');\n  const [status, setStatus] = useState('typing');\n\n  async function handleSubmit(e) {\n    e.preventDefault();\n    setStatus('sending');\n    await sendMessage(text);\n    setStatus('sent');\n  }\n\n  const isSending = status === 'sending';\n  const isSent = status === 'sent';\n\n  if (isSent) {\n    return <h1>Thanks for feedback!</h1>\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <p>How was your stay at The Prancing Pony?</p>\n      <textarea\n        disabled={isSending}\n        value={text}\n        onChange={e => setText(e.target.value)}\n      />\n      <br />\n      <button\n        disabled={isSending}\n        type=\"submit\"\n      >\n        Send\n      </button>\n      {isSending && <p>Sending...</p>}\n    </form>\n  );\n}\n\n// Pretend to send a message.\nfunction sendMessage(text) {\n  return new Promise(resolve => {\n    setTimeout(resolve, 2000);\n  });\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "structure",
      "component",
      "state",
      "choosing"
    ],
    "code_length": 46,
    "is_duplicate": false,
    "topic": "Choosing the State Structure",
    "purpose": "Choosing the State Structure",
    "explanation": "Choosing the State Structure – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/choosing-the-state-structure",
    "source_title": "Choosing the State Structure – React",
    "section": "Choosing the State Structure",
    "code": "const isSending = status === 'sending';\nconst isSent = status === 'sent';",
    "code_language": "unknown",
    "code_type": "snippet",
    "tags": [
      "structure",
      "state",
      "choosing"
    ],
    "code_length": 2,
    "is_duplicate": false,
    "topic": "Choosing the State Structure",
    "purpose": "Choosing the State Structure",
    "explanation": "Choosing the State Structure – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/choosing-the-state-structure",
    "source_title": "Choosing the State Structure – React",
    "section": "Choosing the State Structure",
    "code": "import { useState } from 'react';\n\nexport default function Form() {\n  const [firstName, setFirstName] = useState('');\n  const [lastName, setLastName] = useState('');\n  const [fullName, setFullName] = useState('');\n\n  function handleFirstNameChange(e) {\n    setFirstName(e.target.value);\n    setFullName(e.target.value + ' ' + lastName);\n  }\n\n  function handleLastNameChange(e) {\n    setLastName(e.target.value);\n    setFullName(firstName + ' ' + e.target.value);\n  }\n\n  return (\n    <>\n      <h2>Let’s check you in</h2>\n      <label>\n        First name:{' '}\n        <input\n          value={firstName}\n          onChange={handleFirstNameChange}\n        />\n      </label>\n      <label>\n        Last name:{' '}\n        <input\n          value={lastName}\n          onChange={handleLastNameChange}\n        />\n      </label>\n      <p>\n        Your ticket will be issued to: <b>{fullName}</b>\n      </p>\n    </>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "structure",
      "component",
      "state",
      "choosing"
    ],
    "code_length": 40,
    "is_duplicate": false,
    "topic": "Choosing the State Structure",
    "purpose": "Choosing the State Structure",
    "explanation": "Choosing the State Structure – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/choosing-the-state-structure",
    "source_title": "Choosing the State Structure – React",
    "section": "Choosing the State Structure",
    "code": "import { useState } from 'react';\n\nexport default function Form() {\n  const [firstName, setFirstName] = useState('');\n  const [lastName, setLastName] = useState('');\n\n  const fullName = firstName + ' ' + lastName;\n\n  function handleFirstNameChange(e) {\n    setFirstName(e.target.value);\n  }\n\n  function handleLastNameChange(e) {\n    setLastName(e.target.value);\n  }\n\n  return (\n    <>\n      <h2>Let’s check you in</h2>\n      <label>\n        First name:{' '}\n        <input\n          value={firstName}\n          onChange={handleFirstNameChange}\n        />\n      </label>\n      <label>\n        Last name:{' '}\n        <input\n          value={lastName}\n          onChange={handleLastNameChange}\n        />\n      </label>\n      <p>\n        Your ticket will be issued to: <b>{fullName}</b>\n      </p>\n    </>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "structure",
      "component",
      "state",
      "choosing"
    ],
    "code_length": 39,
    "is_duplicate": false,
    "topic": "Choosing the State Structure",
    "purpose": "Choosing the State Structure",
    "explanation": "Choosing the State Structure – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/choosing-the-state-structure",
    "source_title": "Choosing the State Structure – React",
    "section": "Choosing the State Structure",
    "code": "const fullName = firstName + ' ' + lastName;",
    "code_language": "unknown",
    "code_type": "snippet",
    "tags": [
      "structure",
      "state",
      "choosing"
    ],
    "code_length": 1,
    "is_duplicate": false,
    "topic": "Choosing the State Structure",
    "purpose": "Choosing the State Structure",
    "explanation": "Choosing the State Structure – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/choosing-the-state-structure",
    "source_title": "Choosing the State Structure – React",
    "section": "Choosing the State Structure",
    "code": "import { useState } from 'react';\n\nconst initialItems = [\n  { title: 'pretzels', id: 0 },\n  { title: 'crispy seaweed', id: 1 },\n  { title: 'granola bar', id: 2 },\n];\n\nexport default function Menu() {\n  const [items, setItems] = useState(initialItems);\n  const [selectedItem, setSelectedItem] = useState(\n    items[0]\n  );\n\n  return (\n    <>\n      <h2>What's your travel snack?</h2>\n      <ul>\n        {items.map(item => (\n          <li key={item.id}>\n            {item.title}\n            {' '}\n            <button onClick={() => {\n              setSelectedItem(item);\n            }}>Choose</button>\n          </li>\n        ))}\n      </ul>\n      <p>You picked {selectedItem.title}.</p>\n    </>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "structure",
      "component",
      "state",
      "choosing"
    ],
    "code_length": 32,
    "is_duplicate": false,
    "topic": "Choosing the State Structure",
    "purpose": "Choosing the State Structure",
    "explanation": "Choosing the State Structure – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/choosing-the-state-structure",
    "source_title": "Choosing the State Structure – React",
    "section": "Choosing the State Structure",
    "code": "import { useState } from 'react';\n\nconst initialItems = [\n  { title: 'pretzels', id: 0 },\n  { title: 'crispy seaweed', id: 1 },\n  { title: 'granola bar', id: 2 },\n];\n\nexport default function Menu() {\n  const [items, setItems] = useState(initialItems);\n  const [selectedItem, setSelectedItem] = useState(\n    items[0]\n  );\n\n  function handleItemChange(id, e) {\n    setItems(items.map(item => {\n      if (item.id === id) {\n        return {\n          ...item,\n          title: e.target.value,\n        };\n      } else {\n        return item;\n      }\n    }));\n  }\n\n  return (\n    <>\n      <h2>What's your travel snack?</h2> \n      <ul>\n        {items.map((item, index) => (\n          <li key={item.id}>\n            <input\n              value={item.title}\n              onChange={e => {\n                handleItemChange(item.id, e)\n              }}\n            />\n            {' '}\n            <button onClick={() => {\n              setSelectedItem(item);\n            }}>Choose</button>\n          </li>\n        ))}\n      </ul>\n      <p>You picked {selectedItem.title}.</p>\n    </>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "structure",
      "component",
      "state",
      "choosing"
    ],
    "code_length": 50,
    "is_duplicate": false,
    "topic": "Choosing the State Structure",
    "purpose": "Choosing the State Structure",
    "explanation": "Choosing the State Structure – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/choosing-the-state-structure",
    "source_title": "Choosing the State Structure – React",
    "section": "Choosing the State Structure",
    "code": "import { useState } from 'react';\n\nconst initialItems = [\n  { title: 'pretzels', id: 0 },\n  { title: 'crispy seaweed', id: 1 },\n  { title: 'granola bar', id: 2 },\n];\n\nexport default function Menu() {\n  const [items, setItems] = useState(initialItems);\n  const [selectedId, setSelectedId] = useState(0);\n\n  const selectedItem = items.find(item =>\n    item.id === selectedId\n  );\n\n  function handleItemChange(id, e) {\n    setItems(items.map(item => {\n      if (item.id === id) {\n        return {\n          ...item,\n          title: e.target.value,\n        };\n      } else {\n        return item;\n      }\n    }));\n  }\n\n  return (\n    <>\n      <h2>What's your travel snack?</h2>\n      <ul>\n        {items.map((item, index) => (\n          <li key={item.id}>\n            <input\n              value={item.title}\n              onChange={e => {\n                handleItemChange(item.id, e)\n              }}\n            />\n            {' '}\n            <button onClick={() => {\n              setSelectedId(item.id);\n            }}>Choose</button>\n          </li>\n        ))}\n      </ul>\n      <p>You picked {selectedItem.title}.</p>\n    </>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "structure",
      "component",
      "state",
      "choosing"
    ],
    "code_length": 52,
    "is_duplicate": false,
    "topic": "Choosing the State Structure",
    "purpose": "Choosing the State Structure",
    "explanation": "Choosing the State Structure – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/choosing-the-state-structure",
    "source_title": "Choosing the State Structure – React",
    "section": "Choosing the State Structure",
    "code": "export const initialTravelPlan = {\n  id: 0,\n  title: '(Root)',\n  childPlaces: [{\n    id: 1,\n    title: 'Earth',\n    childPlaces: [{\n      id: 2,\n      title: 'Africa',\n      childPlaces: [{\n        id: 3,\n        title: 'Botswana',\n        childPlaces: []\n      }, {\n        id: 4,\n        title: 'Egypt',\n        childPlaces: []\n      }, {\n        id: 5,\n        title: 'Kenya',\n        childPlaces: []\n      }, {\n        id: 6,\n        title: 'Madagascar',\n        childPlaces: []\n      }, {\n        id: 7,\n        title: 'Morocco',\n        childPlaces: []\n      }, {\n        id: 8,\n        title: 'Nigeria',\n        childPlaces: []\n      }, {\n        id: 9,\n        title: 'South Africa',\n        childPlaces: []\n      }]\n    }, {\n      id: 10,\n      title: 'Americas',\n      childPlaces: [{\n        id: 11,\n        title: 'Argentina',\n        childPlaces: []\n      }, {\n        id: 12,\n        title: 'Brazil',\n        childPlaces: []\n      }, {\n        id: 13,\n        title: 'Barbados',\n        childPlaces: []\n      }, {\n        id: 14,\n        title: 'Canada',\n        childPlaces: []\n      }, {\n        id: 15,\n        title: 'Jamaica',\n        childPlaces: []\n      }, {\n        id: 16,\n        title: 'Mexico',\n        childPlaces: []\n      }, {\n        id: 17,\n        title: 'Trinidad and Tobago',\n        childPlaces: []\n      }, {\n        id: 18,\n        title: 'Venezuela',\n        childPlaces: []\n      }]\n    }, {\n      id: 19,\n      title: 'Asia',\n      childPlaces: [{\n        id: 20,\n        title: 'China',\n        childPlaces: []\n      }, {\n        id: 21,\n        title: 'India',\n        childPlaces: []\n      }, {\n        id: 22,\n        title: 'Singapore',\n        childPlaces: []\n      }, {\n        id: 23,\n        title: 'South Korea',\n        childPlaces: []\n      }, {\n        id: 24,\n        title: 'Thailand',\n        childPlaces: []\n      }, {\n        id: 25,\n        title: 'Vietnam',\n        childPlaces: []\n      }]\n    }, {\n      id: 26,\n      title: 'Europe',\n      childPlaces: [{\n        id: 27,\n        title: 'Croatia',\n        childPlaces: [],\n      }, {\n        id: 28,\n        title: 'France',\n        childPlaces: [],\n      }, {\n        id: 29,\n        title: 'Germany',\n        childPlaces: [],\n      }, {\n        id: 30,\n        title: 'Italy',\n        childPlaces: [],\n      }, {\n        id: 31,\n        title: 'Portugal',\n        childPlaces: [],\n      }, {\n        id: 32,\n        title: 'Spain',\n        childPlaces: [],\n      }, {\n        id: 33,\n        title: 'Turkey',\n        childPlaces: [],\n      }]\n    }, {\n      id: 34,\n      title: 'Oceania',\n      childPlaces: [{\n        id: 35,\n        title: 'Australia',\n        childPlaces: [],\n      }, {\n        id: 36,\n        title: 'Bora Bora (French Polynesia)',\n        childPlaces: [],\n      }, {\n        id: 37,\n        title: 'Easter Island (Chile)',\n        childPlaces: [],\n      }, {\n        id: 38,\n        title: 'Fiji',\n        childPlaces: [],\n      }, {\n        id: 39,\n        title: 'Hawaii (the USA)',\n        childPlaces: [],\n      }, {\n        id: 40,\n        title: 'New Zealand',\n        childPlaces: [],\n      }, {\n        id: 41,\n        title: 'Vanuatu',\n        childPlaces: [],\n      }]\n    }]\n  }, {\n    id: 42,\n    title: 'Moon',\n    childPlaces: [{\n      id: 43,\n      title: 'Rheita',\n      childPlaces: []\n    }, {\n      id: 44,\n      title: 'Piccolomini',\n      childPlaces: []\n    }, {\n      id: 45,\n      title: 'Tycho',\n      childPlaces: []\n    }]\n  }, {\n    id: 46,\n    title: 'Mars',\n    childPlaces: [{\n      id: 47,\n      title: 'Corn Town',\n      childPlaces: []\n    }, {\n      id: 48,\n      title: 'Green Hill',\n      childPlaces: []      \n    }]\n  }]\n};",
    "code_language": "unknown",
    "code_type": "snippet",
    "tags": [
      "structure",
      "state",
      "choosing"
    ],
    "code_length": 197,
    "is_duplicate": false,
    "topic": "Choosing the State Structure",
    "purpose": "Choosing the State Structure",
    "explanation": "Choosing the State Structure – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/choosing-the-state-structure",
    "source_title": "Choosing the State Structure – React",
    "section": "Choosing the State Structure",
    "code": "export const initialTravelPlan = {\n  0: {\n    id: 0,\n    title: '(Root)',\n    childIds: [1, 42, 46],\n  },\n  1: {\n    id: 1,\n    title: 'Earth',\n    childIds: [2, 10, 19, 26, 34]\n  },\n  2: {\n    id: 2,\n    title: 'Africa',\n    childIds: [3, 4, 5, 6 , 7, 8, 9]\n  }, \n  3: {\n    id: 3,\n    title: 'Botswana',\n    childIds: []\n  },\n  4: {\n    id: 4,\n    title: 'Egypt',\n    childIds: []\n  },\n  5: {\n    id: 5,\n    title: 'Kenya',\n    childIds: []\n  },\n  6: {\n    id: 6,\n    title: 'Madagascar',\n    childIds: []\n  }, \n  7: {\n    id: 7,\n    title: 'Morocco',\n    childIds: []\n  },\n  8: {\n    id: 8,\n    title: 'Nigeria',\n    childIds: []\n  },\n  9: {\n    id: 9,\n    title: 'South Africa',\n    childIds: []\n  },\n  10: {\n    id: 10,\n    title: 'Americas',\n    childIds: [11, 12, 13, 14, 15, 16, 17, 18],   \n  },\n  11: {\n    id: 11,\n    title: 'Argentina',\n    childIds: []\n  },\n  12: {\n    id: 12,\n    title: 'Brazil',\n    childIds: []\n  },\n  13: {\n    id: 13,\n    title: 'Barbados',\n    childIds: []\n  }, \n  14: {\n    id: 14,\n    title: 'Canada',\n    childIds: []\n  },\n  15: {\n    id: 15,\n    title: 'Jamaica',\n    childIds: []\n  },\n  16: {\n    id: 16,\n    title: 'Mexico',\n    childIds: []\n  },\n  17: {\n    id: 17,\n    title: 'Trinidad and Tobago',\n    childIds: []\n  },\n  18: {\n    id: 18,\n    title: 'Venezuela',\n    childIds: []\n  },\n  19: {\n    id: 19,\n    title: 'Asia',\n    childIds: [20, 21, 22, 23, 24, 25],   \n  },\n  20: {\n    id: 20,\n    title: 'China',\n    childIds: []\n  },\n  21: {\n    id: 21,\n    title: 'India',\n    childIds: []\n  },\n  22: {\n    id: 22,\n    title: 'Singapore',\n    childIds: []\n  },\n  23: {\n    id: 23,\n    title: 'South Korea',\n    childIds: []\n  },\n  24: {\n    id: 24,\n    title: 'Thailand',\n    childIds: []\n  },\n  25: {\n    id: 25,\n    title: 'Vietnam',\n    childIds: []\n  },\n  26: {\n    id: 26,\n    title: 'Europe',\n    childIds: [27, 28, 29, 30, 31, 32, 33],   \n  },\n  27: {\n    id: 27,\n    title: 'Croatia',\n    childIds: []\n  },\n  28: {\n    id: 28,\n    title: 'France',\n    childIds: []\n  },\n  29: {\n    id: 29,\n    title: 'Germany',\n    childIds: []\n  },\n  30: {\n    id: 30,\n    title: 'Italy',\n    childIds: []\n  },\n  31: {\n    id: 31,\n    title: 'Portugal',\n    childIds: []\n  },\n  32: {\n    id: 32,\n    title: 'Spain',\n    childIds: []\n  },\n  33: {\n    id: 33,\n    title: 'Turkey',\n    childIds: []\n  },\n  34: {\n    id: 34,\n    title: 'Oceania',\n    childIds: [35, 36, 37, 38, 39, 40, 41],   \n  },\n  35: {\n    id: 35,\n    title: 'Australia',\n    childIds: []\n  },\n  36: {\n    id: 36,\n    title: 'Bora Bora (French Polynesia)',\n    childIds: []\n  },\n  37: {\n    id: 37,\n    title: 'Easter Island (Chile)',\n    childIds: []\n  },\n  38: {\n    id: 38,\n    title: 'Fiji',\n    childIds: []\n  },\n  39: {\n    id: 40,\n    title: 'Hawaii (the USA)',\n    childIds: []\n  },\n  40: {\n    id: 40,\n    title: 'New Zealand',\n    childIds: []\n  },\n  41: {\n    id: 41,\n    title: 'Vanuatu',\n    childIds: []\n  },\n  42: {\n    id: 42,\n    title: 'Moon',\n    childIds: [43, 44, 45]\n  },\n  43: {\n    id: 43,\n    title: 'Rheita',\n    childIds: []\n  },\n  44: {\n    id: 44,\n    title: 'Piccolomini',\n    childIds: []\n  },\n  45: {\n    id: 45,\n    title: 'Tycho',\n    childIds: []\n  },\n  46: {\n    id: 46,\n    title: 'Mars',\n    childIds: [47, 48]\n  },\n  47: {\n    id: 47,\n    title: 'Corn Town',\n    childIds: []\n  },\n  48: {\n    id: 48,\n    title: 'Green Hill',\n    childIds: []\n  }\n};",
    "code_language": "unknown",
    "code_type": "snippet",
    "tags": [
      "structure",
      "state",
      "choosing"
    ],
    "code_length": 247,
    "is_duplicate": false,
    "topic": "Choosing the State Structure",
    "purpose": "Choosing the State Structure",
    "explanation": "Choosing the State Structure – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/choosing-the-state-structure",
    "source_title": "Choosing the State Structure – React",
    "section": "Choosing the State Structure",
    "code": "import { useState } from 'react';\nimport { initialTravelPlan } from './places.js';\n\nexport default function TravelPlan() {\n  const [plan, setPlan] = useState(initialTravelPlan);\n\n  function handleComplete(parentId, childId) {\n    const parent = plan[parentId];\n    // Create a new version of the parent place\n    // that doesn't include this child ID.\n    const nextParent = {\n      ...parent,\n      childIds: parent.childIds\n        .filter(id => id !== childId)\n    };\n    // Update the root state object...\n    setPlan({\n      ...plan,\n      // ...so that it has the updated parent.\n      [parentId]: nextParent\n    });\n  }\n\n  const root = plan[0];\n  const planetIds = root.childIds;\n  return (\n    <>\n      <h2>Places to visit</h2>\n      <ol>\n        {planetIds.map(id => (\n          <PlaceTree\n            key={id}\n            id={id}\n            parentId={0}\n            placesById={plan}\n            onComplete={handleComplete}\n          />\n        ))}\n      </ol>\n    </>\n  );\n}\n\nfunction PlaceTree({ id, parentId, placesById, onComplete }) {\n  const place = placesById[id];\n  const childIds = place.childIds;\n  return (\n    <li>\n      {place.title}\n      <button onClick={() => {\n        onComplete(parentId, id);\n      }}>\n        Complete\n      </button>\n      {childIds.length > 0 &&\n        <ol>\n          {childIds.map(childId => (\n            <PlaceTree\n              key={childId}\n              id={childId}\n              parentId={id}\n              placesById={placesById}\n              onComplete={onComplete}\n            />\n          ))}\n        </ol>\n      }\n    </li>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "structure",
      "component",
      "state",
      "choosing"
    ],
    "code_length": 70,
    "is_duplicate": false,
    "topic": "Choosing the State Structure",
    "purpose": "Choosing the State Structure",
    "explanation": "Choosing the State Structure – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/choosing-the-state-structure",
    "source_title": "Choosing the State Structure – React",
    "section": "Choosing the State Structure",
    "code": "import { useState } from 'react';\n\nexport default function Clock(props) {\n  const [color, setColor] = useState(props.color);\n  return (\n    <h1 style={{ color: color }}>\n      {props.time}\n    </h1>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "structure",
      "choosing",
      "state",
      "component",
      "props"
    ],
    "code_length": 10,
    "is_duplicate": false,
    "topic": "Choosing the State Structure",
    "purpose": "Choosing the State Structure",
    "explanation": "Choosing the State Structure – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/lifecycle-of-reactive-effects",
    "source_title": "Lifecycle of Reactive Effects – React",
    "section": "Lifecycle of Reactive Effects",
    "code": "const serverUrl = 'https://localhost:1234';\n\nfunction ChatRoom({ roomId }) {\n  useEffect(() => {\n    const connection = createConnection(serverUrl, roomId);\n    connection.connect();\n    return () => {\n      connection.disconnect();\n    };\n  }, [roomId]);\n  // ...\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "effects",
      "lifecycle",
      "effect",
      "reactive"
    ],
    "code_length": 12,
    "is_duplicate": false,
    "topic": "Lifecycle of Reactive Effects",
    "purpose": "Lifecycle of Reactive Effects",
    "explanation": "Lifecycle of Reactive Effects – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/lifecycle-of-reactive-effects",
    "source_title": "Lifecycle of Reactive Effects – React",
    "section": "Lifecycle of Reactive Effects",
    "code": "// ...\n    const connection = createConnection(serverUrl, roomId);\n    connection.connect();\n    return () => {\n      connection.disconnect();\n    };\n    // ...",
    "code_language": "unknown",
    "code_type": "snippet",
    "tags": [
      "effects",
      "lifecycle",
      "reactive"
    ],
    "code_length": 7,
    "is_duplicate": false,
    "topic": "Lifecycle of Reactive Effects",
    "purpose": "Lifecycle of Reactive Effects",
    "explanation": "Lifecycle of Reactive Effects – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/lifecycle-of-reactive-effects",
    "source_title": "Lifecycle of Reactive Effects – React",
    "section": "Lifecycle of Reactive Effects",
    "code": "// ...\n    const connection = createConnection(serverUrl, roomId);\n    connection.connect();\n    return () => {\n      connection.disconnect();\n    };\n    // ...",
    "code_language": "unknown",
    "code_type": "snippet",
    "tags": [
      "effects",
      "lifecycle",
      "reactive"
    ],
    "code_length": 7,
    "is_duplicate": true,
    "topic": "Lifecycle of Reactive Effects",
    "purpose": "Lifecycle of Reactive Effects",
    "explanation": "Lifecycle of Reactive Effects – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/lifecycle-of-reactive-effects",
    "source_title": "Lifecycle of Reactive Effects – React",
    "section": "Lifecycle of Reactive Effects",
    "code": "const serverUrl = 'https://localhost:1234';\n\nfunction ChatRoom({ roomId /* \"general\" */ }) {\n  // ...\n  return <h1>Welcome to the {roomId} room!</h1>;\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "effects",
      "lifecycle",
      "reactive"
    ],
    "code_length": 6,
    "is_duplicate": false,
    "topic": "Lifecycle of Reactive Effects",
    "purpose": "Lifecycle of Reactive Effects",
    "explanation": "Lifecycle of Reactive Effects – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/lifecycle-of-reactive-effects",
    "source_title": "Lifecycle of Reactive Effects – React",
    "section": "Lifecycle of Reactive Effects",
    "code": "function ChatRoom({ roomId /* \"general\" */ }) {\n  useEffect(() => {\n    const connection = createConnection(serverUrl, roomId); // Connects to the \"general\" room\n    connection.connect();\n    return () => {\n      connection.disconnect(); // Disconnects from the \"general\" room\n    };\n  }, [roomId]);\n  // ...",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "effects",
      "lifecycle",
      "effect",
      "reactive"
    ],
    "code_length": 9,
    "is_duplicate": false,
    "topic": "Lifecycle of Reactive Effects",
    "purpose": "Lifecycle of Reactive Effects",
    "explanation": "Lifecycle of Reactive Effects – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/lifecycle-of-reactive-effects",
    "source_title": "Lifecycle of Reactive Effects – React",
    "section": "Lifecycle of Reactive Effects",
    "code": "function ChatRoom({ roomId /* \"travel\" */ }) {\n  // ...\n  return <h1>Welcome to the {roomId} room!</h1>;\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "effects",
      "lifecycle",
      "reactive"
    ],
    "code_length": 4,
    "is_duplicate": false,
    "topic": "Lifecycle of Reactive Effects",
    "purpose": "Lifecycle of Reactive Effects",
    "explanation": "Lifecycle of Reactive Effects – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/lifecycle-of-reactive-effects",
    "source_title": "Lifecycle of Reactive Effects – React",
    "section": "Lifecycle of Reactive Effects",
    "code": "function ChatRoom({ roomId /* \"general\" */ }) {\n  useEffect(() => {\n    const connection = createConnection(serverUrl, roomId); // Connects to the \"general\" room\n    connection.connect();\n    return () => {\n      connection.disconnect(); // Disconnects from the \"general\" room\n    };\n    // ...",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "effects",
      "lifecycle",
      "effect",
      "reactive"
    ],
    "code_length": 8,
    "is_duplicate": false,
    "topic": "Lifecycle of Reactive Effects",
    "purpose": "Lifecycle of Reactive Effects",
    "explanation": "Lifecycle of Reactive Effects – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/lifecycle-of-reactive-effects",
    "source_title": "Lifecycle of Reactive Effects – React",
    "section": "Lifecycle of Reactive Effects",
    "code": "function ChatRoom({ roomId /* \"travel\" */ }) {\n  useEffect(() => {\n    const connection = createConnection(serverUrl, roomId); // Connects to the \"travel\" room\n    connection.connect();\n    // ...",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "effects",
      "lifecycle",
      "effect",
      "reactive"
    ],
    "code_length": 5,
    "is_duplicate": false,
    "topic": "Lifecycle of Reactive Effects",
    "purpose": "Lifecycle of Reactive Effects",
    "explanation": "Lifecycle of Reactive Effects – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/lifecycle-of-reactive-effects",
    "source_title": "Lifecycle of Reactive Effects – React",
    "section": "Lifecycle of Reactive Effects",
    "code": "useEffect(() => {\n    // Your Effect connected to the room specified with roomId...\n    const connection = createConnection(serverUrl, roomId);\n    connection.connect();\n    return () => {\n      // ...until it disconnected\n      connection.disconnect();\n    };\n  }, [roomId]);",
    "code_language": "unknown",
    "code_type": "snippet",
    "tags": [
      "effects",
      "lifecycle",
      "effect",
      "reactive"
    ],
    "code_length": 9,
    "is_duplicate": false,
    "topic": "Lifecycle of Reactive Effects",
    "purpose": "Lifecycle of Reactive Effects",
    "explanation": "Lifecycle of Reactive Effects – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/lifecycle-of-reactive-effects",
    "source_title": "Lifecycle of Reactive Effects – React",
    "section": "Lifecycle of Reactive Effects",
    "code": "import { useState, useEffect } from 'react';\nimport { createConnection } from './chat.js';\n\nconst serverUrl = 'https://localhost:1234';\n\nfunction ChatRoom({ roomId }) {\n  useEffect(() => {\n    const connection = createConnection(serverUrl, roomId);\n    connection.connect();\n    return () => connection.disconnect();\n  }, [roomId]);\n  return <h1>Welcome to the {roomId} room!</h1>;\n}\n\nexport default function App() {\n  const [roomId, setRoomId] = useState('general');\n  const [show, setShow] = useState(false);\n  return (\n    <>\n      <label>\n        Choose the chat room:{' '}\n        <select\n          value={roomId}\n          onChange={e => setRoomId(e.target.value)}\n        >\n          <option value=\"general\">general</option>\n          <option value=\"travel\">travel</option>\n          <option value=\"music\">music</option>\n        </select>\n      </label>\n      <button onClick={() => setShow(!show)}>\n        {show ? 'Close chat' : 'Open chat'}\n      </button>\n      {show && <hr />}\n      {show && <ChatRoom roomId={roomId} />}\n    </>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "effect",
      "effects",
      "state",
      "component",
      "lifecycle",
      "reactive"
    ],
    "code_length": 38,
    "is_duplicate": false,
    "topic": "Lifecycle of Reactive Effects",
    "purpose": "Lifecycle of Reactive Effects",
    "explanation": "Lifecycle of Reactive Effects – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/lifecycle-of-reactive-effects",
    "source_title": "Lifecycle of Reactive Effects – React",
    "section": "Lifecycle of Reactive Effects",
    "code": "function ChatRoom({ roomId }) { // The roomId prop may change over time\n  useEffect(() => {\n    const connection = createConnection(serverUrl, roomId); // This Effect reads roomId \n    connection.connect();\n    return () => {\n      connection.disconnect();\n    };\n  }, [roomId]); // So you tell React that this Effect \"depends on\" roomId\n  // ...",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "effects",
      "lifecycle",
      "effect",
      "reactive"
    ],
    "code_length": 9,
    "is_duplicate": false,
    "topic": "Lifecycle of Reactive Effects",
    "purpose": "Lifecycle of Reactive Effects",
    "explanation": "Lifecycle of Reactive Effects – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/lifecycle-of-reactive-effects",
    "source_title": "Lifecycle of Reactive Effects – React",
    "section": "Lifecycle of Reactive Effects",
    "code": "function ChatRoom({ roomId }) {\n  useEffect(() => {\n    logVisit(roomId);\n    const connection = createConnection(serverUrl, roomId);\n    connection.connect();\n    return () => {\n      connection.disconnect();\n    };\n  }, [roomId]);\n  // ...\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "effects",
      "lifecycle",
      "effect",
      "reactive"
    ],
    "code_length": 11,
    "is_duplicate": false,
    "topic": "Lifecycle of Reactive Effects",
    "purpose": "Lifecycle of Reactive Effects",
    "explanation": "Lifecycle of Reactive Effects – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/lifecycle-of-reactive-effects",
    "source_title": "Lifecycle of Reactive Effects – React",
    "section": "Lifecycle of Reactive Effects",
    "code": "function ChatRoom({ roomId }) {\n  useEffect(() => {\n    logVisit(roomId);\n  }, [roomId]);\n\n  useEffect(() => {\n    const connection = createConnection(serverUrl, roomId);\n    // ...\n  }, [roomId]);\n  // ...\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "effects",
      "lifecycle",
      "effect",
      "reactive"
    ],
    "code_length": 11,
    "is_duplicate": false,
    "topic": "Lifecycle of Reactive Effects",
    "purpose": "Lifecycle of Reactive Effects",
    "explanation": "Lifecycle of Reactive Effects – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/lifecycle-of-reactive-effects",
    "source_title": "Lifecycle of Reactive Effects – React",
    "section": "Lifecycle of Reactive Effects",
    "code": "const serverUrl = 'https://localhost:1234';\n\nfunction ChatRoom({ roomId }) {\n  useEffect(() => {\n    const connection = createConnection(serverUrl, roomId);\n    connection.connect();\n    return () => {\n      connection.disconnect();\n    };\n  }, [roomId]);\n  // ...\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "effects",
      "lifecycle",
      "effect",
      "reactive"
    ],
    "code_length": 12,
    "is_duplicate": true,
    "topic": "Lifecycle of Reactive Effects",
    "purpose": "Lifecycle of Reactive Effects",
    "explanation": "Lifecycle of Reactive Effects – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/lifecycle-of-reactive-effects",
    "source_title": "Lifecycle of Reactive Effects – React",
    "section": "Lifecycle of Reactive Effects",
    "code": "function ChatRoom({ roomId }) { // Props change over time\n  const [serverUrl, setServerUrl] = useState('https://localhost:1234'); // State may change over time\n\n  useEffect(() => {\n    const connection = createConnection(serverUrl, roomId); // Your Effect reads props and state\n    connection.connect();\n    return () => {\n      connection.disconnect();\n    };\n  }, [roomId, serverUrl]); // So you tell React that this Effect \"depends on\" on props and state\n  // ...\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "effect",
      "effects",
      "state",
      "props",
      "lifecycle",
      "reactive"
    ],
    "code_length": 12,
    "is_duplicate": false,
    "topic": "Lifecycle of Reactive Effects",
    "purpose": "Lifecycle of Reactive Effects",
    "explanation": "Lifecycle of Reactive Effects – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/lifecycle-of-reactive-effects",
    "source_title": "Lifecycle of Reactive Effects – React",
    "section": "Lifecycle of Reactive Effects",
    "code": "import { useState, useEffect } from 'react';\nimport { createConnection } from './chat.js';\n\nfunction ChatRoom({ roomId }) {\n  const [serverUrl, setServerUrl] = useState('https://localhost:1234');\n\n  useEffect(() => {\n    const connection = createConnection(serverUrl, roomId);\n    connection.connect();\n    return () => connection.disconnect();\n  }, [roomId, serverUrl]);\n\n  return (\n    <>\n      <label>\n        Server URL:{' '}\n        <input\n          value={serverUrl}\n          onChange={e => setServerUrl(e.target.value)}\n        />\n      </label>\n      <h1>Welcome to the {roomId} room!</h1>\n    </>\n  );\n}\n\nexport default function App() {\n  const [roomId, setRoomId] = useState('general');\n  return (\n    <>\n      <label>\n        Choose the chat room:{' '}\n        <select\n          value={roomId}\n          onChange={e => setRoomId(e.target.value)}\n        >\n          <option value=\"general\">general</option>\n          <option value=\"travel\">travel</option>\n          <option value=\"music\">music</option>\n        </select>\n      </label>\n      <hr />\n      <ChatRoom roomId={roomId} />\n    </>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "effect",
      "effects",
      "state",
      "component",
      "lifecycle",
      "reactive"
    ],
    "code_length": 46,
    "is_duplicate": false,
    "topic": "Lifecycle of Reactive Effects",
    "purpose": "Lifecycle of Reactive Effects",
    "explanation": "Lifecycle of Reactive Effects – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/lifecycle-of-reactive-effects",
    "source_title": "Lifecycle of Reactive Effects – React",
    "section": "Lifecycle of Reactive Effects",
    "code": "const serverUrl = 'https://localhost:1234';\nconst roomId = 'general';\n\nfunction ChatRoom() {\n  useEffect(() => {\n    const connection = createConnection(serverUrl, roomId);\n    connection.connect();\n    return () => {\n      connection.disconnect();\n    };\n  }, []); // ✅ All dependencies declared\n  // ...\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "effects",
      "lifecycle",
      "effect",
      "reactive"
    ],
    "code_length": 13,
    "is_duplicate": false,
    "topic": "Lifecycle of Reactive Effects",
    "purpose": "Lifecycle of Reactive Effects",
    "explanation": "Lifecycle of Reactive Effects – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/lifecycle-of-reactive-effects",
    "source_title": "Lifecycle of Reactive Effects – React",
    "section": "Lifecycle of Reactive Effects",
    "code": "import { useState, useEffect } from 'react';\nimport { createConnection } from './chat.js';\n\nconst serverUrl = 'https://localhost:1234';\nconst roomId = 'general';\n\nfunction ChatRoom() {\n  useEffect(() => {\n    const connection = createConnection(serverUrl, roomId);\n    connection.connect();\n    return () => connection.disconnect();\n  }, []);\n  return <h1>Welcome to the {roomId} room!</h1>;\n}\n\nexport default function App() {\n  const [show, setShow] = useState(false);\n  return (\n    <>\n      <button onClick={() => setShow(!show)}>\n        {show ? 'Close chat' : 'Open chat'}\n      </button>\n      {show && <hr />}\n      {show && <ChatRoom />}\n    </>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "effect",
      "effects",
      "state",
      "component",
      "lifecycle",
      "reactive"
    ],
    "code_length": 27,
    "is_duplicate": false,
    "topic": "Lifecycle of Reactive Effects",
    "purpose": "Lifecycle of Reactive Effects",
    "explanation": "Lifecycle of Reactive Effects – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/lifecycle-of-reactive-effects",
    "source_title": "Lifecycle of Reactive Effects – React",
    "section": "Lifecycle of Reactive Effects",
    "code": "function ChatRoom({ roomId, selectedServerUrl }) { // roomId is reactive\n  const settings = useContext(SettingsContext); // settings is reactive\n  const serverUrl = selectedServerUrl ?? settings.defaultServerUrl; // serverUrl is reactive\n  useEffect(() => {\n    const connection = createConnection(serverUrl, roomId); // Your Effect reads roomId and serverUrl\n    connection.connect();\n    return () => {\n      connection.disconnect();\n    };\n  }, [roomId, serverUrl]); // So it needs to re-synchronize when either of them changes!\n  // ...\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "effects",
      "lifecycle",
      "effect",
      "reactive"
    ],
    "code_length": 12,
    "is_duplicate": false,
    "topic": "Lifecycle of Reactive Effects",
    "purpose": "Lifecycle of Reactive Effects",
    "explanation": "Lifecycle of Reactive Effects – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/lifecycle-of-reactive-effects",
    "source_title": "Lifecycle of Reactive Effects – React",
    "section": "Lifecycle of Reactive Effects",
    "code": "import { useState, useEffect } from 'react';\nimport { createConnection } from './chat.js';\n\nfunction ChatRoom({ roomId }) { // roomId is reactive\n  const [serverUrl, setServerUrl] = useState('https://localhost:1234'); // serverUrl is reactive\n\n  useEffect(() => {\n    const connection = createConnection(serverUrl, roomId);\n    connection.connect();\n    return () => connection.disconnect();\n  }, []); // <-- Something's wrong here!\n\n  return (\n    <>\n      <label>\n        Server URL:{' '}\n        <input\n          value={serverUrl}\n          onChange={e => setServerUrl(e.target.value)}\n        />\n      </label>\n      <h1>Welcome to the {roomId} room!</h1>\n    </>\n  );\n}\n\nexport default function App() {\n  const [roomId, setRoomId] = useState('general');\n  return (\n    <>\n      <label>\n        Choose the chat room:{' '}\n        <select\n          value={roomId}\n          onChange={e => setRoomId(e.target.value)}\n        >\n          <option value=\"general\">general</option>\n          <option value=\"travel\">travel</option>\n          <option value=\"music\">music</option>\n        </select>\n      </label>\n      <hr />\n      <ChatRoom roomId={roomId} />\n    </>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "effect",
      "effects",
      "state",
      "component",
      "lifecycle",
      "reactive"
    ],
    "code_length": 46,
    "is_duplicate": false,
    "topic": "Lifecycle of Reactive Effects",
    "purpose": "Lifecycle of Reactive Effects",
    "explanation": "Lifecycle of Reactive Effects – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/lifecycle-of-reactive-effects",
    "source_title": "Lifecycle of Reactive Effects – React",
    "section": "Lifecycle of Reactive Effects",
    "code": "function ChatRoom({ roomId }) { // roomId is reactive\n  const [serverUrl, setServerUrl] = useState('https://localhost:1234'); // serverUrl is reactive\n  useEffect(() => {\n    const connection = createConnection(serverUrl, roomId);\n    connection.connect();\n    return () => {\n      connection.disconnect();\n    };\n  }, [serverUrl, roomId]); // ✅ All dependencies declared\n  // ...\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "effect",
      "effects",
      "state",
      "lifecycle",
      "reactive"
    ],
    "code_length": 11,
    "is_duplicate": false,
    "topic": "Lifecycle of Reactive Effects",
    "purpose": "Lifecycle of Reactive Effects",
    "explanation": "Lifecycle of Reactive Effects – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/lifecycle-of-reactive-effects",
    "source_title": "Lifecycle of Reactive Effects – React",
    "section": "Lifecycle of Reactive Effects",
    "code": "const serverUrl = 'https://localhost:1234'; // serverUrl is not reactive\nconst roomId = 'general'; // roomId is not reactive\n\nfunction ChatRoom() {\n  useEffect(() => {\n    const connection = createConnection(serverUrl, roomId);\n    connection.connect();\n    return () => {\n      connection.disconnect();\n    };\n  }, []); // ✅ All dependencies declared\n  // ...\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "effects",
      "lifecycle",
      "effect",
      "reactive"
    ],
    "code_length": 13,
    "is_duplicate": false,
    "topic": "Lifecycle of Reactive Effects",
    "purpose": "Lifecycle of Reactive Effects",
    "explanation": "Lifecycle of Reactive Effects – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/lifecycle-of-reactive-effects",
    "source_title": "Lifecycle of Reactive Effects – React",
    "section": "Lifecycle of Reactive Effects",
    "code": "function ChatRoom() {\n  useEffect(() => {\n    const serverUrl = 'https://localhost:1234'; // serverUrl is not reactive\n    const roomId = 'general'; // roomId is not reactive\n    const connection = createConnection(serverUrl, roomId);\n    connection.connect();\n    return () => {\n      connection.disconnect();\n    };\n  }, []); // ✅ All dependencies declared\n  // ...\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "effects",
      "lifecycle",
      "effect",
      "reactive"
    ],
    "code_length": 12,
    "is_duplicate": false,
    "topic": "Lifecycle of Reactive Effects",
    "purpose": "Lifecycle of Reactive Effects",
    "explanation": "Lifecycle of Reactive Effects – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/lifecycle-of-reactive-effects",
    "source_title": "Lifecycle of Reactive Effects – React",
    "section": "Lifecycle of Reactive Effects",
    "code": "useEffect(() => {\n  // ...\n  // 🔴 Avoid suppressing the linter like this:\n  // eslint-ignore-next-line react-hooks/exhaustive-deps\n}, []);",
    "code_language": "unknown",
    "code_type": "snippet",
    "tags": [
      "effects",
      "lifecycle",
      "effect",
      "reactive"
    ],
    "code_length": 5,
    "is_duplicate": false,
    "topic": "Lifecycle of Reactive Effects",
    "purpose": "Lifecycle of Reactive Effects",
    "explanation": "Lifecycle of Reactive Effects – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/lifecycle-of-reactive-effects",
    "source_title": "Lifecycle of Reactive Effects – React",
    "section": "Lifecycle of Reactive Effects",
    "code": "import { useState, useEffect } from 'react';\nimport { createConnection } from './chat.js';\n\nconst serverUrl = 'https://localhost:1234';\n\nfunction ChatRoom({ roomId }) {\n  const [message, setMessage] = useState('');\n\n  useEffect(() => {\n    const connection = createConnection(serverUrl, roomId);\n    connection.connect();\n    return () => connection.disconnect();\n  });\n\n  return (\n    <>\n      <h1>Welcome to the {roomId} room!</h1>\n      <input\n        value={message}\n        onChange={e => setMessage(e.target.value)}\n      />\n    </>\n  );\n}\n\nexport default function App() {\n  const [roomId, setRoomId] = useState('general');\n  return (\n    <>\n      <label>\n        Choose the chat room:{' '}\n        <select\n          value={roomId}\n          onChange={e => setRoomId(e.target.value)}\n        >\n          <option value=\"general\">general</option>\n          <option value=\"travel\">travel</option>\n          <option value=\"music\">music</option>\n        </select>\n      </label>\n      <hr />\n      <ChatRoom roomId={roomId} />\n    </>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "effect",
      "effects",
      "state",
      "component",
      "lifecycle",
      "reactive"
    ],
    "code_length": 45,
    "is_duplicate": false,
    "topic": "Lifecycle of Reactive Effects",
    "purpose": "Lifecycle of Reactive Effects",
    "explanation": "Lifecycle of Reactive Effects – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/synchronizing-with-effects",
    "source_title": "Synchronizing with Effects – React",
    "section": "Synchronizing with Effects",
    "code": "import { useEffect } from 'react';",
    "code_language": "javascript/jsx",
    "code_type": "import",
    "tags": [
      "effects",
      "effect",
      "synchronizing"
    ],
    "code_length": 1,
    "is_duplicate": false,
    "topic": "Synchronizing with Effects",
    "purpose": "Synchronizing with Effects",
    "explanation": "Synchronizing with Effects – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/synchronizing-with-effects",
    "source_title": "Synchronizing with Effects – React",
    "section": "Synchronizing with Effects",
    "code": "function MyComponent() {\n  useEffect(() => {\n    // Code here will run after *every* render\n  });\n  return <div />;\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "effects",
      "effect",
      "synchronizing"
    ],
    "code_length": 6,
    "is_duplicate": false,
    "topic": "Synchronizing with Effects",
    "purpose": "Synchronizing with Effects",
    "explanation": "Synchronizing with Effects – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/synchronizing-with-effects",
    "source_title": "Synchronizing with Effects – React",
    "section": "Synchronizing with Effects",
    "code": "<VideoPlayer isPlaying={isPlaying} />;",
    "code_language": "unknown",
    "code_type": "snippet",
    "tags": [
      "effects",
      "synchronizing"
    ],
    "code_length": 1,
    "is_duplicate": false,
    "topic": "Synchronizing with Effects",
    "purpose": "Synchronizing with Effects",
    "explanation": "Synchronizing with Effects – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/synchronizing-with-effects",
    "source_title": "Synchronizing with Effects – React",
    "section": "Synchronizing with Effects",
    "code": "function VideoPlayer({ src, isPlaying }) {\n  // TODO: do something with isPlaying\n  return <video src={src} />;\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "effects",
      "synchronizing"
    ],
    "code_length": 4,
    "is_duplicate": false,
    "topic": "Synchronizing with Effects",
    "purpose": "Synchronizing with Effects",
    "explanation": "Synchronizing with Effects – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/synchronizing-with-effects",
    "source_title": "Synchronizing with Effects – React",
    "section": "Synchronizing with Effects",
    "code": "import { useState, useRef, useEffect } from 'react';\n\nfunction VideoPlayer({ src, isPlaying }) {\n  const ref = useRef(null);\n\n  if (isPlaying) {\n    ref.current.play();  // Calling these while rendering isn't allowed.\n  } else {\n    ref.current.pause(); // Also, this crashes.\n  }\n\n  return <video ref={ref} src={src} loop playsInline />;\n}\n\nexport default function App() {\n  const [isPlaying, setIsPlaying] = useState(false);\n  return (\n    <>\n      <button onClick={() => setIsPlaying(!isPlaying)}>\n        {isPlaying ? 'Pause' : 'Play'}\n      </button>\n      <VideoPlayer\n        isPlaying={isPlaying}\n        src=\"https://interactive-examples.mdn.mozilla.net/media/cc0-videos/flower.mp4\"\n      />\n    </>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "effect",
      "effects",
      "state",
      "component",
      "synchronizing"
    ],
    "code_length": 28,
    "is_duplicate": false,
    "topic": "Synchronizing with Effects",
    "purpose": "Synchronizing with Effects",
    "explanation": "Synchronizing with Effects – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/synchronizing-with-effects",
    "source_title": "Synchronizing with Effects – React",
    "section": "Synchronizing with Effects",
    "code": "import { useEffect, useRef } from 'react';\n\nfunction VideoPlayer({ src, isPlaying }) {\n  const ref = useRef(null);\n\n  useEffect(() => {\n    if (isPlaying) {\n      ref.current.play();\n    } else {\n      ref.current.pause();\n    }\n  });\n\n  return <video ref={ref} src={src} loop playsInline />;\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "effects",
      "effect",
      "synchronizing"
    ],
    "code_length": 15,
    "is_duplicate": false,
    "topic": "Synchronizing with Effects",
    "purpose": "Synchronizing with Effects",
    "explanation": "Synchronizing with Effects – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/synchronizing-with-effects",
    "source_title": "Synchronizing with Effects – React",
    "section": "Synchronizing with Effects",
    "code": "import { useState, useRef, useEffect } from 'react';\n\nfunction VideoPlayer({ src, isPlaying }) {\n  const ref = useRef(null);\n\n  useEffect(() => {\n    if (isPlaying) {\n      ref.current.play();\n    } else {\n      ref.current.pause();\n    }\n  });\n\n  return <video ref={ref} src={src} loop playsInline />;\n}\n\nexport default function App() {\n  const [isPlaying, setIsPlaying] = useState(false);\n  return (\n    <>\n      <button onClick={() => setIsPlaying(!isPlaying)}>\n        {isPlaying ? 'Pause' : 'Play'}\n      </button>\n      <VideoPlayer\n        isPlaying={isPlaying}\n        src=\"https://interactive-examples.mdn.mozilla.net/media/cc0-videos/flower.mp4\"\n      />\n    </>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "effect",
      "effects",
      "state",
      "component",
      "synchronizing"
    ],
    "code_length": 30,
    "is_duplicate": false,
    "topic": "Synchronizing with Effects",
    "purpose": "Synchronizing with Effects",
    "explanation": "Synchronizing with Effects – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/synchronizing-with-effects",
    "source_title": "Synchronizing with Effects – React",
    "section": "Synchronizing with Effects",
    "code": "const [count, setCount] = useState(0);\nuseEffect(() => {\n  setCount(count + 1);\n});",
    "code_language": "unknown",
    "code_type": "snippet",
    "tags": [
      "effects",
      "effect",
      "state",
      "synchronizing"
    ],
    "code_length": 4,
    "is_duplicate": false,
    "topic": "Synchronizing with Effects",
    "purpose": "Synchronizing with Effects",
    "explanation": "Synchronizing with Effects – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/synchronizing-with-effects",
    "source_title": "Synchronizing with Effects – React",
    "section": "Synchronizing with Effects",
    "code": "import { useState, useRef, useEffect } from 'react';\n\nfunction VideoPlayer({ src, isPlaying }) {\n  const ref = useRef(null);\n\n  useEffect(() => {\n    if (isPlaying) {\n      console.log('Calling video.play()');\n      ref.current.play();\n    } else {\n      console.log('Calling video.pause()');\n      ref.current.pause();\n    }\n  });\n\n  return <video ref={ref} src={src} loop playsInline />;\n}\n\nexport default function App() {\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [text, setText] = useState('');\n  return (\n    <>\n      <input value={text} onChange={e => setText(e.target.value)} />\n      <button onClick={() => setIsPlaying(!isPlaying)}>\n        {isPlaying ? 'Pause' : 'Play'}\n      </button>\n      <VideoPlayer\n        isPlaying={isPlaying}\n        src=\"https://interactive-examples.mdn.mozilla.net/media/cc0-videos/flower.mp4\"\n      />\n    </>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "effect",
      "effects",
      "state",
      "component",
      "synchronizing"
    ],
    "code_length": 34,
    "is_duplicate": false,
    "topic": "Synchronizing with Effects",
    "purpose": "Synchronizing with Effects",
    "explanation": "Synchronizing with Effects – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/synchronizing-with-effects",
    "source_title": "Synchronizing with Effects – React",
    "section": "Synchronizing with Effects",
    "code": "useEffect(() => {\n    // ...\n  }, []);",
    "code_language": "unknown",
    "code_type": "snippet",
    "tags": [
      "effects",
      "effect",
      "synchronizing"
    ],
    "code_length": 3,
    "is_duplicate": false,
    "topic": "Synchronizing with Effects",
    "purpose": "Synchronizing with Effects",
    "explanation": "Synchronizing with Effects – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/synchronizing-with-effects",
    "source_title": "Synchronizing with Effects – React",
    "section": "Synchronizing with Effects",
    "code": "import { useState, useRef, useEffect } from 'react';\n\nfunction VideoPlayer({ src, isPlaying }) {\n  const ref = useRef(null);\n\n  useEffect(() => {\n    if (isPlaying) {\n      console.log('Calling video.play()');\n      ref.current.play();\n    } else {\n      console.log('Calling video.pause()');\n      ref.current.pause();\n    }\n  }, []); // This causes an error\n\n  return <video ref={ref} src={src} loop playsInline />;\n}\n\nexport default function App() {\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [text, setText] = useState('');\n  return (\n    <>\n      <input value={text} onChange={e => setText(e.target.value)} />\n      <button onClick={() => setIsPlaying(!isPlaying)}>\n        {isPlaying ? 'Pause' : 'Play'}\n      </button>\n      <VideoPlayer\n        isPlaying={isPlaying}\n        src=\"https://interactive-examples.mdn.mozilla.net/media/cc0-videos/flower.mp4\"\n      />\n    </>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "effect",
      "effects",
      "state",
      "component",
      "synchronizing"
    ],
    "code_length": 34,
    "is_duplicate": false,
    "topic": "Synchronizing with Effects",
    "purpose": "Synchronizing with Effects",
    "explanation": "Synchronizing with Effects – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/synchronizing-with-effects",
    "source_title": "Synchronizing with Effects – React",
    "section": "Synchronizing with Effects",
    "code": "useEffect(() => {\n    if (isPlaying) { // It's used here...\n      // ...\n    } else {\n      // ...\n    }\n  }, [isPlaying]); // ...so it must be declared here!",
    "code_language": "unknown",
    "code_type": "snippet",
    "tags": [
      "effects",
      "effect",
      "synchronizing"
    ],
    "code_length": 7,
    "is_duplicate": false,
    "topic": "Synchronizing with Effects",
    "purpose": "Synchronizing with Effects",
    "explanation": "Synchronizing with Effects – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/synchronizing-with-effects",
    "source_title": "Synchronizing with Effects – React",
    "section": "Synchronizing with Effects",
    "code": "import { useState, useRef, useEffect } from 'react';\n\nfunction VideoPlayer({ src, isPlaying }) {\n  const ref = useRef(null);\n\n  useEffect(() => {\n    if (isPlaying) {\n      console.log('Calling video.play()');\n      ref.current.play();\n    } else {\n      console.log('Calling video.pause()');\n      ref.current.pause();\n    }\n  }, [isPlaying]);\n\n  return <video ref={ref} src={src} loop playsInline />;\n}\n\nexport default function App() {\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [text, setText] = useState('');\n  return (\n    <>\n      <input value={text} onChange={e => setText(e.target.value)} />\n      <button onClick={() => setIsPlaying(!isPlaying)}>\n        {isPlaying ? 'Pause' : 'Play'}\n      </button>\n      <VideoPlayer\n        isPlaying={isPlaying}\n        src=\"https://interactive-examples.mdn.mozilla.net/media/cc0-videos/flower.mp4\"\n      />\n    </>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "effect",
      "effects",
      "state",
      "component",
      "synchronizing"
    ],
    "code_length": 34,
    "is_duplicate": false,
    "topic": "Synchronizing with Effects",
    "purpose": "Synchronizing with Effects",
    "explanation": "Synchronizing with Effects – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/synchronizing-with-effects",
    "source_title": "Synchronizing with Effects – React",
    "section": "Synchronizing with Effects",
    "code": "useEffect(() => {\n  // This runs after every render\n});\n\nuseEffect(() => {\n  // This runs only on mount (when the component appears)\n}, []);\n\nuseEffect(() => {\n  // This runs on mount *and also* if either a or b have changed since the last render\n}, [a, b]);",
    "code_language": "unknown",
    "code_type": "snippet",
    "tags": [
      "effects",
      "effect",
      "synchronizing"
    ],
    "code_length": 11,
    "is_duplicate": false,
    "topic": "Synchronizing with Effects",
    "purpose": "Synchronizing with Effects",
    "explanation": "Synchronizing with Effects – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/synchronizing-with-effects",
    "source_title": "Synchronizing with Effects – React",
    "section": "Synchronizing with Effects",
    "code": "useEffect(() => {\n  const connection = createConnection();\n  connection.connect();\n});",
    "code_language": "unknown",
    "code_type": "snippet",
    "tags": [
      "effects",
      "effect",
      "synchronizing"
    ],
    "code_length": 4,
    "is_duplicate": false,
    "topic": "Synchronizing with Effects",
    "purpose": "Synchronizing with Effects",
    "explanation": "Synchronizing with Effects – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/synchronizing-with-effects",
    "source_title": "Synchronizing with Effects – React",
    "section": "Synchronizing with Effects",
    "code": "useEffect(() => {\n  const connection = createConnection();\n  connection.connect();\n}, []);",
    "code_language": "unknown",
    "code_type": "snippet",
    "tags": [
      "effects",
      "effect",
      "synchronizing"
    ],
    "code_length": 4,
    "is_duplicate": false,
    "topic": "Synchronizing with Effects",
    "purpose": "Synchronizing with Effects",
    "explanation": "Synchronizing with Effects – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/synchronizing-with-effects",
    "source_title": "Synchronizing with Effects – React",
    "section": "Synchronizing with Effects",
    "code": "import { useEffect } from 'react';\nimport { createConnection } from './chat.js';\n\nexport default function ChatRoom() {\n  useEffect(() => {\n    const connection = createConnection();\n    connection.connect();\n  }, []);\n  return <h1>Welcome to the chat!</h1>;\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "effects",
      "component",
      "effect",
      "synchronizing"
    ],
    "code_length": 10,
    "is_duplicate": false,
    "topic": "Synchronizing with Effects",
    "purpose": "Synchronizing with Effects",
    "explanation": "Synchronizing with Effects – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/synchronizing-with-effects",
    "source_title": "Synchronizing with Effects – React",
    "section": "Synchronizing with Effects",
    "code": "useEffect(() => {\n    const connection = createConnection();\n    connection.connect();\n    return () => {\n      connection.disconnect();\n    };\n  }, []);",
    "code_language": "unknown",
    "code_type": "snippet",
    "tags": [
      "effects",
      "effect",
      "synchronizing"
    ],
    "code_length": 7,
    "is_duplicate": false,
    "topic": "Synchronizing with Effects",
    "purpose": "Synchronizing with Effects",
    "explanation": "Synchronizing with Effects – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/synchronizing-with-effects",
    "source_title": "Synchronizing with Effects – React",
    "section": "Synchronizing with Effects",
    "code": "import { useState, useEffect } from 'react';\nimport { createConnection } from './chat.js';\n\nexport default function ChatRoom() {\n  useEffect(() => {\n    const connection = createConnection();\n    connection.connect();\n    return () => connection.disconnect();\n  }, []);\n  return <h1>Welcome to the chat!</h1>;\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "effect",
      "effects",
      "state",
      "component",
      "synchronizing"
    ],
    "code_length": 11,
    "is_duplicate": false,
    "topic": "Synchronizing with Effects",
    "purpose": "Synchronizing with Effects",
    "explanation": "Synchronizing with Effects – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/synchronizing-with-effects",
    "source_title": "Synchronizing with Effects – React",
    "section": "Synchronizing with Effects",
    "code": "const connectionRef = useRef(null);\n  useEffect(() => {\n    // 🚩 This wont fix the bug!!!\n    if (!connectionRef.current) {\n      connectionRef.current = createConnection();\n      connectionRef.current.connect();\n    }\n  }, []);",
    "code_language": "unknown",
    "code_type": "snippet",
    "tags": [
      "effects",
      "effect",
      "synchronizing"
    ],
    "code_length": 8,
    "is_duplicate": false,
    "topic": "Synchronizing with Effects",
    "purpose": "Synchronizing with Effects",
    "explanation": "Synchronizing with Effects – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/synchronizing-with-effects",
    "source_title": "Synchronizing with Effects – React",
    "section": "Synchronizing with Effects",
    "code": "useEffect(() => {\n  const map = mapRef.current;\n  map.setZoomLevel(zoomLevel);\n}, [zoomLevel]);",
    "code_language": "unknown",
    "code_type": "snippet",
    "tags": [
      "effects",
      "effect",
      "synchronizing"
    ],
    "code_length": 4,
    "is_duplicate": false,
    "topic": "Synchronizing with Effects",
    "purpose": "Synchronizing with Effects",
    "explanation": "Synchronizing with Effects – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/synchronizing-with-effects",
    "source_title": "Synchronizing with Effects – React",
    "section": "Synchronizing with Effects",
    "code": "useEffect(() => {\n  const dialog = dialogRef.current;\n  dialog.showModal();\n  return () => dialog.close();\n}, []);",
    "code_language": "unknown",
    "code_type": "snippet",
    "tags": [
      "effects",
      "effect",
      "synchronizing"
    ],
    "code_length": 5,
    "is_duplicate": false,
    "topic": "Synchronizing with Effects",
    "purpose": "Synchronizing with Effects",
    "explanation": "Synchronizing with Effects – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/synchronizing-with-effects",
    "source_title": "Synchronizing with Effects – React",
    "section": "Synchronizing with Effects",
    "code": "useEffect(() => {\n  function handleScroll(e) {\n    console.log(window.scrollX, window.scrollY);\n  }\n  window.addEventListener('scroll', handleScroll);\n  return () => window.removeEventListener('scroll', handleScroll);\n}, []);",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "effects",
      "effect",
      "synchronizing"
    ],
    "code_length": 7,
    "is_duplicate": false,
    "topic": "Synchronizing with Effects",
    "purpose": "Synchronizing with Effects",
    "explanation": "Synchronizing with Effects – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/synchronizing-with-effects",
    "source_title": "Synchronizing with Effects – React",
    "section": "Synchronizing with Effects",
    "code": "useEffect(() => {\n  const node = ref.current;\n  node.style.opacity = 1; // Trigger the animation\n  return () => {\n    node.style.opacity = 0; // Reset to the initial value\n  };\n}, []);",
    "code_language": "unknown",
    "code_type": "snippet",
    "tags": [
      "effects",
      "effect",
      "synchronizing"
    ],
    "code_length": 7,
    "is_duplicate": false,
    "topic": "Synchronizing with Effects",
    "purpose": "Synchronizing with Effects",
    "explanation": "Synchronizing with Effects – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/synchronizing-with-effects",
    "source_title": "Synchronizing with Effects – React",
    "section": "Synchronizing with Effects",
    "code": "useEffect(() => {\n  let ignore = false;\n\n  async function startFetching() {\n    const json = await fetchTodos(userId);\n    if (!ignore) {\n      setTodos(json);\n    }\n  }\n\n  startFetching();\n\n  return () => {\n    ignore = true;\n  };\n}, [userId]);",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "effects",
      "effect",
      "synchronizing"
    ],
    "code_length": 16,
    "is_duplicate": false,
    "topic": "Synchronizing with Effects",
    "purpose": "Synchronizing with Effects",
    "explanation": "Synchronizing with Effects – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/synchronizing-with-effects",
    "source_title": "Synchronizing with Effects – React",
    "section": "Synchronizing with Effects",
    "code": "function TodoList() {\n  const todos = useSomeDataLibrary(`/api/user/${userId}/todos`);\n  // ...",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "effects",
      "synchronizing"
    ],
    "code_length": 3,
    "is_duplicate": false,
    "topic": "Synchronizing with Effects",
    "purpose": "Synchronizing with Effects",
    "explanation": "Synchronizing with Effects – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/synchronizing-with-effects",
    "source_title": "Synchronizing with Effects – React",
    "section": "Synchronizing with Effects",
    "code": "useEffect(() => {\n  logVisit(url); // Sends a POST request\n}, [url]);",
    "code_language": "unknown",
    "code_type": "snippet",
    "tags": [
      "effects",
      "effect",
      "synchronizing"
    ],
    "code_length": 3,
    "is_duplicate": false,
    "topic": "Synchronizing with Effects",
    "purpose": "Synchronizing with Effects",
    "explanation": "Synchronizing with Effects – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/synchronizing-with-effects",
    "source_title": "Synchronizing with Effects – React",
    "section": "Synchronizing with Effects",
    "code": "if (typeof window !== 'undefined') { // Check if we're running in the browser.\n  checkAuthToken();\n  loadDataFromLocalStorage();\n}\n\nfunction App() {\n  // ...\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "effects",
      "synchronizing"
    ],
    "code_length": 8,
    "is_duplicate": false,
    "topic": "Synchronizing with Effects",
    "purpose": "Synchronizing with Effects",
    "explanation": "Synchronizing with Effects – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/synchronizing-with-effects",
    "source_title": "Synchronizing with Effects – React",
    "section": "Synchronizing with Effects",
    "code": "useEffect(() => {\n  // 🔴 Wrong: This Effect fires twice in development, exposing a problem in the code.\n  fetch('/api/buy', { method: 'POST' });\n}, []);",
    "code_language": "unknown",
    "code_type": "snippet",
    "tags": [
      "effects",
      "effect",
      "synchronizing"
    ],
    "code_length": 4,
    "is_duplicate": false,
    "topic": "Synchronizing with Effects",
    "purpose": "Synchronizing with Effects",
    "explanation": "Synchronizing with Effects – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/synchronizing-with-effects",
    "source_title": "Synchronizing with Effects – React",
    "section": "Synchronizing with Effects",
    "code": "function handleClick() {\n    // ✅ Buying is an event because it is caused by a particular interaction.\n    fetch('/api/buy', { method: 'POST' });\n  }",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "effects",
      "synchronizing"
    ],
    "code_length": 4,
    "is_duplicate": false,
    "topic": "Synchronizing with Effects",
    "purpose": "Synchronizing with Effects",
    "explanation": "Synchronizing with Effects – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/synchronizing-with-effects",
    "source_title": "Synchronizing with Effects – React",
    "section": "Synchronizing with Effects",
    "code": "import { useState, useEffect } from 'react';\n\nfunction Playground() {\n  const [text, setText] = useState('a');\n\n  useEffect(() => {\n    function onTimeout() {\n      console.log('⏰ ' + text);\n    }\n\n    console.log('🔵 Schedule \"' + text + '\" log');\n    const timeoutId = setTimeout(onTimeout, 3000);\n\n    return () => {\n      console.log('🟡 Cancel \"' + text + '\" log');\n      clearTimeout(timeoutId);\n    };\n  }, [text]);\n\n  return (\n    <>\n      <label>\n        What to log:{' '}\n        <input\n          value={text}\n          onChange={e => setText(e.target.value)}\n        />\n      </label>\n      <h1>{text}</h1>\n    </>\n  );\n}\n\nexport default function App() {\n  const [show, setShow] = useState(false);\n  return (\n    <>\n      <button onClick={() => setShow(!show)}>\n        {show ? 'Unmount' : 'Mount'} the component\n      </button>\n      {show && <hr />}\n      {show && <Playground />}\n    </>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "effect",
      "effects",
      "state",
      "component",
      "synchronizing"
    ],
    "code_length": 45,
    "is_duplicate": false,
    "topic": "Synchronizing with Effects",
    "purpose": "Synchronizing with Effects",
    "explanation": "Synchronizing with Effects – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/synchronizing-with-effects",
    "source_title": "Synchronizing with Effects – React",
    "section": "Synchronizing with Effects",
    "code": "import { useEffect, useRef } from 'react';\n\nexport default function MyInput({ value, onChange }) {\n  const ref = useRef(null);\n\n  // TODO: This doesn't quite work. Fix it.\n  // ref.current.focus()    \n\n  return (\n    <input\n      ref={ref}\n      value={value}\n      onChange={onChange}\n    />\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "effects",
      "component",
      "effect",
      "synchronizing"
    ],
    "code_length": 16,
    "is_duplicate": false,
    "topic": "Synchronizing with Effects",
    "purpose": "Synchronizing with Effects",
    "explanation": "Synchronizing with Effects – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/describing-the-ui",
    "source_title": "Describing the UI – React",
    "section": "Describing the UI",
    "code": "import Profile from './Profile.js';\n\nexport default function Gallery() {\n  return (\n    <section>\n      <h1>Amazing scientists</h1>\n      <Profile />\n      <Profile />\n      <Profile />\n    </section>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "ui",
      "describing",
      "component"
    ],
    "code_length": 12,
    "is_duplicate": false,
    "topic": "Describing the UI",
    "purpose": "Describing the UI",
    "explanation": "Describing the UI – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/describing-the-ui",
    "source_title": "Describing the UI – React",
    "section": "Describing the UI",
    "code": "export default function TodoList() {\n  return (\n    // This doesn't quite work!\n    <h1>Hedy Lamarr's Todos</h1>\n    <img\n      src=\"https://i.imgur.com/yXOvdOSs.jpg\"\n      alt=\"Hedy Lamarr\"\n      class=\"photo\"\n    >\n    <ul>\n      <li>Invent new traffic lights\n      <li>Rehearse a movie scene\n      <li>Improve spectrum technology\n    </ul>",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "ui",
      "describing",
      "component"
    ],
    "code_length": 14,
    "is_duplicate": false,
    "topic": "Describing the UI",
    "purpose": "Describing the UI",
    "explanation": "Describing the UI – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/describing-the-ui",
    "source_title": "Describing the UI – React",
    "section": "Describing the UI",
    "code": "export default function TodoList() {\n  return (\n    <>\n      <h1>Hedy Lamarr's Todos</h1>\n      <img\n        src=\"https://i.imgur.com/yXOvdOSs.jpg\"\n        alt=\"Hedy Lamarr\"\n        className=\"photo\"\n      />\n      <ul>\n        <li>Invent new traffic lights</li>\n        <li>Rehearse a movie scene</li>\n        <li>Improve spectrum technology</li>\n      </ul>\n    </>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "ui",
      "describing",
      "component"
    ],
    "code_length": 17,
    "is_duplicate": false,
    "topic": "Describing the UI",
    "purpose": "Describing the UI",
    "explanation": "Describing the UI – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/describing-the-ui",
    "source_title": "Describing the UI – React",
    "section": "Describing the UI",
    "code": "const person = {\n  name: 'Gregorio Y. Zara',\n  theme: {\n    backgroundColor: 'black',\n    color: 'pink'\n  }\n};\n\nexport default function TodoList() {\n  return (\n    <div style={person.theme}>\n      <h1>{person.name}'s Todos</h1>\n      <img\n        className=\"avatar\"\n        src=\"https://i.imgur.com/7vQD0fPs.jpg\"\n        alt=\"Gregorio Y. Zara\"\n      />\n      <ul>\n        <li>Improve the videophone</li>\n        <li>Prepare aeronautics lectures</li>\n        <li>Work on the alcohol-fuelled engine</li>\n      </ul>\n    </div>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "ui",
      "describing",
      "component"
    ],
    "code_length": 25,
    "is_duplicate": true,
    "topic": "Describing the UI",
    "purpose": "Describing the UI",
    "explanation": "Describing the UI – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/describing-the-ui",
    "source_title": "Describing the UI – React",
    "section": "Describing the UI",
    "code": "import { getImageUrl } from './utils.js'\n\nexport default function Profile() {\n  return (\n    <Card>\n      <Avatar\n        size={100}\n        person={{\n          name: 'Katsuko Saruhashi',\n          imageId: 'YfeOqp2'\n        }}\n      />\n    </Card>\n  );\n}\n\nfunction Avatar({ person, size }) {\n  return (\n    <img\n      className=\"avatar\"\n      src={getImageUrl(person)}\n      alt={person.name}\n      width={size}\n      height={size}\n    />\n  );\n}\n\nfunction Card({ children }) {\n  return (\n    <div className=\"card\">\n      {children}\n    </div>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "ui",
      "describing",
      "component"
    ],
    "code_length": 35,
    "is_duplicate": false,
    "topic": "Describing the UI",
    "purpose": "Describing the UI",
    "explanation": "Describing the UI – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/describing-the-ui",
    "source_title": "Describing the UI – React",
    "section": "Describing the UI",
    "code": "function Item({ name, isPacked }) {\n  return (\n    <li className=\"item\">\n      {name} {isPacked && '✅'}\n    </li>\n  );\n}\n\nexport default function PackingList() {\n  return (\n    <section>\n      <h1>Sally Ride's Packing List</h1>\n      <ul>\n        <Item\n          isPacked={true}\n          name=\"Space suit\"\n        />\n        <Item\n          isPacked={true}\n          name=\"Helmet with a golden leaf\"\n        />\n        <Item\n          isPacked={false}\n          name=\"Photo of Tam\"\n        />\n      </ul>\n    </section>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "ui",
      "describing",
      "component"
    ],
    "code_length": 29,
    "is_duplicate": false,
    "topic": "Describing the UI",
    "purpose": "Describing the UI",
    "explanation": "Describing the UI – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/describing-the-ui",
    "source_title": "Describing the UI – React",
    "section": "Describing the UI",
    "code": "import { people } from './data.js';\nimport { getImageUrl } from './utils.js';\n\nexport default function List() {\n  const listItems = people.map(person =>\n    <li key={person.id}>\n      <img\n        src={getImageUrl(person)}\n        alt={person.name}\n      />\n      <p>\n        <b>{person.name}:</b>\n        {' ' + person.profession + ' '}\n        known for {person.accomplishment}\n      </p>\n    </li>\n  );\n  return (\n    <article>\n      <h1>Scientists</h1>\n      <ul>{listItems}</ul>\n    </article>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "ui",
      "describing",
      "component"
    ],
    "code_length": 24,
    "is_duplicate": false,
    "topic": "Describing the UI",
    "purpose": "Describing the UI",
    "explanation": "Describing the UI – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/describing-the-ui",
    "source_title": "Describing the UI – React",
    "section": "Describing the UI",
    "code": "let guest = 0;\n\nfunction Cup() {\n  // Bad: changing a preexisting variable!\n  guest = guest + 1;\n  return <h2>Tea cup for guest #{guest}</h2>;\n}\n\nexport default function TeaSet() {\n  return (\n    <>\n      <Cup />\n      <Cup />\n      <Cup />\n    </>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "ui",
      "describing",
      "component"
    ],
    "code_length": 17,
    "is_duplicate": true,
    "topic": "Describing the UI",
    "purpose": "Describing the UI",
    "explanation": "Describing the UI – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/describing-the-ui",
    "source_title": "Describing the UI – React",
    "section": "Describing the UI",
    "code": "function Cup({ guest }) {\n  return <h2>Tea cup for guest #{guest}</h2>;\n}\n\nexport default function TeaSet() {\n  return (\n    <>\n      <Cup guest={1} />\n      <Cup guest={2} />\n      <Cup guest={3} />\n    </>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "ui",
      "describing",
      "component"
    ],
    "code_length": 13,
    "is_duplicate": true,
    "topic": "Describing the UI",
    "purpose": "Describing the UI",
    "explanation": "Describing the UI – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/your-first-component",
    "source_title": "Your First Component – React",
    "section": "Your First Component",
    "code": "<article>\n  <h1>My First Component</h1>\n  <ol>\n    <li>Components: UI Building Blocks</li>\n    <li>Defining a Component</li>\n    <li>Using a Component</li>\n  </ol>\n</article>",
    "code_language": "html/jsx",
    "code_type": "snippet",
    "tags": [
      "your",
      "first",
      "component"
    ],
    "code_length": 8,
    "is_duplicate": false,
    "topic": "Your First Component",
    "purpose": "Your First Component",
    "explanation": "Your First Component – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/your-first-component",
    "source_title": "Your First Component – React",
    "section": "Your First Component",
    "code": "<PageLayout>\n  <NavigationHeader>\n    <SearchBar />\n    <Link to=\"/docs\">Docs</Link>\n  </NavigationHeader>\n  <Sidebar />\n  <PageContent>\n    <TableOfContents />\n    <DocumentationText />\n  </PageContent>\n</PageLayout>",
    "code_language": "html/jsx",
    "code_type": "snippet",
    "tags": [
      "your",
      "first",
      "component"
    ],
    "code_length": 11,
    "is_duplicate": false,
    "topic": "Your First Component",
    "purpose": "Your First Component",
    "explanation": "Your First Component – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/your-first-component",
    "source_title": "Your First Component – React",
    "section": "Your First Component",
    "code": "export default function Profile() {\n  return (\n    <img\n      src=\"https://i.imgur.com/MK3eW3Am.jpg\"\n      alt=\"Katherine Johnson\"\n    />\n  )\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "your",
      "first",
      "component"
    ],
    "code_length": 8,
    "is_duplicate": false,
    "topic": "Your First Component",
    "purpose": "Your First Component",
    "explanation": "Your First Component – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/your-first-component",
    "source_title": "Your First Component – React",
    "section": "Your First Component",
    "code": "return <img src=\"https://i.imgur.com/MK3eW3As.jpg\" alt=\"Katherine Johnson\" />;",
    "code_language": "unknown",
    "code_type": "snippet",
    "tags": [
      "your",
      "first",
      "component"
    ],
    "code_length": 1,
    "is_duplicate": false,
    "topic": "Your First Component",
    "purpose": "Your First Component",
    "explanation": "Your First Component – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/your-first-component",
    "source_title": "Your First Component – React",
    "section": "Your First Component",
    "code": "return (\n  <div>\n    <img src=\"https://i.imgur.com/MK3eW3As.jpg\" alt=\"Katherine Johnson\" />\n  </div>\n);",
    "code_language": "unknown",
    "code_type": "snippet",
    "tags": [
      "your",
      "first",
      "component"
    ],
    "code_length": 5,
    "is_duplicate": false,
    "topic": "Your First Component",
    "purpose": "Your First Component",
    "explanation": "Your First Component – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/your-first-component",
    "source_title": "Your First Component – React",
    "section": "Your First Component",
    "code": "function Profile() {\n  return (\n    <img\n      src=\"https://i.imgur.com/MK3eW3As.jpg\"\n      alt=\"Katherine Johnson\"\n    />\n  );\n}\n\nexport default function Gallery() {\n  return (\n    <section>\n      <h1>Amazing scientists</h1>\n      <Profile />\n      <Profile />\n      <Profile />\n    </section>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "your",
      "first",
      "component"
    ],
    "code_length": 19,
    "is_duplicate": false,
    "topic": "Your First Component",
    "purpose": "Your First Component",
    "explanation": "Your First Component – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/your-first-component",
    "source_title": "Your First Component – React",
    "section": "Your First Component",
    "code": "<section>\n  <h1>Amazing scientists</h1>\n  <img src=\"https://i.imgur.com/MK3eW3As.jpg\" alt=\"Katherine Johnson\" />\n  <img src=\"https://i.imgur.com/MK3eW3As.jpg\" alt=\"Katherine Johnson\" />\n  <img src=\"https://i.imgur.com/MK3eW3As.jpg\" alt=\"Katherine Johnson\" />\n</section>",
    "code_language": "html/jsx",
    "code_type": "snippet",
    "tags": [
      "your",
      "first",
      "component"
    ],
    "code_length": 6,
    "is_duplicate": false,
    "topic": "Your First Component",
    "purpose": "Your First Component",
    "explanation": "Your First Component – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/your-first-component",
    "source_title": "Your First Component – React",
    "section": "Your First Component",
    "code": "export default function Gallery() {\n  // 🔴 Never define a component inside another component!\n  function Profile() {\n    // ...\n  }\n  // ...\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "your",
      "first",
      "component"
    ],
    "code_length": 7,
    "is_duplicate": false,
    "topic": "Your First Component",
    "purpose": "Your First Component",
    "explanation": "Your First Component – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/your-first-component",
    "source_title": "Your First Component – React",
    "section": "Your First Component",
    "code": "export default function Gallery() {\n  // ...\n}\n\n// ✅ Declare components at the top level\nfunction Profile() {\n  // ...\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "your",
      "first",
      "component"
    ],
    "code_length": 8,
    "is_duplicate": false,
    "topic": "Your First Component",
    "purpose": "Your First Component",
    "explanation": "Your First Component – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/your-first-component",
    "source_title": "Your First Component – React",
    "section": "Your First Component",
    "code": "function Profile() {\n  return (\n    <img\n      src=\"https://i.imgur.com/lICfvbD.jpg\"\n      alt=\"Aklilu Lemma\"\n    />\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "your",
      "first",
      "component"
    ],
    "code_length": 8,
    "is_duplicate": false,
    "topic": "Your First Component",
    "purpose": "Your First Component",
    "explanation": "Your First Component – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/add-react-to-an-existing-project",
    "source_title": "Add React to an Existing Project – React",
    "section": "Add React to an Existing Project",
    "code": "import { createRoot } from 'react-dom/client';\n\n// Clear the existing HTML content\ndocument.body.innerHTML = '<div id=\"app\"></div>';\n\n// Render your React component instead\nconst root = createRoot(document.getElementById('app'));\nroot.render(<h1>Hello, world</h1>);",
    "code_language": "javascript/jsx",
    "code_type": "import",
    "tags": [
      "project",
      "existing",
      "add"
    ],
    "code_length": 8,
    "is_duplicate": false,
    "topic": "Add React to an Existing Project",
    "purpose": "Add React to an Existing Project",
    "explanation": "Add React to an Existing Project – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/add-react-to-an-existing-project",
    "source_title": "Add React to an Existing Project – React",
    "section": "Add React to an Existing Project",
    "code": "import { createRoot } from 'react-dom/client';\n\n// Clear the existing HTML content\ndocument.body.innerHTML = '<div id=\"app\"></div>';\n\n// Render your React component instead\nconst root = createRoot(document.getElementById('app'));\nroot.render(<h1>Hello, world</h1>);",
    "code_language": "javascript/jsx",
    "code_type": "import",
    "tags": [
      "project",
      "existing",
      "add"
    ],
    "code_length": 8,
    "is_duplicate": true,
    "topic": "Add React to an Existing Project",
    "purpose": "Add React to an Existing Project",
    "explanation": "Add React to an Existing Project – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/add-react-to-an-existing-project",
    "source_title": "Add React to an Existing Project – React",
    "section": "Add React to an Existing Project",
    "code": "<!-- ... somewhere in your html ... -->\n<nav id=\"navigation\"></nav>\n<!-- ... more html ... -->",
    "code_language": "html/jsx",
    "code_type": "snippet",
    "tags": [
      "project",
      "existing",
      "add"
    ],
    "code_length": 3,
    "is_duplicate": false,
    "topic": "Add React to an Existing Project",
    "purpose": "Add React to an Existing Project",
    "explanation": "Add React to an Existing Project – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/add-react-to-an-existing-project",
    "source_title": "Add React to an Existing Project – React",
    "section": "Add React to an Existing Project",
    "code": "import { createRoot } from 'react-dom/client';\n\nfunction NavigationBar() {\n  // TODO: Actually implement a navigation bar\n  return <h1>Hello from React!</h1>;\n}\n\nconst domNode = document.getElementById('navigation');\nconst root = createRoot(domNode);\nroot.render(<NavigationBar />);",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "project",
      "existing",
      "add"
    ],
    "code_length": 10,
    "is_duplicate": false,
    "topic": "Add React to an Existing Project",
    "purpose": "Add React to an Existing Project",
    "explanation": "Add React to an Existing Project – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/sharing-state-between-components",
    "source_title": "Sharing State Between Components – React",
    "section": "Sharing State Between Components",
    "code": "const [isActive, setIsActive] = useState(false);",
    "code_language": "unknown",
    "code_type": "snippet",
    "tags": [
      "sharing",
      "components",
      "between",
      "state"
    ],
    "code_length": 1,
    "is_duplicate": false,
    "topic": "Sharing State Between Components",
    "purpose": "Sharing State Between Components",
    "explanation": "Sharing State Between Components – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/sharing-state-between-components",
    "source_title": "Sharing State Between Components – React",
    "section": "Sharing State Between Components",
    "code": "function Panel({ title, children, isActive }) {",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "sharing",
      "components",
      "between",
      "state"
    ],
    "code_length": 1,
    "is_duplicate": false,
    "topic": "Sharing State Between Components",
    "purpose": "Sharing State Between Components",
    "explanation": "Sharing State Between Components – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/sharing-state-between-components",
    "source_title": "Sharing State Between Components – React",
    "section": "Sharing State Between Components",
    "code": "import { useState } from 'react';\n\nexport default function Accordion() {\n  return (\n    <>\n      <h2>Almaty, Kazakhstan</h2>\n      <Panel title=\"About\" isActive={true}>\n        With a population of about 2 million, Almaty is Kazakhstan's largest city. From 1929 to 1997, it was its capital city.\n      </Panel>\n      <Panel title=\"Etymology\" isActive={true}>\n        The name comes from <span lang=\"kk-KZ\">алма</span>, the Kazakh word for \"apple\" and is often translated as \"full of apples\". In fact, the region surrounding Almaty is thought to be the ancestral home of the apple, and the wild <i lang=\"la\">Malus sieversii</i> is considered a likely candidate for the ancestor of the modern domestic apple.\n      </Panel>\n    </>\n  );\n}\n\nfunction Panel({ title, children, isActive }) {\n  return (\n    <section className=\"panel\">\n      <h3>{title}</h3>\n      {isActive ? (\n        <p>{children}</p>\n      ) : (\n        <button onClick={() => setIsActive(true)}>\n          Show\n        </button>\n      )}\n    </section>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "sharing",
      "state",
      "component",
      "components",
      "between"
    ],
    "code_length": 30,
    "is_duplicate": false,
    "topic": "Sharing State Between Components",
    "purpose": "Sharing State Between Components",
    "explanation": "Sharing State Between Components – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/sharing-state-between-components",
    "source_title": "Sharing State Between Components – React",
    "section": "Sharing State Between Components",
    "code": "const [activeIndex, setActiveIndex] = useState(0);",
    "code_language": "unknown",
    "code_type": "snippet",
    "tags": [
      "sharing",
      "components",
      "between",
      "state"
    ],
    "code_length": 1,
    "is_duplicate": false,
    "topic": "Sharing State Between Components",
    "purpose": "Sharing State Between Components",
    "explanation": "Sharing State Between Components – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/sharing-state-between-components",
    "source_title": "Sharing State Between Components – React",
    "section": "Sharing State Between Components",
    "code": "<>\n  <Panel\n    isActive={activeIndex === 0}\n    onShow={() => setActiveIndex(0)}\n  >\n    ...\n  </Panel>\n  <Panel\n    isActive={activeIndex === 1}\n    onShow={() => setActiveIndex(1)}\n  >\n    ...\n  </Panel>\n</>",
    "code_language": "html/jsx",
    "code_type": "snippet",
    "tags": [
      "sharing",
      "components",
      "between",
      "state"
    ],
    "code_length": 14,
    "is_duplicate": false,
    "topic": "Sharing State Between Components",
    "purpose": "Sharing State Between Components",
    "explanation": "Sharing State Between Components – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/sharing-state-between-components",
    "source_title": "Sharing State Between Components – React",
    "section": "Sharing State Between Components",
    "code": "import { useState } from 'react';\n\nexport default function Accordion() {\n  const [activeIndex, setActiveIndex] = useState(0);\n  return (\n    <>\n      <h2>Almaty, Kazakhstan</h2>\n      <Panel\n        title=\"About\"\n        isActive={activeIndex === 0}\n        onShow={() => setActiveIndex(0)}\n      >\n        With a population of about 2 million, Almaty is Kazakhstan's largest city. From 1929 to 1997, it was its capital city.\n      </Panel>\n      <Panel\n        title=\"Etymology\"\n        isActive={activeIndex === 1}\n        onShow={() => setActiveIndex(1)}\n      >\n        The name comes from <span lang=\"kk-KZ\">алма</span>, the Kazakh word for \"apple\" and is often translated as \"full of apples\". In fact, the region surrounding Almaty is thought to be the ancestral home of the apple, and the wild <i lang=\"la\">Malus sieversii</i> is considered a likely candidate for the ancestor of the modern domestic apple.\n      </Panel>\n    </>\n  );\n}\n\nfunction Panel({\n  title,\n  children,\n  isActive,\n  onShow\n}) {\n  return (\n    <section className=\"panel\">\n      <h3>{title}</h3>\n      {isActive ? (\n        <p>{children}</p>\n      ) : (\n        <button onClick={onShow}>\n          Show\n        </button>\n      )}\n    </section>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "sharing",
      "state",
      "component",
      "components",
      "between"
    ],
    "code_length": 44,
    "is_duplicate": false,
    "topic": "Sharing State Between Components",
    "purpose": "Sharing State Between Components",
    "explanation": "Sharing State Between Components – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/sharing-state-between-components",
    "source_title": "Sharing State Between Components – React",
    "section": "Sharing State Between Components",
    "code": "import { useState } from 'react';\n\nexport default function SyncedInputs() {\n  return (\n    <>\n      <Input label=\"First input\" />\n      <Input label=\"Second input\" />\n    </>\n  );\n}\n\nfunction Input({ label }) {\n  const [text, setText] = useState('');\n\n  function handleChange(e) {\n    setText(e.target.value);\n  }\n\n  return (\n    <label>\n      {label}\n      {' '}\n      <input\n        value={text}\n        onChange={handleChange}\n      />\n    </label>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "sharing",
      "state",
      "component",
      "components",
      "between"
    ],
    "code_length": 29,
    "is_duplicate": false,
    "topic": "Sharing State Between Components",
    "purpose": "Sharing State Between Components",
    "explanation": "Sharing State Between Components – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/extracting-state-logic-into-a-reducer",
    "source_title": "Extracting State Logic into a Reducer – React",
    "section": "Extracting State Logic into a Reducer",
    "code": "function handleAddTask(text) {\n  setTasks([\n    ...tasks,\n    {\n      id: nextId++,\n      text: text,\n      done: false,\n    },\n  ]);\n}\n\nfunction handleChangeTask(task) {\n  setTasks(\n    tasks.map((t) => {\n      if (t.id === task.id) {\n        return task;\n      } else {\n        return t;\n      }\n    })\n  );\n}\n\nfunction handleDeleteTask(taskId) {\n  setTasks(tasks.filter((t) => t.id !== taskId));\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "logic",
      "reducer",
      "state",
      "extracting",
      "into"
    ],
    "code_length": 26,
    "is_duplicate": false,
    "topic": "Extracting State Logic into a Reducer",
    "purpose": "Extracting State Logic into a Reducer",
    "explanation": "Extracting State Logic into a Reducer – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/extracting-state-logic-into-a-reducer",
    "source_title": "Extracting State Logic into a Reducer – React",
    "section": "Extracting State Logic into a Reducer",
    "code": "function handleAddTask(text) {\n  dispatch({\n    type: 'added',\n    id: nextId++,\n    text: text,\n  });\n}\n\nfunction handleChangeTask(task) {\n  dispatch({\n    type: 'changed',\n    task: task,\n  });\n}\n\nfunction handleDeleteTask(taskId) {\n  dispatch({\n    type: 'deleted',\n    id: taskId,\n  });\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "logic",
      "reducer",
      "state",
      "extracting",
      "into"
    ],
    "code_length": 21,
    "is_duplicate": false,
    "topic": "Extracting State Logic into a Reducer",
    "purpose": "Extracting State Logic into a Reducer",
    "explanation": "Extracting State Logic into a Reducer – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/extracting-state-logic-into-a-reducer",
    "source_title": "Extracting State Logic into a Reducer – React",
    "section": "Extracting State Logic into a Reducer",
    "code": "function handleDeleteTask(taskId) {\n  dispatch(\n    // \"action\" object:\n    {\n      type: 'deleted',\n      id: taskId,\n    }\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "logic",
      "reducer",
      "state",
      "extracting",
      "into"
    ],
    "code_length": 9,
    "is_duplicate": false,
    "topic": "Extracting State Logic into a Reducer",
    "purpose": "Extracting State Logic into a Reducer",
    "explanation": "Extracting State Logic into a Reducer – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/extracting-state-logic-into-a-reducer",
    "source_title": "Extracting State Logic into a Reducer – React",
    "section": "Extracting State Logic into a Reducer",
    "code": "dispatch({\n  // specific to component\n  type: 'what_happened',\n  // other fields go here\n});",
    "code_language": "unknown",
    "code_type": "snippet",
    "tags": [
      "logic",
      "reducer",
      "state",
      "extracting",
      "into"
    ],
    "code_length": 5,
    "is_duplicate": false,
    "topic": "Extracting State Logic into a Reducer",
    "purpose": "Extracting State Logic into a Reducer",
    "explanation": "Extracting State Logic into a Reducer – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/extracting-state-logic-into-a-reducer",
    "source_title": "Extracting State Logic into a Reducer – React",
    "section": "Extracting State Logic into a Reducer",
    "code": "function yourReducer(state, action) {\n  // return next state for React to set\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "logic",
      "reducer",
      "state",
      "extracting",
      "into"
    ],
    "code_length": 3,
    "is_duplicate": false,
    "topic": "Extracting State Logic into a Reducer",
    "purpose": "Extracting State Logic into a Reducer",
    "explanation": "Extracting State Logic into a Reducer – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/extracting-state-logic-into-a-reducer",
    "source_title": "Extracting State Logic into a Reducer – React",
    "section": "Extracting State Logic into a Reducer",
    "code": "function tasksReducer(tasks, action) {\n  if (action.type === 'added') {\n    return [\n      ...tasks,\n      {\n        id: action.id,\n        text: action.text,\n        done: false,\n      },\n    ];\n  } else if (action.type === 'changed') {\n    return tasks.map((t) => {\n      if (t.id === action.task.id) {\n        return action.task;\n      } else {\n        return t;\n      }\n    });\n  } else if (action.type === 'deleted') {\n    return tasks.filter((t) => t.id !== action.id);\n  } else {\n    throw Error('Unknown action: ' + action.type);\n  }\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "logic",
      "reducer",
      "state",
      "extracting",
      "into"
    ],
    "code_length": 24,
    "is_duplicate": false,
    "topic": "Extracting State Logic into a Reducer",
    "purpose": "Extracting State Logic into a Reducer",
    "explanation": "Extracting State Logic into a Reducer – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/extracting-state-logic-into-a-reducer",
    "source_title": "Extracting State Logic into a Reducer – React",
    "section": "Extracting State Logic into a Reducer",
    "code": "function tasksReducer(tasks, action) {\n  switch (action.type) {\n    case 'added': {\n      return [\n        ...tasks,\n        {\n          id: action.id,\n          text: action.text,\n          done: false,\n        },\n      ];\n    }\n    case 'changed': {\n      return tasks.map((t) => {\n        if (t.id === action.task.id) {\n          return action.task;\n        } else {\n          return t;\n        }\n      });\n    }\n    case 'deleted': {\n      return tasks.filter((t) => t.id !== action.id);\n    }\n    default: {\n      throw Error('Unknown action: ' + action.type);\n    }\n  }\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "logic",
      "reducer",
      "state",
      "extracting",
      "into"
    ],
    "code_length": 29,
    "is_duplicate": false,
    "topic": "Extracting State Logic into a Reducer",
    "purpose": "Extracting State Logic into a Reducer",
    "explanation": "Extracting State Logic into a Reducer – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/extracting-state-logic-into-a-reducer",
    "source_title": "Extracting State Logic into a Reducer – React",
    "section": "Extracting State Logic into a Reducer",
    "code": "import { useReducer } from 'react';",
    "code_language": "javascript/jsx",
    "code_type": "import",
    "tags": [
      "logic",
      "reducer",
      "state",
      "extracting",
      "into"
    ],
    "code_length": 1,
    "is_duplicate": false,
    "topic": "Extracting State Logic into a Reducer",
    "purpose": "Extracting State Logic into a Reducer",
    "explanation": "Extracting State Logic into a Reducer – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/extracting-state-logic-into-a-reducer",
    "source_title": "Extracting State Logic into a Reducer – React",
    "section": "Extracting State Logic into a Reducer",
    "code": "const [tasks, setTasks] = useState(initialTasks);",
    "code_language": "unknown",
    "code_type": "snippet",
    "tags": [
      "logic",
      "reducer",
      "state",
      "extracting",
      "into"
    ],
    "code_length": 1,
    "is_duplicate": false,
    "topic": "Extracting State Logic into a Reducer",
    "purpose": "Extracting State Logic into a Reducer",
    "explanation": "Extracting State Logic into a Reducer – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/extracting-state-logic-into-a-reducer",
    "source_title": "Extracting State Logic into a Reducer – React",
    "section": "Extracting State Logic into a Reducer",
    "code": "const [tasks, dispatch] = useReducer(tasksReducer, initialTasks);",
    "code_language": "unknown",
    "code_type": "snippet",
    "tags": [
      "logic",
      "reducer",
      "state",
      "extracting",
      "into"
    ],
    "code_length": 1,
    "is_duplicate": false,
    "topic": "Extracting State Logic into a Reducer",
    "purpose": "Extracting State Logic into a Reducer",
    "explanation": "Extracting State Logic into a Reducer – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/extracting-state-logic-into-a-reducer",
    "source_title": "Extracting State Logic into a Reducer – React",
    "section": "Extracting State Logic into a Reducer",
    "code": "import { useReducer } from 'react';\nimport AddTask from './AddTask.js';\nimport TaskList from './TaskList.js';\n\nexport default function TaskApp() {\n  const [tasks, dispatch] = useReducer(tasksReducer, initialTasks);\n\n  function handleAddTask(text) {\n    dispatch({\n      type: 'added',\n      id: nextId++,\n      text: text,\n    });\n  }\n\n  function handleChangeTask(task) {\n    dispatch({\n      type: 'changed',\n      task: task,\n    });\n  }\n\n  function handleDeleteTask(taskId) {\n    dispatch({\n      type: 'deleted',\n      id: taskId,\n    });\n  }\n\n  return (\n    <>\n      <h1>Prague itinerary</h1>\n      <AddTask onAddTask={handleAddTask} />\n      <TaskList\n        tasks={tasks}\n        onChangeTask={handleChangeTask}\n        onDeleteTask={handleDeleteTask}\n      />\n    </>\n  );\n}\n\nfunction tasksReducer(tasks, action) {\n  switch (action.type) {\n    case 'added': {\n      return [\n        ...tasks,\n        {\n          id: action.id,\n          text: action.text,\n          done: false,\n        },\n      ];\n    }\n    case 'changed': {\n      return tasks.map((t) => {\n        if (t.id === action.task.id) {\n          return action.task;\n        } else {\n          return t;\n        }\n      });\n    }\n    case 'deleted': {\n      return tasks.filter((t) => t.id !== action.id);\n    }\n    default: {\n      throw Error('Unknown action: ' + action.type);\n    }\n  }\n}\n\nlet nextId = 3;\nconst initialTasks = [\n  {id: 0, text: 'Visit Kafka Museum', done: true},\n  {id: 1, text: 'Watch a puppet show', done: false},\n  {id: 2, text: 'Lennon Wall pic', done: false},\n];",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "logic",
      "reducer",
      "state",
      "component",
      "extracting",
      "into"
    ],
    "code_length": 78,
    "is_duplicate": false,
    "topic": "Extracting State Logic into a Reducer",
    "purpose": "Extracting State Logic into a Reducer",
    "explanation": "Extracting State Logic into a Reducer – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/extracting-state-logic-into-a-reducer",
    "source_title": "Extracting State Logic into a Reducer – React",
    "section": "Extracting State Logic into a Reducer",
    "code": "import { useReducer } from 'react';\nimport AddTask from './AddTask.js';\nimport TaskList from './TaskList.js';\nimport tasksReducer from './tasksReducer.js';\n\nexport default function TaskApp() {\n  const [tasks, dispatch] = useReducer(tasksReducer, initialTasks);\n\n  function handleAddTask(text) {\n    dispatch({\n      type: 'added',\n      id: nextId++,\n      text: text,\n    });\n  }\n\n  function handleChangeTask(task) {\n    dispatch({\n      type: 'changed',\n      task: task,\n    });\n  }\n\n  function handleDeleteTask(taskId) {\n    dispatch({\n      type: 'deleted',\n      id: taskId,\n    });\n  }\n\n  return (\n    <>\n      <h1>Prague itinerary</h1>\n      <AddTask onAddTask={handleAddTask} />\n      <TaskList\n        tasks={tasks}\n        onChangeTask={handleChangeTask}\n        onDeleteTask={handleDeleteTask}\n      />\n    </>\n  );\n}\n\nlet nextId = 3;\nconst initialTasks = [\n  {id: 0, text: 'Visit Kafka Museum', done: true},\n  {id: 1, text: 'Watch a puppet show', done: false},\n  {id: 2, text: 'Lennon Wall pic', done: false},\n];",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "logic",
      "reducer",
      "state",
      "component",
      "extracting",
      "into"
    ],
    "code_length": 49,
    "is_duplicate": false,
    "topic": "Extracting State Logic into a Reducer",
    "purpose": "Extracting State Logic into a Reducer",
    "explanation": "Extracting State Logic into a Reducer – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/extracting-state-logic-into-a-reducer",
    "source_title": "Extracting State Logic into a Reducer – React",
    "section": "Extracting State Logic into a Reducer",
    "code": "{\n  \"dependencies\": {\n    \"immer\": \"1.7.3\",\n    \"react\": \"latest\",\n    \"react-dom\": \"latest\",\n    \"react-scripts\": \"latest\",\n    \"use-immer\": \"0.5.1\"\n  },\n  \"scripts\": {\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n    \"test\": \"react-scripts test --env=jsdom\",\n    \"eject\": \"react-scripts eject\"\n  },\n  \"devDependencies\": {}\n}",
    "code_language": "unknown",
    "code_type": "snippet",
    "tags": [
      "logic",
      "reducer",
      "state",
      "extracting",
      "into"
    ],
    "code_length": 16,
    "is_duplicate": false,
    "topic": "Extracting State Logic into a Reducer",
    "purpose": "Extracting State Logic into a Reducer",
    "explanation": "Extracting State Logic into a Reducer – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/extracting-state-logic-into-a-reducer",
    "source_title": "Extracting State Logic into a Reducer – React",
    "section": "Extracting State Logic into a Reducer",
    "code": "import { useReducer } from 'react';\nimport Chat from './Chat.js';\nimport ContactList from './ContactList.js';\nimport { initialState, messengerReducer } from './messengerReducer';\n\nexport default function Messenger() {\n  const [state, dispatch] = useReducer(messengerReducer, initialState);\n  const message = state.message;\n  const contact = contacts.find((c) => c.id === state.selectedId);\n  return (\n    <div>\n      <ContactList\n        contacts={contacts}\n        selectedId={state.selectedId}\n        dispatch={dispatch}\n      />\n      <Chat\n        key={contact.id}\n        message={message}\n        contact={contact}\n        dispatch={dispatch}\n      />\n    </div>\n  );\n}\n\nconst contacts = [\n  {id: 0, name: 'Taylor', email: 'taylor@mail.com'},\n  {id: 1, name: 'Alice', email: 'alice@mail.com'},\n  {id: 2, name: 'Bob', email: 'bob@mail.com'},\n];",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "logic",
      "reducer",
      "state",
      "component",
      "extracting",
      "into"
    ],
    "code_length": 31,
    "is_duplicate": false,
    "topic": "Extracting State Logic into a Reducer",
    "purpose": "Extracting State Logic into a Reducer",
    "explanation": "Extracting State Logic into a Reducer – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/writing-markup-with-jsx",
    "source_title": "Writing Markup with JSX – React",
    "section": "Writing Markup with JSX",
    "code": "<h1>Hedy Lamarr's Todos</h1>\n<img \n  src=\"https://i.imgur.com/yXOvdOSs.jpg\" \n  alt=\"Hedy Lamarr\" \n  class=\"photo\"\n>\n<ul>\n    <li>Invent new traffic lights\n    <li>Rehearse a movie scene\n    <li>Improve the spectrum technology\n</ul>",
    "code_language": "html/jsx",
    "code_type": "class",
    "tags": [
      "writing",
      "markup",
      "jsx"
    ],
    "code_length": 11,
    "is_duplicate": false,
    "topic": "Writing Markup with JSX",
    "purpose": "Writing Markup with JSX",
    "explanation": "Writing Markup with JSX – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/writing-markup-with-jsx",
    "source_title": "Writing Markup with JSX – React",
    "section": "Writing Markup with JSX",
    "code": "export default function TodoList() {\n  return (\n    // ???\n  )\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "writing",
      "markup",
      "jsx",
      "component"
    ],
    "code_length": 5,
    "is_duplicate": false,
    "topic": "Writing Markup with JSX",
    "purpose": "Writing Markup with JSX",
    "explanation": "Writing Markup with JSX – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/writing-markup-with-jsx",
    "source_title": "Writing Markup with JSX – React",
    "section": "Writing Markup with JSX",
    "code": "export default function TodoList() {\n  return (\n    // This doesn't quite work!\n    <h1>Hedy Lamarr's Todos</h1>\n    <img \n      src=\"https://i.imgur.com/yXOvdOSs.jpg\" \n      alt=\"Hedy Lamarr\" \n      class=\"photo\"\n    >\n    <ul>\n      <li>Invent new traffic lights\n      <li>Rehearse a movie scene\n      <li>Improve the spectrum technology\n    </ul>",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "writing",
      "markup",
      "jsx",
      "component"
    ],
    "code_length": 14,
    "is_duplicate": false,
    "topic": "Writing Markup with JSX",
    "purpose": "Writing Markup with JSX",
    "explanation": "Writing Markup with JSX – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/writing-markup-with-jsx",
    "source_title": "Writing Markup with JSX – React",
    "section": "Writing Markup with JSX",
    "code": "<div>\n  <h1>Hedy Lamarr's Todos</h1>\n  <img \n    src=\"https://i.imgur.com/yXOvdOSs.jpg\" \n    alt=\"Hedy Lamarr\" \n    class=\"photo\"\n  >\n  <ul>\n    ...\n  </ul>\n</div>",
    "code_language": "html/jsx",
    "code_type": "class",
    "tags": [
      "writing",
      "markup",
      "jsx"
    ],
    "code_length": 11,
    "is_duplicate": false,
    "topic": "Writing Markup with JSX",
    "purpose": "Writing Markup with JSX",
    "explanation": "Writing Markup with JSX – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/writing-markup-with-jsx",
    "source_title": "Writing Markup with JSX – React",
    "section": "Writing Markup with JSX",
    "code": "<>\n  <h1>Hedy Lamarr's Todos</h1>\n  <img \n    src=\"https://i.imgur.com/yXOvdOSs.jpg\" \n    alt=\"Hedy Lamarr\" \n    class=\"photo\"\n  >\n  <ul>\n    ...\n  </ul>\n</>",
    "code_language": "html/jsx",
    "code_type": "class",
    "tags": [
      "writing",
      "markup",
      "jsx"
    ],
    "code_length": 11,
    "is_duplicate": false,
    "topic": "Writing Markup with JSX",
    "purpose": "Writing Markup with JSX",
    "explanation": "Writing Markup with JSX – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/writing-markup-with-jsx",
    "source_title": "Writing Markup with JSX – React",
    "section": "Writing Markup with JSX",
    "code": "<>\n  <img \n    src=\"https://i.imgur.com/yXOvdOSs.jpg\" \n    alt=\"Hedy Lamarr\" \n    class=\"photo\"\n   />\n  <ul>\n    <li>Invent new traffic lights</li>\n    <li>Rehearse a movie scene</li>\n    <li>Improve the spectrum technology</li>\n  </ul>\n</>",
    "code_language": "html/jsx",
    "code_type": "class",
    "tags": [
      "writing",
      "markup",
      "jsx"
    ],
    "code_length": 12,
    "is_duplicate": false,
    "topic": "Writing Markup with JSX",
    "purpose": "Writing Markup with JSX",
    "explanation": "Writing Markup with JSX – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/writing-markup-with-jsx",
    "source_title": "Writing Markup with JSX – React",
    "section": "Writing Markup with JSX",
    "code": "<img \n  src=\"https://i.imgur.com/yXOvdOSs.jpg\" \n  alt=\"Hedy Lamarr\" \n  className=\"photo\"\n/>",
    "code_language": "html/jsx",
    "code_type": "class",
    "tags": [
      "writing",
      "markup",
      "jsx"
    ],
    "code_length": 5,
    "is_duplicate": false,
    "topic": "Writing Markup with JSX",
    "purpose": "Writing Markup with JSX",
    "explanation": "Writing Markup with JSX – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/writing-markup-with-jsx",
    "source_title": "Writing Markup with JSX – React",
    "section": "Writing Markup with JSX",
    "code": "export default function TodoList() {\n  return (\n    <>\n      <h1>Hedy Lamarr's Todos</h1>\n      <img \n        src=\"https://i.imgur.com/yXOvdOSs.jpg\" \n        alt=\"Hedy Lamarr\" \n        className=\"photo\" \n      />\n      <ul>\n        <li>Invent new traffic lights</li>\n        <li>Rehearse a movie scene</li>\n        <li>Improve the spectrum technology</li>\n      </ul>\n    </>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "writing",
      "markup",
      "jsx",
      "component"
    ],
    "code_length": 17,
    "is_duplicate": false,
    "topic": "Writing Markup with JSX",
    "purpose": "Writing Markup with JSX",
    "explanation": "Writing Markup with JSX – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/writing-markup-with-jsx",
    "source_title": "Writing Markup with JSX – React",
    "section": "Writing Markup with JSX",
    "code": "export default function Bio() {\n  return (\n    <div class=\"intro\">\n      <h1>Welcome to my website!</h1>\n    </div>\n    <p class=\"summary\">\n      You can find my thoughts here.\n      <br><br>\n      <b>And <i>pictures</b></i> of scientists!\n    </p>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "writing",
      "markup",
      "jsx",
      "component"
    ],
    "code_length": 12,
    "is_duplicate": false,
    "topic": "Writing Markup with JSX",
    "purpose": "Writing Markup with JSX",
    "explanation": "Writing Markup with JSX – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/typescript",
    "source_title": "Using TypeScript – React",
    "section": "Using TypeScript",
    "code": "function MyButton({ title }: { title: string }) {\n  return (\n    <button>{title}</button>\n  );\n}\n\nexport default function MyApp() {\n  return (\n    <div>\n      <h1>Welcome to my app</h1>\n      <MyButton title=\"I'm a button\" />\n    </div>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "using",
      "typescript",
      "component"
    ],
    "code_length": 14,
    "is_duplicate": false,
    "topic": "Using TypeScript",
    "purpose": "Using TypeScript",
    "explanation": "Using TypeScript – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/typescript",
    "source_title": "Using TypeScript – React",
    "section": "Using TypeScript",
    "code": "interface MyButtonProps {\n  /** The text to display inside the button */\n  title: string;\n  /** Whether the button can be interacted with */\n  disabled: boolean;\n}\n\nfunction MyButton({ title, disabled }: MyButtonProps) {\n  return (\n    <button disabled={disabled}>{title}</button>\n  );\n}\n\nexport default function MyApp() {\n  return (\n    <div>\n      <h1>Welcome to my app</h1>\n      <MyButton title=\"I'm a disabled button\" disabled={true}/>\n    </div>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "using",
      "typescript",
      "component"
    ],
    "code_length": 21,
    "is_duplicate": false,
    "topic": "Using TypeScript",
    "purpose": "Using TypeScript",
    "explanation": "Using TypeScript – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/typescript",
    "source_title": "Using TypeScript – React",
    "section": "Using TypeScript",
    "code": "// Infer the type as \"boolean\"\nconst [enabled, setEnabled] = useState(false);",
    "code_language": "unknown",
    "code_type": "snippet",
    "tags": [
      "using",
      "state",
      "typescript"
    ],
    "code_length": 2,
    "is_duplicate": false,
    "topic": "Using TypeScript",
    "purpose": "Using TypeScript",
    "explanation": "Using TypeScript – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/typescript",
    "source_title": "Using TypeScript – React",
    "section": "Using TypeScript",
    "code": "// Explicitly set the type to \"boolean\"\nconst [enabled, setEnabled] = useState<boolean>(false);",
    "code_language": "unknown",
    "code_type": "snippet",
    "tags": [
      "using",
      "state",
      "typescript"
    ],
    "code_length": 2,
    "is_duplicate": false,
    "topic": "Using TypeScript",
    "purpose": "Using TypeScript",
    "explanation": "Using TypeScript – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/typescript",
    "source_title": "Using TypeScript – React",
    "section": "Using TypeScript",
    "code": "type Status = \"idle\" | \"loading\" | \"success\" | \"error\";\n\nconst [status, setStatus] = useState<Status>(\"idle\");",
    "code_language": "unknown",
    "code_type": "snippet",
    "tags": [
      "using",
      "state",
      "typescript"
    ],
    "code_length": 3,
    "is_duplicate": false,
    "topic": "Using TypeScript",
    "purpose": "Using TypeScript",
    "explanation": "Using TypeScript – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/typescript",
    "source_title": "Using TypeScript – React",
    "section": "Using TypeScript",
    "code": "type RequestState =\n  | { status: 'idle' }\n  | { status: 'loading' }\n  | { status: 'success', data: any }\n  | { status: 'error', error: Error };\n\nconst [requestState, setRequestState] = useState<RequestState>({ status: 'idle' });",
    "code_language": "unknown",
    "code_type": "snippet",
    "tags": [
      "using",
      "state",
      "typescript"
    ],
    "code_length": 7,
    "is_duplicate": false,
    "topic": "Using TypeScript",
    "purpose": "Using TypeScript",
    "explanation": "Using TypeScript – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/typescript",
    "source_title": "Using TypeScript – React",
    "section": "Using TypeScript",
    "code": "import {useReducer} from 'react';\n\ninterface State {\n   count: number\n};\n\ntype CounterAction =\n  | { type: \"reset\" }\n  | { type: \"setCount\"; value: State[\"count\"] }\n\nconst initialState: State = { count: 0 };\n\nfunction stateReducer(state: State, action: CounterAction): State {\n  switch (action.type) {\n    case \"reset\":\n      return initialState;\n    case \"setCount\":\n      return { ...state, count: action.value };\n    default:\n      throw new Error(\"Unknown action\");\n  }\n}\n\nexport default function App() {\n  const [state, dispatch] = useReducer(stateReducer, initialState);\n\n  const addFive = () => dispatch({ type: \"setCount\", value: state.count + 5 });\n  const reset = () => dispatch({ type: \"reset\" });\n\n  return (\n    <div>\n      <h1>Welcome to my counter</h1>\n\n      <p>Count: {state.count}</p>\n      <button onClick={addFive}>Add 5</button>\n      <button onClick={reset}>Reset</button>\n    </div>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "using",
      "typescript",
      "reducer",
      "component"
    ],
    "code_length": 39,
    "is_duplicate": false,
    "topic": "Using TypeScript",
    "purpose": "Using TypeScript",
    "explanation": "Using TypeScript – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/typescript",
    "source_title": "Using TypeScript – React",
    "section": "Using TypeScript",
    "code": "import { stateReducer, State } from './your-reducer-implementation';\n\nconst initialState = { count: 0 };\n\nexport default function App() {\n  const [state, dispatch] = useReducer<State>(stateReducer, initialState);\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "using",
      "typescript",
      "reducer",
      "component"
    ],
    "code_length": 7,
    "is_duplicate": false,
    "topic": "Using TypeScript",
    "purpose": "Using TypeScript",
    "explanation": "Using TypeScript – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/typescript",
    "source_title": "Using TypeScript – React",
    "section": "Using TypeScript",
    "code": "import { createContext, useContext, useState } from 'react';\n\ntype Theme = \"light\" | \"dark\" | \"system\";\nconst ThemeContext = createContext<Theme>(\"system\");\n\nconst useGetTheme = () => useContext(ThemeContext);\n\nexport default function MyApp() {\n  const [theme, setTheme] = useState<Theme>('light');\n\n  return (\n    <ThemeContext value={theme}>\n      <MyComponent />\n    </ThemeContext>\n  )\n}\n\nfunction MyComponent() {\n  const theme = useGetTheme();\n\n  return (\n    <div>\n      <p>Current theme: {theme}</p>\n    </div>\n  )\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "using",
      "state",
      "typescript",
      "component"
    ],
    "code_length": 26,
    "is_duplicate": false,
    "topic": "Using TypeScript",
    "purpose": "Using TypeScript",
    "explanation": "Using TypeScript – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/typescript",
    "source_title": "Using TypeScript – React",
    "section": "Using TypeScript",
    "code": "import { createContext, useContext, useState, useMemo } from 'react';\n\n// This is a simpler example, but you can imagine a more complex object here\ntype ComplexObject = {\n  kind: string\n};\n\n// The context is created with `| null` in the type, to accurately reflect the default value.\nconst Context = createContext<ComplexObject | null>(null);\n\n// The `| null` will be removed via the check in the Hook.\nconst useGetComplexObject = () => {\n  const object = useContext(Context);\n  if (!object) { throw new Error(\"useGetComplexObject must be used within a Provider\") }\n  return object;\n}\n\nexport default function MyApp() {\n  const object = useMemo(() => ({ kind: \"complex\" }), []);\n\n  return (\n    <Context value={object}>\n      <MyComponent />\n    </Context>\n  )\n}\n\nfunction MyComponent() {\n  const object = useGetComplexObject();\n\n  return (\n    <div>\n      <p>Current object: {object.kind}</p>\n    </div>\n  )\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "using",
      "state",
      "typescript",
      "component"
    ],
    "code_length": 36,
    "is_duplicate": false,
    "topic": "Using TypeScript",
    "purpose": "Using TypeScript",
    "explanation": "Using TypeScript – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/typescript",
    "source_title": "Using TypeScript – React",
    "section": "Using TypeScript",
    "code": "// The type of visibleTodos is inferred from the return value of filterTodos\nconst visibleTodos = useMemo(() => filterTodos(todos, tab), [todos, tab]);",
    "code_language": "unknown",
    "code_type": "snippet",
    "tags": [
      "using",
      "typescript"
    ],
    "code_length": 2,
    "is_duplicate": false,
    "topic": "Using TypeScript",
    "purpose": "Using TypeScript",
    "explanation": "Using TypeScript – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/typescript",
    "source_title": "Using TypeScript – React",
    "section": "Using TypeScript",
    "code": "const handleClick = useCallback(() => {\n  // ...\n}, [todos]);",
    "code_language": "unknown",
    "code_type": "snippet",
    "tags": [
      "using",
      "typescript"
    ],
    "code_length": 3,
    "is_duplicate": false,
    "topic": "Using TypeScript",
    "purpose": "Using TypeScript",
    "explanation": "Using TypeScript – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/typescript",
    "source_title": "Using TypeScript – React",
    "section": "Using TypeScript",
    "code": "import { useState, useCallback } from 'react';\n\nexport default function Form() {\n  const [value, setValue] = useState(\"Change me\");\n\n  const handleChange = useCallback<React.ChangeEventHandler<HTMLInputElement>>((event) => {\n    setValue(event.currentTarget.value);\n  }, [setValue])\n\n  return (\n    <>\n      <input value={value} onChange={handleChange} />\n      <p>Value: {value}</p>\n    </>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "using",
      "state",
      "typescript",
      "component"
    ],
    "code_length": 16,
    "is_duplicate": false,
    "topic": "Using TypeScript",
    "purpose": "Using TypeScript",
    "explanation": "Using TypeScript – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/typescript",
    "source_title": "Using TypeScript – React",
    "section": "Using TypeScript",
    "code": "import { useState } from 'react';\n\nexport default function Form() {\n  const [value, setValue] = useState(\"Change me\");\n\n  function handleChange(event: React.ChangeEvent<HTMLInputElement>) {\n    setValue(event.currentTarget.value);\n  }\n\n  return (\n    <>\n      <input value={value} onChange={handleChange} />\n      <p>Value: {value}</p>\n    </>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "using",
      "state",
      "typescript",
      "component"
    ],
    "code_length": 16,
    "is_duplicate": false,
    "topic": "Using TypeScript",
    "purpose": "Using TypeScript",
    "explanation": "Using TypeScript – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/typescript",
    "source_title": "Using TypeScript – React",
    "section": "Using TypeScript",
    "code": "interface ModalRendererProps {\n  title: string;\n  children: React.ReactNode;\n}",
    "code_language": "unknown",
    "code_type": "snippet",
    "tags": [
      "using",
      "typescript"
    ],
    "code_length": 4,
    "is_duplicate": false,
    "topic": "Using TypeScript",
    "purpose": "Using TypeScript",
    "explanation": "Using TypeScript – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/typescript",
    "source_title": "Using TypeScript – React",
    "section": "Using TypeScript",
    "code": "interface ModalRendererProps {\n  title: string;\n  children: React.ReactElement;\n}",
    "code_language": "unknown",
    "code_type": "snippet",
    "tags": [
      "using",
      "typescript"
    ],
    "code_length": 4,
    "is_duplicate": false,
    "topic": "Using TypeScript",
    "purpose": "Using TypeScript",
    "explanation": "Using TypeScript – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/typescript",
    "source_title": "Using TypeScript – React",
    "section": "Using TypeScript",
    "code": "interface MyComponentProps {\n  style: React.CSSProperties;\n}",
    "code_language": "unknown",
    "code_type": "snippet",
    "tags": [
      "using",
      "typescript"
    ],
    "code_length": 3,
    "is_duplicate": false,
    "topic": "Using TypeScript",
    "purpose": "Using TypeScript",
    "explanation": "Using TypeScript – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/react-developer-tools",
    "source_title": "React Developer Tools – React",
    "section": "React Developer Tools",
    "code": "# Yarn\nyarn global add react-devtools\n\n# Npm\nnpm install -g react-devtools",
    "code_language": "unknown",
    "code_type": "snippet",
    "tags": [
      "developer",
      "tools"
    ],
    "code_length": 5,
    "is_duplicate": false,
    "topic": "React Developer Tools",
    "purpose": "React Developer Tools",
    "explanation": "React Developer Tools – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/react-developer-tools",
    "source_title": "React Developer Tools – React",
    "section": "React Developer Tools",
    "code": "react-devtools",
    "code_language": "unknown",
    "code_type": "snippet",
    "tags": [
      "developer",
      "tools"
    ],
    "code_length": 1,
    "is_duplicate": false,
    "topic": "React Developer Tools",
    "purpose": "React Developer Tools",
    "explanation": "React Developer Tools – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/react-developer-tools",
    "source_title": "React Developer Tools – React",
    "section": "React Developer Tools",
    "code": "<html>\n  <head>\n    <script src=\"http://localhost:8097\"></script>",
    "code_language": "html/jsx",
    "code_type": "snippet",
    "tags": [
      "developer",
      "tools"
    ],
    "code_length": 3,
    "is_duplicate": false,
    "topic": "React Developer Tools",
    "purpose": "React Developer Tools",
    "explanation": "React Developer Tools – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/escape-hatches",
    "source_title": "Escape Hatches – React",
    "section": "Escape Hatches",
    "code": "const ref = useRef(0);",
    "code_language": "unknown",
    "code_type": "snippet",
    "tags": [
      "escape",
      "hatches"
    ],
    "code_length": 1,
    "is_duplicate": false,
    "topic": "Escape Hatches",
    "purpose": "Escape Hatches",
    "explanation": "Escape Hatches – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/escape-hatches",
    "source_title": "Escape Hatches – React",
    "section": "Escape Hatches",
    "code": "import { useRef } from 'react';\n\nexport default function Form() {\n  const inputRef = useRef(null);\n\n  function handleClick() {\n    inputRef.current.focus();\n  }\n\n  return (\n    <>\n      <input ref={inputRef} />\n      <button onClick={handleClick}>\n        Focus the input\n      </button>\n    </>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "escape",
      "hatches",
      "component"
    ],
    "code_length": 18,
    "is_duplicate": true,
    "topic": "Escape Hatches",
    "purpose": "Escape Hatches",
    "explanation": "Escape Hatches – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/escape-hatches",
    "source_title": "Escape Hatches – React",
    "section": "Escape Hatches",
    "code": "import { useState, useRef, useEffect } from 'react';\n\nfunction VideoPlayer({ src, isPlaying }) {\n  const ref = useRef(null);\n\n  useEffect(() => {\n    if (isPlaying) {\n      ref.current.play();\n    } else {\n      ref.current.pause();\n    }\n  }, [isPlaying]);\n\n  return <video ref={ref} src={src} loop playsInline />;\n}\n\nexport default function App() {\n  const [isPlaying, setIsPlaying] = useState(false);\n  return (\n    <>\n      <button onClick={() => setIsPlaying(!isPlaying)}>\n        {isPlaying ? 'Pause' : 'Play'}\n      </button>\n      <VideoPlayer\n        isPlaying={isPlaying}\n        src=\"https://interactive-examples.mdn.mozilla.net/media/cc0-videos/flower.mp4\"\n      />\n    </>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "effect",
      "escape",
      "hatches",
      "state",
      "component"
    ],
    "code_length": 30,
    "is_duplicate": false,
    "topic": "Escape Hatches",
    "purpose": "Escape Hatches",
    "explanation": "Escape Hatches – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/escape-hatches",
    "source_title": "Escape Hatches – React",
    "section": "Escape Hatches",
    "code": "import { useState, useEffect } from 'react';\nimport { createConnection } from './chat.js';\n\nexport default function ChatRoom() {\n  useEffect(() => {\n    const connection = createConnection();\n    connection.connect();\n    return () => connection.disconnect();\n  }, []);\n  return <h1>Welcome to the chat!</h1>;\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "effect",
      "escape",
      "hatches",
      "state",
      "component"
    ],
    "code_length": 11,
    "is_duplicate": true,
    "topic": "Escape Hatches",
    "purpose": "Escape Hatches",
    "explanation": "Escape Hatches – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/escape-hatches",
    "source_title": "Escape Hatches – React",
    "section": "Escape Hatches",
    "code": "function Form() {\n  const [firstName, setFirstName] = useState('Taylor');\n  const [lastName, setLastName] = useState('Swift');\n\n  // 🔴 Avoid: redundant state and unnecessary Effect\n  const [fullName, setFullName] = useState('');\n  useEffect(() => {\n    setFullName(firstName + ' ' + lastName);\n  }, [firstName, lastName]);\n  // ...\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "effect",
      "escape",
      "state",
      "hatches"
    ],
    "code_length": 11,
    "is_duplicate": false,
    "topic": "Escape Hatches",
    "purpose": "Escape Hatches",
    "explanation": "Escape Hatches – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/escape-hatches",
    "source_title": "Escape Hatches – React",
    "section": "Escape Hatches",
    "code": "function Form() {\n  const [firstName, setFirstName] = useState('Taylor');\n  const [lastName, setLastName] = useState('Swift');\n  // ✅ Good: calculated during rendering\n  const fullName = firstName + ' ' + lastName;\n  // ...\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "escape",
      "state",
      "hatches"
    ],
    "code_length": 7,
    "is_duplicate": false,
    "topic": "Escape Hatches",
    "purpose": "Escape Hatches",
    "explanation": "Escape Hatches – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/escape-hatches",
    "source_title": "Escape Hatches – React",
    "section": "Escape Hatches",
    "code": "import { useState, useEffect } from 'react';\nimport { createConnection } from './chat.js';\n\nconst serverUrl = 'https://localhost:1234';\n\nfunction ChatRoom({ roomId }) {\n  useEffect(() => {\n    const connection = createConnection(serverUrl, roomId);\n    connection.connect();\n    return () => connection.disconnect();\n  }, [roomId]);\n\n  return <h1>Welcome to the {roomId} room!</h1>;\n}\n\nexport default function App() {\n  const [roomId, setRoomId] = useState('general');\n  return (\n    <>\n      <label>\n        Choose the chat room:{' '}\n        <select\n          value={roomId}\n          onChange={e => setRoomId(e.target.value)}\n        >\n          <option value=\"general\">general</option>\n          <option value=\"travel\">travel</option>\n          <option value=\"music\">music</option>\n        </select>\n      </label>\n      <hr />\n      <ChatRoom roomId={roomId} />\n    </>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "effect",
      "escape",
      "hatches",
      "state",
      "component"
    ],
    "code_length": 35,
    "is_duplicate": false,
    "topic": "Escape Hatches",
    "purpose": "Escape Hatches",
    "explanation": "Escape Hatches – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/escape-hatches",
    "source_title": "Escape Hatches – React",
    "section": "Escape Hatches",
    "code": "import { useState, useEffect } from 'react';\nimport { createConnection, sendMessage } from './chat.js';\nimport { showNotification } from './notifications.js';\n\nconst serverUrl = 'https://localhost:1234';\n\nfunction ChatRoom({ roomId, theme }) {\n  useEffect(() => {\n    const connection = createConnection(serverUrl, roomId);\n    connection.on('connected', () => {\n      showNotification('Connected!', theme);\n    });\n    connection.connect();\n    return () => connection.disconnect();\n  }, [roomId, theme]);\n\n  return <h1>Welcome to the {roomId} room!</h1>\n}\n\nexport default function App() {\n  const [roomId, setRoomId] = useState('general');\n  const [isDark, setIsDark] = useState(false);\n  return (\n    <>\n      <label>\n        Choose the chat room:{' '}\n        <select\n          value={roomId}\n          onChange={e => setRoomId(e.target.value)}\n        >\n          <option value=\"general\">general</option>\n          <option value=\"travel\">travel</option>\n          <option value=\"music\">music</option>\n        </select>\n      </label>\n      <label>\n        <input\n          type=\"checkbox\"\n          checked={isDark}\n          onChange={e => setIsDark(e.target.checked)}\n        />\n        Use dark theme\n      </label>\n      <hr />\n      <ChatRoom\n        roomId={roomId}\n        theme={isDark ? 'dark' : 'light'} \n      />\n    </>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "effect",
      "escape",
      "hatches",
      "state",
      "component"
    ],
    "code_length": 51,
    "is_duplicate": false,
    "topic": "Escape Hatches",
    "purpose": "Escape Hatches",
    "explanation": "Escape Hatches – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/escape-hatches",
    "source_title": "Escape Hatches – React",
    "section": "Escape Hatches",
    "code": "import { useState, useEffect } from 'react';\nimport { experimental_useEffectEvent as useEffectEvent } from 'react';\nimport { createConnection, sendMessage } from './chat.js';\nimport { showNotification } from './notifications.js';\n\nconst serverUrl = 'https://localhost:1234';\n\nfunction ChatRoom({ roomId, theme }) {\n  const onConnected = useEffectEvent(() => {\n    showNotification('Connected!', theme);\n  });\n\n  useEffect(() => {\n    const connection = createConnection(serverUrl, roomId);\n    connection.on('connected', () => {\n      onConnected();\n    });\n    connection.connect();\n    return () => connection.disconnect();\n  }, [roomId]);\n\n  return <h1>Welcome to the {roomId} room!</h1>\n}\n\nexport default function App() {\n  const [roomId, setRoomId] = useState('general');\n  const [isDark, setIsDark] = useState(false);\n  return (\n    <>\n      <label>\n        Choose the chat room:{' '}\n        <select\n          value={roomId}\n          onChange={e => setRoomId(e.target.value)}\n        >\n          <option value=\"general\">general</option>\n          <option value=\"travel\">travel</option>\n          <option value=\"music\">music</option>\n        </select>\n      </label>\n      <label>\n        <input\n          type=\"checkbox\"\n          checked={isDark}\n          onChange={e => setIsDark(e.target.checked)}\n        />\n        Use dark theme\n      </label>\n      <hr />\n      <ChatRoom\n        roomId={roomId}\n        theme={isDark ? 'dark' : 'light'} \n      />\n    </>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "effect",
      "escape",
      "hatches",
      "state",
      "component"
    ],
    "code_length": 56,
    "is_duplicate": false,
    "topic": "Escape Hatches",
    "purpose": "Escape Hatches",
    "explanation": "Escape Hatches – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/escape-hatches",
    "source_title": "Escape Hatches – React",
    "section": "Escape Hatches",
    "code": "import { useState, useEffect } from 'react';\nimport { createConnection } from './chat.js';\n\nconst serverUrl = 'https://localhost:1234';\n\nfunction ChatRoom({ roomId }) {\n  const [message, setMessage] = useState('');\n\n  const options = {\n    serverUrl: serverUrl,\n    roomId: roomId\n  };\n\n  useEffect(() => {\n    const connection = createConnection(options);\n    connection.connect();\n    return () => connection.disconnect();\n  }, [options]);\n\n  return (\n    <>\n      <h1>Welcome to the {roomId} room!</h1>\n      <input value={message} onChange={e => setMessage(e.target.value)} />\n    </>\n  );\n}\n\nexport default function App() {\n  const [roomId, setRoomId] = useState('general');\n  return (\n    <>\n      <label>\n        Choose the chat room:{' '}\n        <select\n          value={roomId}\n          onChange={e => setRoomId(e.target.value)}\n        >\n          <option value=\"general\">general</option>\n          <option value=\"travel\">travel</option>\n          <option value=\"music\">music</option>\n        </select>\n      </label>\n      <hr />\n      <ChatRoom roomId={roomId} />\n    </>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "effect",
      "escape",
      "hatches",
      "state",
      "component"
    ],
    "code_length": 47,
    "is_duplicate": false,
    "topic": "Escape Hatches",
    "purpose": "Escape Hatches",
    "explanation": "Escape Hatches – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/escape-hatches",
    "source_title": "Escape Hatches – React",
    "section": "Escape Hatches",
    "code": "import { useState, useEffect } from 'react';\nimport { createConnection } from './chat.js';\n\nconst serverUrl = 'https://localhost:1234';\n\nfunction ChatRoom({ roomId }) {\n  const [message, setMessage] = useState('');\n\n  useEffect(() => {\n    const options = {\n      serverUrl: serverUrl,\n      roomId: roomId\n    };\n    const connection = createConnection(options);\n    connection.connect();\n    return () => connection.disconnect();\n  }, [roomId]);\n\n  return (\n    <>\n      <h1>Welcome to the {roomId} room!</h1>\n      <input value={message} onChange={e => setMessage(e.target.value)} />\n    </>\n  );\n}\n\nexport default function App() {\n  const [roomId, setRoomId] = useState('general');\n  return (\n    <>\n      <label>\n        Choose the chat room:{' '}\n        <select\n          value={roomId}\n          onChange={e => setRoomId(e.target.value)}\n        >\n          <option value=\"general\">general</option>\n          <option value=\"travel\">travel</option>\n          <option value=\"music\">music</option>\n        </select>\n      </label>\n      <hr />\n      <ChatRoom roomId={roomId} />\n    </>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "effect",
      "escape",
      "hatches",
      "state",
      "component"
    ],
    "code_length": 46,
    "is_duplicate": false,
    "topic": "Escape Hatches",
    "purpose": "Escape Hatches",
    "explanation": "Escape Hatches – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/escape-hatches",
    "source_title": "Escape Hatches – React",
    "section": "Escape Hatches",
    "code": "import { usePointerPosition } from './usePointerPosition.js';\nimport { useDelayedValue } from './useDelayedValue.js';\n\nexport default function Canvas() {\n  const pos1 = usePointerPosition();\n  const pos2 = useDelayedValue(pos1, 100);\n  const pos3 = useDelayedValue(pos2, 200);\n  const pos4 = useDelayedValue(pos3, 100);\n  const pos5 = useDelayedValue(pos4, 50);\n  return (\n    <>\n      <Dot position={pos1} opacity={1} />\n      <Dot position={pos2} opacity={0.8} />\n      <Dot position={pos3} opacity={0.6} />\n      <Dot position={pos4} opacity={0.4} />\n      <Dot position={pos5} opacity={0.2} />\n    </>\n  );\n}\n\nfunction Dot({ position, opacity }) {\n  return (\n    <div style={{\n      position: 'absolute',\n      backgroundColor: 'pink',\n      borderRadius: '50%',\n      opacity,\n      transform: `translate(${position.x}px, ${position.y}px)`,\n      pointerEvents: 'none',\n      left: -20,\n      top: -20,\n      width: 40,\n      height: 40,\n    }} />\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "escape",
      "hatches",
      "component"
    ],
    "code_length": 36,
    "is_duplicate": false,
    "topic": "Escape Hatches",
    "purpose": "Escape Hatches",
    "explanation": "Escape Hatches – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/state-as-a-snapshot",
    "source_title": "State as a Snapshot – React",
    "section": "State as a Snapshot",
    "code": "import { useState } from 'react';\n\nexport default function Counter() {\n  const [number, setNumber] = useState(0);\n\n  return (\n    <>\n      <h1>{number}</h1>\n      <button onClick={() => {\n        setNumber(number + 1);\n        setNumber(number + 1);\n        setNumber(number + 1);\n      }}>+3</button>\n    </>\n  )\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "snapshot",
      "state",
      "component"
    ],
    "code_length": 16,
    "is_duplicate": false,
    "topic": "State as a Snapshot",
    "purpose": "State as a Snapshot",
    "explanation": "State as a Snapshot – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/state-as-a-snapshot",
    "source_title": "State as a Snapshot – React",
    "section": "State as a Snapshot",
    "code": "<button onClick={() => {\n  setNumber(number + 1);\n  setNumber(number + 1);\n  setNumber(number + 1);\n}}>+3</button>",
    "code_language": "html/jsx",
    "code_type": "snippet",
    "tags": [
      "snapshot",
      "state"
    ],
    "code_length": 5,
    "is_duplicate": false,
    "topic": "State as a Snapshot",
    "purpose": "State as a Snapshot",
    "explanation": "State as a Snapshot – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/state-as-a-snapshot",
    "source_title": "State as a Snapshot – React",
    "section": "State as a Snapshot",
    "code": "<button onClick={() => {\n  setNumber(0 + 1);\n  setNumber(0 + 1);\n  setNumber(0 + 1);\n}}>+3</button>",
    "code_language": "html/jsx",
    "code_type": "snippet",
    "tags": [
      "snapshot",
      "state"
    ],
    "code_length": 5,
    "is_duplicate": false,
    "topic": "State as a Snapshot",
    "purpose": "State as a Snapshot",
    "explanation": "State as a Snapshot – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/state-as-a-snapshot",
    "source_title": "State as a Snapshot – React",
    "section": "State as a Snapshot",
    "code": "<button onClick={() => {\n  setNumber(1 + 1);\n  setNumber(1 + 1);\n  setNumber(1 + 1);\n}}>+3</button>",
    "code_language": "html/jsx",
    "code_type": "snippet",
    "tags": [
      "snapshot",
      "state"
    ],
    "code_length": 5,
    "is_duplicate": false,
    "topic": "State as a Snapshot",
    "purpose": "State as a Snapshot",
    "explanation": "State as a Snapshot – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/state-as-a-snapshot",
    "source_title": "State as a Snapshot – React",
    "section": "State as a Snapshot",
    "code": "import { useState } from 'react';\n\nexport default function Counter() {\n  const [number, setNumber] = useState(0);\n\n  return (\n    <>\n      <h1>{number}</h1>\n      <button onClick={() => {\n        setNumber(number + 5);\n        alert(number);\n      }}>+5</button>\n    </>\n  )\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "snapshot",
      "state",
      "component"
    ],
    "code_length": 15,
    "is_duplicate": false,
    "topic": "State as a Snapshot",
    "purpose": "State as a Snapshot",
    "explanation": "State as a Snapshot – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/state-as-a-snapshot",
    "source_title": "State as a Snapshot – React",
    "section": "State as a Snapshot",
    "code": "setNumber(0 + 5);\nalert(0);",
    "code_language": "unknown",
    "code_type": "snippet",
    "tags": [
      "snapshot",
      "state"
    ],
    "code_length": 2,
    "is_duplicate": false,
    "topic": "State as a Snapshot",
    "purpose": "State as a Snapshot",
    "explanation": "State as a Snapshot – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/state-as-a-snapshot",
    "source_title": "State as a Snapshot – React",
    "section": "State as a Snapshot",
    "code": "import { useState } from 'react';\n\nexport default function Counter() {\n  const [number, setNumber] = useState(0);\n\n  return (\n    <>\n      <h1>{number}</h1>\n      <button onClick={() => {\n        setNumber(number + 5);\n        setTimeout(() => {\n          alert(number);\n        }, 3000);\n      }}>+5</button>\n    </>\n  )\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "snapshot",
      "state",
      "component"
    ],
    "code_length": 17,
    "is_duplicate": false,
    "topic": "State as a Snapshot",
    "purpose": "State as a Snapshot",
    "explanation": "State as a Snapshot – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/state-as-a-snapshot",
    "source_title": "State as a Snapshot – React",
    "section": "State as a Snapshot",
    "code": "setNumber(0 + 5);\nsetTimeout(() => {\n  alert(0);\n}, 3000);",
    "code_language": "unknown",
    "code_type": "snippet",
    "tags": [
      "snapshot",
      "state"
    ],
    "code_length": 4,
    "is_duplicate": false,
    "topic": "State as a Snapshot",
    "purpose": "State as a Snapshot",
    "explanation": "State as a Snapshot – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/state-as-a-snapshot",
    "source_title": "State as a Snapshot – React",
    "section": "State as a Snapshot",
    "code": "import { useState } from 'react';\n\nexport default function Form() {\n  const [to, setTo] = useState('Alice');\n  const [message, setMessage] = useState('Hello');\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    setTimeout(() => {\n      alert(`You said ${message} to ${to}`);\n    }, 5000);\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <label>\n        To:{' '}\n        <select\n          value={to}\n          onChange={e => setTo(e.target.value)}>\n          <option value=\"Alice\">Alice</option>\n          <option value=\"Bob\">Bob</option>\n        </select>\n      </label>\n      <textarea\n        placeholder=\"Message\"\n        value={message}\n        onChange={e => setMessage(e.target.value)}\n      />\n      <button type=\"submit\">Send</button>\n    </form>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "snapshot",
      "state",
      "component"
    ],
    "code_length": 33,
    "is_duplicate": false,
    "topic": "State as a Snapshot",
    "purpose": "State as a Snapshot",
    "explanation": "State as a Snapshot – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/state-as-a-snapshot",
    "source_title": "State as a Snapshot – React",
    "section": "State as a Snapshot",
    "code": "import { useState } from 'react';\n\nexport default function TrafficLight() {\n  const [walk, setWalk] = useState(true);\n\n  function handleClick() {\n    setWalk(!walk);\n  }\n\n  return (\n    <>\n      <button onClick={handleClick}>\n        Change to {walk ? 'Stop' : 'Walk'}\n      </button>\n      <h1 style={{\n        color: walk ? 'darkgreen' : 'darkred'\n      }}>\n        {walk ? 'Walk' : 'Stop'}\n      </h1>\n    </>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "snapshot",
      "state",
      "component"
    ],
    "code_length": 22,
    "is_duplicate": false,
    "topic": "State as a Snapshot",
    "purpose": "State as a Snapshot",
    "explanation": "State as a Snapshot – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/passing-data-deeply-with-context",
    "source_title": "Passing Data Deeply with Context – React",
    "section": "Passing Data Deeply with Context",
    "code": "import Heading from './Heading.js';\nimport Section from './Section.js';\n\nexport default function Page() {\n  return (\n    <Section>\n      <Heading level={1}>Title</Heading>\n      <Heading level={2}>Heading</Heading>\n      <Heading level={3}>Sub-heading</Heading>\n      <Heading level={4}>Sub-sub-heading</Heading>\n      <Heading level={5}>Sub-sub-sub-heading</Heading>\n      <Heading level={6}>Sub-sub-sub-sub-heading</Heading>\n    </Section>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "passing",
      "data",
      "component",
      "context",
      "deeply"
    ],
    "code_length": 15,
    "is_duplicate": false,
    "topic": "Passing Data Deeply with Context",
    "purpose": "Passing Data Deeply with Context",
    "explanation": "Passing Data Deeply with Context – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/passing-data-deeply-with-context",
    "source_title": "Passing Data Deeply with Context – React",
    "section": "Passing Data Deeply with Context",
    "code": "import Heading from './Heading.js';\nimport Section from './Section.js';\n\nexport default function Page() {\n  return (\n    <Section>\n      <Heading level={1}>Title</Heading>\n      <Section>\n        <Heading level={2}>Heading</Heading>\n        <Heading level={2}>Heading</Heading>\n        <Heading level={2}>Heading</Heading>\n        <Section>\n          <Heading level={3}>Sub-heading</Heading>\n          <Heading level={3}>Sub-heading</Heading>\n          <Heading level={3}>Sub-heading</Heading>\n          <Section>\n            <Heading level={4}>Sub-sub-heading</Heading>\n            <Heading level={4}>Sub-sub-heading</Heading>\n            <Heading level={4}>Sub-sub-heading</Heading>\n          </Section>\n        </Section>\n      </Section>\n    </Section>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "passing",
      "data",
      "component",
      "context",
      "deeply"
    ],
    "code_length": 25,
    "is_duplicate": false,
    "topic": "Passing Data Deeply with Context",
    "purpose": "Passing Data Deeply with Context",
    "explanation": "Passing Data Deeply with Context – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/passing-data-deeply-with-context",
    "source_title": "Passing Data Deeply with Context – React",
    "section": "Passing Data Deeply with Context",
    "code": "<Section>\n  <Heading level={3}>About</Heading>\n  <Heading level={3}>Photos</Heading>\n  <Heading level={3}>Videos</Heading>\n</Section>",
    "code_language": "html/jsx",
    "code_type": "snippet",
    "tags": [
      "passing",
      "deeply",
      "context",
      "data"
    ],
    "code_length": 5,
    "is_duplicate": false,
    "topic": "Passing Data Deeply with Context",
    "purpose": "Passing Data Deeply with Context",
    "explanation": "Passing Data Deeply with Context – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/passing-data-deeply-with-context",
    "source_title": "Passing Data Deeply with Context – React",
    "section": "Passing Data Deeply with Context",
    "code": "<Section level={3}>\n  <Heading>About</Heading>\n  <Heading>Photos</Heading>\n  <Heading>Videos</Heading>\n</Section>",
    "code_language": "html/jsx",
    "code_type": "snippet",
    "tags": [
      "passing",
      "deeply",
      "context",
      "data"
    ],
    "code_length": 5,
    "is_duplicate": false,
    "topic": "Passing Data Deeply with Context",
    "purpose": "Passing Data Deeply with Context",
    "explanation": "Passing Data Deeply with Context – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/passing-data-deeply-with-context",
    "source_title": "Passing Data Deeply with Context – React",
    "section": "Passing Data Deeply with Context",
    "code": "import { createContext } from 'react';\n\nexport const LevelContext = createContext(1);",
    "code_language": "javascript/jsx",
    "code_type": "import",
    "tags": [
      "passing",
      "deeply",
      "context",
      "data"
    ],
    "code_length": 3,
    "is_duplicate": false,
    "topic": "Passing Data Deeply with Context",
    "purpose": "Passing Data Deeply with Context",
    "explanation": "Passing Data Deeply with Context – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/passing-data-deeply-with-context",
    "source_title": "Passing Data Deeply with Context – React",
    "section": "Passing Data Deeply with Context",
    "code": "import { useContext } from 'react';\nimport { LevelContext } from './LevelContext.js';",
    "code_language": "javascript/jsx",
    "code_type": "import",
    "tags": [
      "passing",
      "deeply",
      "context",
      "data"
    ],
    "code_length": 2,
    "is_duplicate": false,
    "topic": "Passing Data Deeply with Context",
    "purpose": "Passing Data Deeply with Context",
    "explanation": "Passing Data Deeply with Context – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/passing-data-deeply-with-context",
    "source_title": "Passing Data Deeply with Context – React",
    "section": "Passing Data Deeply with Context",
    "code": "export default function Heading({ level, children }) {\n  // ...\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "passing",
      "data",
      "component",
      "context",
      "deeply"
    ],
    "code_length": 3,
    "is_duplicate": false,
    "topic": "Passing Data Deeply with Context",
    "purpose": "Passing Data Deeply with Context",
    "explanation": "Passing Data Deeply with Context – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/passing-data-deeply-with-context",
    "source_title": "Passing Data Deeply with Context – React",
    "section": "Passing Data Deeply with Context",
    "code": "export default function Heading({ children }) {\n  const level = useContext(LevelContext);\n  // ...\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "passing",
      "data",
      "component",
      "context",
      "deeply"
    ],
    "code_length": 4,
    "is_duplicate": false,
    "topic": "Passing Data Deeply with Context",
    "purpose": "Passing Data Deeply with Context",
    "explanation": "Passing Data Deeply with Context – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/passing-data-deeply-with-context",
    "source_title": "Passing Data Deeply with Context – React",
    "section": "Passing Data Deeply with Context",
    "code": "<Section>\n  <Heading level={4}>Sub-sub-heading</Heading>\n  <Heading level={4}>Sub-sub-heading</Heading>\n  <Heading level={4}>Sub-sub-heading</Heading>\n</Section>",
    "code_language": "html/jsx",
    "code_type": "snippet",
    "tags": [
      "passing",
      "deeply",
      "context",
      "data"
    ],
    "code_length": 5,
    "is_duplicate": false,
    "topic": "Passing Data Deeply with Context",
    "purpose": "Passing Data Deeply with Context",
    "explanation": "Passing Data Deeply with Context – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/passing-data-deeply-with-context",
    "source_title": "Passing Data Deeply with Context – React",
    "section": "Passing Data Deeply with Context",
    "code": "<Section level={4}>\n  <Heading>Sub-sub-heading</Heading>\n  <Heading>Sub-sub-heading</Heading>\n  <Heading>Sub-sub-heading</Heading>\n</Section>",
    "code_language": "html/jsx",
    "code_type": "snippet",
    "tags": [
      "passing",
      "deeply",
      "context",
      "data"
    ],
    "code_length": 5,
    "is_duplicate": false,
    "topic": "Passing Data Deeply with Context",
    "purpose": "Passing Data Deeply with Context",
    "explanation": "Passing Data Deeply with Context – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/passing-data-deeply-with-context",
    "source_title": "Passing Data Deeply with Context – React",
    "section": "Passing Data Deeply with Context",
    "code": "import Heading from './Heading.js';\nimport Section from './Section.js';\n\nexport default function Page() {\n  return (\n    <Section level={1}>\n      <Heading>Title</Heading>\n      <Section level={2}>\n        <Heading>Heading</Heading>\n        <Heading>Heading</Heading>\n        <Heading>Heading</Heading>\n        <Section level={3}>\n          <Heading>Sub-heading</Heading>\n          <Heading>Sub-heading</Heading>\n          <Heading>Sub-heading</Heading>\n          <Section level={4}>\n            <Heading>Sub-sub-heading</Heading>\n            <Heading>Sub-sub-heading</Heading>\n            <Heading>Sub-sub-heading</Heading>\n          </Section>\n        </Section>\n      </Section>\n    </Section>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "passing",
      "data",
      "component",
      "context",
      "deeply"
    ],
    "code_length": 25,
    "is_duplicate": false,
    "topic": "Passing Data Deeply with Context",
    "purpose": "Passing Data Deeply with Context",
    "explanation": "Passing Data Deeply with Context – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/passing-data-deeply-with-context",
    "source_title": "Passing Data Deeply with Context – React",
    "section": "Passing Data Deeply with Context",
    "code": "export default function Section({ children }) {\n  return (\n    <section className=\"section\">\n      {children}\n    </section>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "passing",
      "data",
      "component",
      "context",
      "deeply"
    ],
    "code_length": 7,
    "is_duplicate": false,
    "topic": "Passing Data Deeply with Context",
    "purpose": "Passing Data Deeply with Context",
    "explanation": "Passing Data Deeply with Context – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/passing-data-deeply-with-context",
    "source_title": "Passing Data Deeply with Context – React",
    "section": "Passing Data Deeply with Context",
    "code": "import { LevelContext } from './LevelContext.js';\n\nexport default function Section({ level, children }) {\n  return (\n    <section className=\"section\">\n      <LevelContext value={level}>\n        {children}\n      </LevelContext>\n    </section>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "passing",
      "data",
      "component",
      "context",
      "deeply"
    ],
    "code_length": 11,
    "is_duplicate": false,
    "topic": "Passing Data Deeply with Context",
    "purpose": "Passing Data Deeply with Context",
    "explanation": "Passing Data Deeply with Context – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/passing-data-deeply-with-context",
    "source_title": "Passing Data Deeply with Context – React",
    "section": "Passing Data Deeply with Context",
    "code": "import Heading from './Heading.js';\nimport Section from './Section.js';\n\nexport default function Page() {\n  return (\n    <Section level={1}>\n      <Heading>Title</Heading>\n      <Section level={2}>\n        <Heading>Heading</Heading>\n        <Heading>Heading</Heading>\n        <Heading>Heading</Heading>\n        <Section level={3}>\n          <Heading>Sub-heading</Heading>\n          <Heading>Sub-heading</Heading>\n          <Heading>Sub-heading</Heading>\n          <Section level={4}>\n            <Heading>Sub-sub-heading</Heading>\n            <Heading>Sub-sub-heading</Heading>\n            <Heading>Sub-sub-heading</Heading>\n          </Section>\n        </Section>\n      </Section>\n    </Section>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "passing",
      "data",
      "component",
      "context",
      "deeply"
    ],
    "code_length": 25,
    "is_duplicate": true,
    "topic": "Passing Data Deeply with Context",
    "purpose": "Passing Data Deeply with Context",
    "explanation": "Passing Data Deeply with Context – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/passing-data-deeply-with-context",
    "source_title": "Passing Data Deeply with Context – React",
    "section": "Passing Data Deeply with Context",
    "code": "export default function Page() {\n  return (\n    <Section level={1}>\n      ...\n      <Section level={2}>\n        ...\n        <Section level={3}>\n          ...",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "passing",
      "data",
      "component",
      "context",
      "deeply"
    ],
    "code_length": 8,
    "is_duplicate": false,
    "topic": "Passing Data Deeply with Context",
    "purpose": "Passing Data Deeply with Context",
    "explanation": "Passing Data Deeply with Context – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/passing-data-deeply-with-context",
    "source_title": "Passing Data Deeply with Context – React",
    "section": "Passing Data Deeply with Context",
    "code": "import { useContext } from 'react';\nimport { LevelContext } from './LevelContext.js';\n\nexport default function Section({ children }) {\n  const level = useContext(LevelContext);\n  return (\n    <section className=\"section\">\n      <LevelContext value={level + 1}>\n        {children}\n      </LevelContext>\n    </section>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "passing",
      "data",
      "component",
      "context",
      "deeply"
    ],
    "code_length": 13,
    "is_duplicate": false,
    "topic": "Passing Data Deeply with Context",
    "purpose": "Passing Data Deeply with Context",
    "explanation": "Passing Data Deeply with Context – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/passing-data-deeply-with-context",
    "source_title": "Passing Data Deeply with Context – React",
    "section": "Passing Data Deeply with Context",
    "code": "import Heading from './Heading.js';\nimport Section from './Section.js';\n\nexport default function Page() {\n  return (\n    <Section>\n      <Heading>Title</Heading>\n      <Section>\n        <Heading>Heading</Heading>\n        <Heading>Heading</Heading>\n        <Heading>Heading</Heading>\n        <Section>\n          <Heading>Sub-heading</Heading>\n          <Heading>Sub-heading</Heading>\n          <Heading>Sub-heading</Heading>\n          <Section>\n            <Heading>Sub-sub-heading</Heading>\n            <Heading>Sub-sub-heading</Heading>\n            <Heading>Sub-sub-heading</Heading>\n          </Section>\n        </Section>\n      </Section>\n    </Section>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "passing",
      "data",
      "component",
      "context",
      "deeply"
    ],
    "code_length": 25,
    "is_duplicate": false,
    "topic": "Passing Data Deeply with Context",
    "purpose": "Passing Data Deeply with Context",
    "explanation": "Passing Data Deeply with Context – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/passing-data-deeply-with-context",
    "source_title": "Passing Data Deeply with Context – React",
    "section": "Passing Data Deeply with Context",
    "code": "import Heading from './Heading.js';\nimport Section from './Section.js';\n\nexport default function ProfilePage() {\n  return (\n    <Section>\n      <Heading>My Profile</Heading>\n      <Post\n        title=\"Hello traveller!\"\n        body=\"Read about my adventures.\"\n      />\n      <AllPosts />\n    </Section>\n  );\n}\n\nfunction AllPosts() {\n  return (\n    <Section>\n      <Heading>Posts</Heading>\n      <RecentPosts />\n    </Section>\n  );\n}\n\nfunction RecentPosts() {\n  return (\n    <Section>\n      <Heading>Recent Posts</Heading>\n      <Post\n        title=\"Flavors of Lisbon\"\n        body=\"...those pastéis de nata!\"\n      />\n      <Post\n        title=\"Buenos Aires in the rhythm of tango\"\n        body=\"I loved it!\"\n      />\n    </Section>\n  );\n}\n\nfunction Post({ title, body }) {\n  return (\n    <Section isFancy={true}>\n      <Heading>\n        {title}\n      </Heading>\n      <p><i>{body}</i></p>\n    </Section>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "passing",
      "data",
      "component",
      "context",
      "deeply"
    ],
    "code_length": 51,
    "is_duplicate": false,
    "topic": "Passing Data Deeply with Context",
    "purpose": "Passing Data Deeply with Context",
    "explanation": "Passing Data Deeply with Context – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/passing-data-deeply-with-context",
    "source_title": "Passing Data Deeply with Context – React",
    "section": "Passing Data Deeply with Context",
    "code": "import { useState } from 'react';\nimport { places } from './data.js';\nimport { getImageUrl } from './utils.js';\n\nexport default function App() {\n  const [isLarge, setIsLarge] = useState(false);\n  const imageSize = isLarge ? 150 : 100;\n  return (\n    <>\n      <label>\n        <input\n          type=\"checkbox\"\n          checked={isLarge}\n          onChange={e => {\n            setIsLarge(e.target.checked);\n          }}\n        />\n        Use large images\n      </label>\n      <hr />\n      <List imageSize={imageSize} />\n    </>\n  )\n}\n\nfunction List({ imageSize }) {\n  const listItems = places.map(place =>\n    <li key={place.id}>\n      <Place\n        place={place}\n        imageSize={imageSize}\n      />\n    </li>\n  );\n  return <ul>{listItems}</ul>;\n}\n\nfunction Place({ place, imageSize }) {\n  return (\n    <>\n      <PlaceImage\n        place={place}\n        imageSize={imageSize}\n      />\n      <p>\n        <b>{place.name}</b>\n        {': ' + place.description}\n      </p>\n    </>\n  );\n}\n\nfunction PlaceImage({ place, imageSize }) {\n  return (\n    <img\n      src={getImageUrl(place)}\n      alt={place.name}\n      width={imageSize}\n      height={imageSize}\n    />\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "passing",
      "data",
      "state",
      "component",
      "context",
      "deeply"
    ],
    "code_length": 62,
    "is_duplicate": false,
    "topic": "Passing Data Deeply with Context",
    "purpose": "Passing Data Deeply with Context",
    "explanation": "Passing Data Deeply with Context – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/react-compiler/incremental-adoption",
    "source_title": "Incremental Adoption – React",
    "section": "Incremental Adoption",
    "code": "// babel.config.js\nmodule.exports = {\n  plugins: [\n    // Global plugins that apply to all files\n  ],\n  overrides: [\n    {\n      test: './src/modern/**/*.{js,jsx,ts,tsx}',\n      plugins: [\n        'babel-plugin-react-compiler'\n      ]\n    }\n  ]\n};",
    "code_language": "unknown",
    "code_type": "snippet",
    "tags": [
      "incremental",
      "adoption"
    ],
    "code_length": 14,
    "is_duplicate": false,
    "topic": "Incremental Adoption",
    "purpose": "Incremental Adoption",
    "explanation": "Incremental Adoption – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/react-compiler/incremental-adoption",
    "source_title": "Incremental Adoption – React",
    "section": "Incremental Adoption",
    "code": "// babel.config.js\nmodule.exports = {\n  plugins: [\n    // Global plugins\n  ],\n  overrides: [\n    {\n      test: ['./src/modern/**/*.{js,jsx,ts,tsx}', './src/features/**/*.{js,jsx,ts,tsx}'],\n      plugins: [\n        'babel-plugin-react-compiler'\n      ]\n    },\n    {\n      test: './src/legacy/**/*.{js,jsx,ts,tsx}',\n      plugins: [\n        // Different plugins for legacy code\n      ]\n    }\n  ]\n};",
    "code_language": "unknown",
    "code_type": "snippet",
    "tags": [
      "incremental",
      "adoption"
    ],
    "code_length": 20,
    "is_duplicate": false,
    "topic": "Incremental Adoption",
    "purpose": "Incremental Adoption",
    "explanation": "Incremental Adoption – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/react-compiler/incremental-adoption",
    "source_title": "Incremental Adoption – React",
    "section": "Incremental Adoption",
    "code": "// babel.config.js\nmodule.exports = {\n  plugins: [],\n  overrides: [\n    {\n      test: './src/experimental/**/*.{js,jsx,ts,tsx}',\n      plugins: [\n        ['babel-plugin-react-compiler', {\n          // options ...\n        }]\n      ]\n    },\n    {\n      test: './src/production/**/*.{js,jsx,ts,tsx}',\n      plugins: [\n        ['babel-plugin-react-compiler', {\n          // options ...\n        }]\n      ]\n    }\n  ]\n};",
    "code_language": "unknown",
    "code_type": "snippet",
    "tags": [
      "incremental",
      "adoption"
    ],
    "code_length": 22,
    "is_duplicate": false,
    "topic": "Incremental Adoption",
    "purpose": "Incremental Adoption",
    "explanation": "Incremental Adoption – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/react-compiler/incremental-adoption",
    "source_title": "Incremental Adoption – React",
    "section": "Incremental Adoption",
    "code": "// babel.config.js\nmodule.exports = {\n  plugins: [\n    ['babel-plugin-react-compiler', {\n      compilationMode: 'annotation',\n    }],\n  ],\n};",
    "code_language": "unknown",
    "code_type": "snippet",
    "tags": [
      "incremental",
      "adoption"
    ],
    "code_length": 8,
    "is_duplicate": false,
    "topic": "Incremental Adoption",
    "purpose": "Incremental Adoption",
    "explanation": "Incremental Adoption – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/react-compiler/incremental-adoption",
    "source_title": "Incremental Adoption – React",
    "section": "Incremental Adoption",
    "code": "function TodoList({ todos }) {\n  \"use memo\"; // Opt this component into compilation\n\n  const sortedTodos = todos.slice().sort();\n\n  return (\n    <ul>\n      {sortedTodos.map(todo => (\n        <TodoItem key={todo.id} todo={todo} />\n      ))}\n    </ul>\n  );\n}\n\nfunction useSortedData(data) {\n  \"use memo\"; // Opt this hook into compilation\n\n  return data.slice().sort();\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "incremental",
      "adoption"
    ],
    "code_length": 19,
    "is_duplicate": false,
    "topic": "Incremental Adoption",
    "purpose": "Incremental Adoption",
    "explanation": "Incremental Adoption – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/react-compiler/incremental-adoption",
    "source_title": "Incremental Adoption – React",
    "section": "Incremental Adoption",
    "code": "// babel.config.js\nmodule.exports = {\n  plugins: [\n    ['babel-plugin-react-compiler', {\n      gating: {\n        source: 'ReactCompilerFeatureFlags',\n        importSpecifierName: 'isCompilerEnabled',\n      },\n    }],\n  ],\n};",
    "code_language": "unknown",
    "code_type": "snippet",
    "tags": [
      "incremental",
      "adoption"
    ],
    "code_length": 11,
    "is_duplicate": false,
    "topic": "Incremental Adoption",
    "purpose": "Incremental Adoption",
    "explanation": "Incremental Adoption – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/react-compiler/incremental-adoption",
    "source_title": "Incremental Adoption – React",
    "section": "Incremental Adoption",
    "code": "// ReactCompilerFeatureFlags.js\nexport function isCompilerEnabled() {\n  // Use your feature flag system\n  return getFeatureFlag('react-compiler-enabled');\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "incremental",
      "adoption"
    ],
    "code_length": 5,
    "is_duplicate": false,
    "topic": "Incremental Adoption",
    "purpose": "Incremental Adoption",
    "explanation": "Incremental Adoption – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/rendering-lists",
    "source_title": "Rendering Lists – React",
    "section": "Rendering Lists",
    "code": "<ul>\n  <li>Creola Katherine Johnson: mathematician</li>\n  <li>Mario José Molina-Pasquel Henríquez: chemist</li>\n  <li>Mohammad Abdus Salam: physicist</li>\n  <li>Percy Lavon Julian: chemist</li>\n  <li>Subrahmanyan Chandrasekhar: astrophysicist</li>\n</ul>",
    "code_language": "html/jsx",
    "code_type": "snippet",
    "tags": [
      "lists",
      "rendering"
    ],
    "code_length": 7,
    "is_duplicate": false,
    "topic": "Rendering Lists",
    "purpose": "Rendering Lists",
    "explanation": "Rendering Lists – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/rendering-lists",
    "source_title": "Rendering Lists – React",
    "section": "Rendering Lists",
    "code": "const people = [\n  'Creola Katherine Johnson: mathematician',\n  'Mario José Molina-Pasquel Henríquez: chemist',\n  'Mohammad Abdus Salam: physicist',\n  'Percy Lavon Julian: chemist',\n  'Subrahmanyan Chandrasekhar: astrophysicist'\n];",
    "code_language": "unknown",
    "code_type": "snippet",
    "tags": [
      "lists",
      "rendering"
    ],
    "code_length": 7,
    "is_duplicate": false,
    "topic": "Rendering Lists",
    "purpose": "Rendering Lists",
    "explanation": "Rendering Lists – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/rendering-lists",
    "source_title": "Rendering Lists – React",
    "section": "Rendering Lists",
    "code": "const listItems = people.map(person => <li>{person}</li>);",
    "code_language": "unknown",
    "code_type": "snippet",
    "tags": [
      "lists",
      "rendering"
    ],
    "code_length": 1,
    "is_duplicate": false,
    "topic": "Rendering Lists",
    "purpose": "Rendering Lists",
    "explanation": "Rendering Lists – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/rendering-lists",
    "source_title": "Rendering Lists – React",
    "section": "Rendering Lists",
    "code": "return <ul>{listItems}</ul>;",
    "code_language": "unknown",
    "code_type": "snippet",
    "tags": [
      "lists",
      "rendering"
    ],
    "code_length": 1,
    "is_duplicate": false,
    "topic": "Rendering Lists",
    "purpose": "Rendering Lists",
    "explanation": "Rendering Lists – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/rendering-lists",
    "source_title": "Rendering Lists – React",
    "section": "Rendering Lists",
    "code": "const people = [\n  'Creola Katherine Johnson: mathematician',\n  'Mario José Molina-Pasquel Henríquez: chemist',\n  'Mohammad Abdus Salam: physicist',\n  'Percy Lavon Julian: chemist',\n  'Subrahmanyan Chandrasekhar: astrophysicist'\n];\n\nexport default function List() {\n  const listItems = people.map(person =>\n    <li>{person}</li>\n  );\n  return <ul>{listItems}</ul>;\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "lists",
      "component",
      "rendering"
    ],
    "code_length": 14,
    "is_duplicate": false,
    "topic": "Rendering Lists",
    "purpose": "Rendering Lists",
    "explanation": "Rendering Lists – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/rendering-lists",
    "source_title": "Rendering Lists – React",
    "section": "Rendering Lists",
    "code": "const people = [{\n  id: 0,\n  name: 'Creola Katherine Johnson',\n  profession: 'mathematician',\n}, {\n  id: 1,\n  name: 'Mario José Molina-Pasquel Henríquez',\n  profession: 'chemist',\n}, {\n  id: 2,\n  name: 'Mohammad Abdus Salam',\n  profession: 'physicist',\n}, {\n  id: 3,\n  name: 'Percy Lavon Julian',\n  profession: 'chemist',  \n}, {\n  id: 4,\n  name: 'Subrahmanyan Chandrasekhar',\n  profession: 'astrophysicist',\n}];",
    "code_language": "unknown",
    "code_type": "snippet",
    "tags": [
      "lists",
      "rendering"
    ],
    "code_length": 21,
    "is_duplicate": false,
    "topic": "Rendering Lists",
    "purpose": "Rendering Lists",
    "explanation": "Rendering Lists – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/rendering-lists",
    "source_title": "Rendering Lists – React",
    "section": "Rendering Lists",
    "code": "const chemists = people.filter(person =>\n  person.profession === 'chemist'\n);",
    "code_language": "unknown",
    "code_type": "snippet",
    "tags": [
      "lists",
      "rendering"
    ],
    "code_length": 3,
    "is_duplicate": false,
    "topic": "Rendering Lists",
    "purpose": "Rendering Lists",
    "explanation": "Rendering Lists – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/rendering-lists",
    "source_title": "Rendering Lists – React",
    "section": "Rendering Lists",
    "code": "const listItems = chemists.map(person =>\n  <li>\n     <img\n       src={getImageUrl(person)}\n       alt={person.name}\n     />\n     <p>\n       <b>{person.name}:</b>\n       {' ' + person.profession + ' '}\n       known for {person.accomplishment}\n     </p>\n  </li>\n);",
    "code_language": "unknown",
    "code_type": "snippet",
    "tags": [
      "lists",
      "rendering"
    ],
    "code_length": 13,
    "is_duplicate": false,
    "topic": "Rendering Lists",
    "purpose": "Rendering Lists",
    "explanation": "Rendering Lists – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/rendering-lists",
    "source_title": "Rendering Lists – React",
    "section": "Rendering Lists",
    "code": "return <ul>{listItems}</ul>;",
    "code_language": "unknown",
    "code_type": "snippet",
    "tags": [
      "lists",
      "rendering"
    ],
    "code_length": 1,
    "is_duplicate": true,
    "topic": "Rendering Lists",
    "purpose": "Rendering Lists",
    "explanation": "Rendering Lists – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/rendering-lists",
    "source_title": "Rendering Lists – React",
    "section": "Rendering Lists",
    "code": "import { people } from './data.js';\nimport { getImageUrl } from './utils.js';\n\nexport default function List() {\n  const chemists = people.filter(person =>\n    person.profession === 'chemist'\n  );\n  const listItems = chemists.map(person =>\n    <li>\n      <img\n        src={getImageUrl(person)}\n        alt={person.name}\n      />\n      <p>\n        <b>{person.name}:</b>\n        {' ' + person.profession + ' '}\n        known for {person.accomplishment}\n      </p>\n    </li>\n  );\n  return <ul>{listItems}</ul>;\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "lists",
      "component",
      "rendering"
    ],
    "code_length": 22,
    "is_duplicate": false,
    "topic": "Rendering Lists",
    "purpose": "Rendering Lists",
    "explanation": "Rendering Lists – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/rendering-lists",
    "source_title": "Rendering Lists – React",
    "section": "Rendering Lists",
    "code": "const listItems = chemists.map(person =>\n  <li>...</li> // Implicit return!\n);",
    "code_language": "unknown",
    "code_type": "snippet",
    "tags": [
      "lists",
      "rendering"
    ],
    "code_length": 3,
    "is_duplicate": false,
    "topic": "Rendering Lists",
    "purpose": "Rendering Lists",
    "explanation": "Rendering Lists – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/rendering-lists",
    "source_title": "Rendering Lists – React",
    "section": "Rendering Lists",
    "code": "const listItems = chemists.map(person => { // Curly brace\n  return <li>...</li>;\n});",
    "code_language": "unknown",
    "code_type": "snippet",
    "tags": [
      "lists",
      "rendering"
    ],
    "code_length": 3,
    "is_duplicate": false,
    "topic": "Rendering Lists",
    "purpose": "Rendering Lists",
    "explanation": "Rendering Lists – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/rendering-lists",
    "source_title": "Rendering Lists – React",
    "section": "Rendering Lists",
    "code": "<li key={person.id}>...</li>",
    "code_language": "html/jsx",
    "code_type": "snippet",
    "tags": [
      "lists",
      "rendering"
    ],
    "code_length": 1,
    "is_duplicate": false,
    "topic": "Rendering Lists",
    "purpose": "Rendering Lists",
    "explanation": "Rendering Lists – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/rendering-lists",
    "source_title": "Rendering Lists – React",
    "section": "Rendering Lists",
    "code": "export const people = [{\n  id: 0, // Used in JSX as a key\n  name: 'Creola Katherine Johnson',\n  profession: 'mathematician',\n  accomplishment: 'spaceflight calculations',\n  imageId: 'MK3eW3A'\n}, {\n  id: 1, // Used in JSX as a key\n  name: 'Mario José Molina-Pasquel Henríquez',\n  profession: 'chemist',\n  accomplishment: 'discovery of Arctic ozone hole',\n  imageId: 'mynHUSa'\n}, {\n  id: 2, // Used in JSX as a key\n  name: 'Mohammad Abdus Salam',\n  profession: 'physicist',\n  accomplishment: 'electromagnetism theory',\n  imageId: 'bE7W1ji'\n}, {\n  id: 3, // Used in JSX as a key\n  name: 'Percy Lavon Julian',\n  profession: 'chemist',\n  accomplishment: 'pioneering cortisone drugs, steroids and birth control pills',\n  imageId: 'IOjWm71'\n}, {\n  id: 4, // Used in JSX as a key\n  name: 'Subrahmanyan Chandrasekhar',\n  profession: 'astrophysicist',\n  accomplishment: 'white dwarf star mass calculations',\n  imageId: 'lrWQx8l'\n}];",
    "code_language": "unknown",
    "code_type": "snippet",
    "tags": [
      "lists",
      "rendering"
    ],
    "code_length": 31,
    "is_duplicate": false,
    "topic": "Rendering Lists",
    "purpose": "Rendering Lists",
    "explanation": "Rendering Lists – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/rendering-lists",
    "source_title": "Rendering Lists – React",
    "section": "Rendering Lists",
    "code": "import { people } from './data.js';\nimport { getImageUrl } from './utils.js';\n\nexport default function List() {\n  const listItems = people.map(person =>\n    <li key={person.id}>\n      <img\n        src={getImageUrl(person)}\n        alt={person.name}\n      />\n      <p>\n        <b>{person.name}:</b>\n        {' ' + person.profession + ' '}\n        known for {person.accomplishment}\n      </p>\n    </li>\n  );\n  return (\n    <article>\n      <h1>Scientists</h1>\n      <ul>{listItems}</ul>\n    </article>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "lists",
      "component",
      "rendering"
    ],
    "code_length": 24,
    "is_duplicate": true,
    "topic": "Rendering Lists",
    "purpose": "Rendering Lists",
    "explanation": "Rendering Lists – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/tutorial-tic-tac-toe",
    "source_title": "Tutorial: Tic-Tac-Toe – React",
    "section": "Tutorial: Tic-Tac-Toe",
    "code": "export default function Square() {\n  return <button className=\"square\">X</button>;\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "tictactoe",
      "tutorial:",
      "component"
    ],
    "code_length": 3,
    "is_duplicate": false,
    "topic": "Tutorial: Tic-Tac-Toe",
    "purpose": "Tutorial: Tic-Tac-Toe",
    "explanation": "Tutorial: Tic-Tac-Toe – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/tutorial-tic-tac-toe",
    "source_title": "Tutorial: Tic-Tac-Toe – React",
    "section": "Tutorial: Tic-Tac-Toe",
    "code": "export default function Square() {\n  return <button className=\"square\">X</button>;\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "tictactoe",
      "tutorial:",
      "component"
    ],
    "code_length": 3,
    "is_duplicate": true,
    "topic": "Tutorial: Tic-Tac-Toe",
    "purpose": "Tutorial: Tic-Tac-Toe",
    "explanation": "Tutorial: Tic-Tac-Toe – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/tutorial-tic-tac-toe",
    "source_title": "Tutorial: Tic-Tac-Toe – React",
    "section": "Tutorial: Tic-Tac-Toe",
    "code": "export default function Square() {\n  return <button className=\"square\">X</button>;\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "tictactoe",
      "tutorial:",
      "component"
    ],
    "code_length": 3,
    "is_duplicate": true,
    "topic": "Tutorial: Tic-Tac-Toe",
    "purpose": "Tutorial: Tic-Tac-Toe",
    "explanation": "Tutorial: Tic-Tac-Toe – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/tutorial-tic-tac-toe",
    "source_title": "Tutorial: Tic-Tac-Toe – React",
    "section": "Tutorial: Tic-Tac-Toe",
    "code": "export default function Square() {\n  return <button className=\"square\">X</button>;\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "tictactoe",
      "tutorial:",
      "component"
    ],
    "code_length": 3,
    "is_duplicate": true,
    "topic": "Tutorial: Tic-Tac-Toe",
    "purpose": "Tutorial: Tic-Tac-Toe",
    "explanation": "Tutorial: Tic-Tac-Toe – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/tutorial-tic-tac-toe",
    "source_title": "Tutorial: Tic-Tac-Toe – React",
    "section": "Tutorial: Tic-Tac-Toe",
    "code": "import { StrictMode } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport './styles.css';\n\nimport App from './App';",
    "code_language": "javascript/jsx",
    "code_type": "import",
    "tags": [
      "tictactoe",
      "tutorial:"
    ],
    "code_length": 5,
    "is_duplicate": false,
    "topic": "Tutorial: Tic-Tac-Toe",
    "purpose": "Tutorial: Tic-Tac-Toe",
    "explanation": "Tutorial: Tic-Tac-Toe – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/tutorial-tic-tac-toe",
    "source_title": "Tutorial: Tic-Tac-Toe – React",
    "section": "Tutorial: Tic-Tac-Toe",
    "code": "export default function Square() {\n  return <button className=\"square\">X</button><button className=\"square\">X</button>;\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "tictactoe",
      "tutorial:",
      "component"
    ],
    "code_length": 3,
    "is_duplicate": false,
    "topic": "Tutorial: Tic-Tac-Toe",
    "purpose": "Tutorial: Tic-Tac-Toe",
    "explanation": "Tutorial: Tic-Tac-Toe – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/tutorial-tic-tac-toe",
    "source_title": "Tutorial: Tic-Tac-Toe – React",
    "section": "Tutorial: Tic-Tac-Toe",
    "code": "export default function Square() {\n  return (\n    <>\n      <button className=\"square\">X</button>\n      <button className=\"square\">X</button>\n    </>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "tictactoe",
      "tutorial:",
      "component"
    ],
    "code_length": 8,
    "is_duplicate": false,
    "topic": "Tutorial: Tic-Tac-Toe",
    "purpose": "Tutorial: Tic-Tac-Toe",
    "explanation": "Tutorial: Tic-Tac-Toe – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/tutorial-tic-tac-toe",
    "source_title": "Tutorial: Tic-Tac-Toe – React",
    "section": "Tutorial: Tic-Tac-Toe",
    "code": "export default function Square() {\n  return (\n    <>\n      <div className=\"board-row\">\n        <button className=\"square\">1</button>\n        <button className=\"square\">2</button>\n        <button className=\"square\">3</button>\n      </div>\n      <div className=\"board-row\">\n        <button className=\"square\">4</button>\n        <button className=\"square\">5</button>\n        <button className=\"square\">6</button>\n      </div>\n      <div className=\"board-row\">\n        <button className=\"square\">7</button>\n        <button className=\"square\">8</button>\n        <button className=\"square\">9</button>\n      </div>\n    </>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "tictactoe",
      "tutorial:",
      "component"
    ],
    "code_length": 21,
    "is_duplicate": false,
    "topic": "Tutorial: Tic-Tac-Toe",
    "purpose": "Tutorial: Tic-Tac-Toe",
    "explanation": "Tutorial: Tic-Tac-Toe – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/tutorial-tic-tac-toe",
    "source_title": "Tutorial: Tic-Tac-Toe – React",
    "section": "Tutorial: Tic-Tac-Toe",
    "code": "export default function Board() {\n  //...\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "tictactoe",
      "tutorial:",
      "component"
    ],
    "code_length": 3,
    "is_duplicate": false,
    "topic": "Tutorial: Tic-Tac-Toe",
    "purpose": "Tutorial: Tic-Tac-Toe",
    "explanation": "Tutorial: Tic-Tac-Toe – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/tutorial-tic-tac-toe",
    "source_title": "Tutorial: Tic-Tac-Toe – React",
    "section": "Tutorial: Tic-Tac-Toe",
    "code": "export default function Board() {\n  return (\n    <>\n      <div className=\"board-row\">\n        <button className=\"square\">1</button>\n        <button className=\"square\">2</button>\n        <button className=\"square\">3</button>\n      </div>\n      <div className=\"board-row\">\n        <button className=\"square\">4</button>\n        <button className=\"square\">5</button>\n        <button className=\"square\">6</button>\n      </div>\n      <div className=\"board-row\">\n        <button className=\"square\">7</button>\n        <button className=\"square\">8</button>\n        <button className=\"square\">9</button>\n      </div>\n    </>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "tictactoe",
      "tutorial:",
      "component"
    ],
    "code_length": 21,
    "is_duplicate": false,
    "topic": "Tutorial: Tic-Tac-Toe",
    "purpose": "Tutorial: Tic-Tac-Toe",
    "explanation": "Tutorial: Tic-Tac-Toe – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/tutorial-tic-tac-toe",
    "source_title": "Tutorial: Tic-Tac-Toe – React",
    "section": "Tutorial: Tic-Tac-Toe",
    "code": "function Square() {\n  return <button className=\"square\">1</button>;\n}\n\nexport default function Board() {\n  // ...\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "tictactoe",
      "tutorial:",
      "component"
    ],
    "code_length": 7,
    "is_duplicate": false,
    "topic": "Tutorial: Tic-Tac-Toe",
    "purpose": "Tutorial: Tic-Tac-Toe",
    "explanation": "Tutorial: Tic-Tac-Toe – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/tutorial-tic-tac-toe",
    "source_title": "Tutorial: Tic-Tac-Toe – React",
    "section": "Tutorial: Tic-Tac-Toe",
    "code": "// ...\nexport default function Board() {\n  return (\n    <>\n      <div className=\"board-row\">\n        <Square />\n        <Square />\n        <Square />\n      </div>\n      <div className=\"board-row\">\n        <Square />\n        <Square />\n        <Square />\n      </div>\n      <div className=\"board-row\">\n        <Square />\n        <Square />\n        <Square />\n      </div>\n    </>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "tictactoe",
      "tutorial:",
      "component"
    ],
    "code_length": 22,
    "is_duplicate": false,
    "topic": "Tutorial: Tic-Tac-Toe",
    "purpose": "Tutorial: Tic-Tac-Toe",
    "explanation": "Tutorial: Tic-Tac-Toe – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/tutorial-tic-tac-toe",
    "source_title": "Tutorial: Tic-Tac-Toe – React",
    "section": "Tutorial: Tic-Tac-Toe",
    "code": "function Square({ value }) {\n  return <button className=\"square\">1</button>;\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "tictactoe",
      "tutorial:"
    ],
    "code_length": 3,
    "is_duplicate": false,
    "topic": "Tutorial: Tic-Tac-Toe",
    "purpose": "Tutorial: Tic-Tac-Toe",
    "explanation": "Tutorial: Tic-Tac-Toe – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/tutorial-tic-tac-toe",
    "source_title": "Tutorial: Tic-Tac-Toe – React",
    "section": "Tutorial: Tic-Tac-Toe",
    "code": "function Square({ value }) {\n  return <button className=\"square\">value</button>;\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "tictactoe",
      "tutorial:"
    ],
    "code_length": 3,
    "is_duplicate": false,
    "topic": "Tutorial: Tic-Tac-Toe",
    "purpose": "Tutorial: Tic-Tac-Toe",
    "explanation": "Tutorial: Tic-Tac-Toe – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/tutorial-tic-tac-toe",
    "source_title": "Tutorial: Tic-Tac-Toe – React",
    "section": "Tutorial: Tic-Tac-Toe",
    "code": "function Square({ value }) {\n  return <button className=\"square\">{value}</button>;\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "tictactoe",
      "tutorial:"
    ],
    "code_length": 3,
    "is_duplicate": false,
    "topic": "Tutorial: Tic-Tac-Toe",
    "purpose": "Tutorial: Tic-Tac-Toe",
    "explanation": "Tutorial: Tic-Tac-Toe – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/tutorial-tic-tac-toe",
    "source_title": "Tutorial: Tic-Tac-Toe – React",
    "section": "Tutorial: Tic-Tac-Toe",
    "code": "export default function Board() {\n  return (\n    <>\n      <div className=\"board-row\">\n        <Square value=\"1\" />\n        <Square value=\"2\" />\n        <Square value=\"3\" />\n      </div>\n      <div className=\"board-row\">\n        <Square value=\"4\" />\n        <Square value=\"5\" />\n        <Square value=\"6\" />\n      </div>\n      <div className=\"board-row\">\n        <Square value=\"7\" />\n        <Square value=\"8\" />\n        <Square value=\"9\" />\n      </div>\n    </>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "tictactoe",
      "tutorial:",
      "component"
    ],
    "code_length": 21,
    "is_duplicate": false,
    "topic": "Tutorial: Tic-Tac-Toe",
    "purpose": "Tutorial: Tic-Tac-Toe",
    "explanation": "Tutorial: Tic-Tac-Toe – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/tutorial-tic-tac-toe",
    "source_title": "Tutorial: Tic-Tac-Toe – React",
    "section": "Tutorial: Tic-Tac-Toe",
    "code": "function Square({ value }) {\n  return <button className=\"square\">{value}</button>;\n}\n\nexport default function Board() {\n  return (\n    <>\n      <div className=\"board-row\">\n        <Square value=\"1\" />\n        <Square value=\"2\" />\n        <Square value=\"3\" />\n      </div>\n      <div className=\"board-row\">\n        <Square value=\"4\" />\n        <Square value=\"5\" />\n        <Square value=\"6\" />\n      </div>\n      <div className=\"board-row\">\n        <Square value=\"7\" />\n        <Square value=\"8\" />\n        <Square value=\"9\" />\n      </div>\n    </>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "tictactoe",
      "tutorial:",
      "component"
    ],
    "code_length": 25,
    "is_duplicate": false,
    "topic": "Tutorial: Tic-Tac-Toe",
    "purpose": "Tutorial: Tic-Tac-Toe",
    "explanation": "Tutorial: Tic-Tac-Toe – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/tutorial-tic-tac-toe",
    "source_title": "Tutorial: Tic-Tac-Toe – React",
    "section": "Tutorial: Tic-Tac-Toe",
    "code": "function Square({ value }) {\n  function handleClick() {\n    console.log('clicked!');\n  }\n\n  return (\n    <button\n      className=\"square\"\n      onClick={handleClick}\n    >\n      {value}\n    </button>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "tictactoe",
      "tutorial:"
    ],
    "code_length": 14,
    "is_duplicate": false,
    "topic": "Tutorial: Tic-Tac-Toe",
    "purpose": "Tutorial: Tic-Tac-Toe",
    "explanation": "Tutorial: Tic-Tac-Toe – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/tutorial-tic-tac-toe",
    "source_title": "Tutorial: Tic-Tac-Toe – React",
    "section": "Tutorial: Tic-Tac-Toe",
    "code": "import { useState } from 'react';\n\nfunction Square() {\n  const [value, setValue] = useState(null);\n\n  function handleClick() {\n    //...",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "tictactoe",
      "state",
      "tutorial:"
    ],
    "code_length": 7,
    "is_duplicate": false,
    "topic": "Tutorial: Tic-Tac-Toe",
    "purpose": "Tutorial: Tic-Tac-Toe",
    "explanation": "Tutorial: Tic-Tac-Toe – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/tutorial-tic-tac-toe",
    "source_title": "Tutorial: Tic-Tac-Toe – React",
    "section": "Tutorial: Tic-Tac-Toe",
    "code": "// ...\nexport default function Board() {\n  return (\n    <>\n      <div className=\"board-row\">\n        <Square />\n        <Square />\n        <Square />\n      </div>\n      <div className=\"board-row\">\n        <Square />\n        <Square />\n        <Square />\n      </div>\n      <div className=\"board-row\">\n        <Square />\n        <Square />\n        <Square />\n      </div>\n    </>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "tictactoe",
      "tutorial:",
      "component"
    ],
    "code_length": 22,
    "is_duplicate": true,
    "topic": "Tutorial: Tic-Tac-Toe",
    "purpose": "Tutorial: Tic-Tac-Toe",
    "explanation": "Tutorial: Tic-Tac-Toe – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/tutorial-tic-tac-toe",
    "source_title": "Tutorial: Tic-Tac-Toe – React",
    "section": "Tutorial: Tic-Tac-Toe",
    "code": "function Square() {\n  const [value, setValue] = useState(null);\n\n  function handleClick() {\n    setValue('X');\n  }\n\n  return (\n    <button\n      className=\"square\"\n      onClick={handleClick}\n    >\n      {value}\n    </button>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "tictactoe",
      "state",
      "tutorial:"
    ],
    "code_length": 16,
    "is_duplicate": false,
    "topic": "Tutorial: Tic-Tac-Toe",
    "purpose": "Tutorial: Tic-Tac-Toe",
    "explanation": "Tutorial: Tic-Tac-Toe – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/tutorial-tic-tac-toe",
    "source_title": "Tutorial: Tic-Tac-Toe – React",
    "section": "Tutorial: Tic-Tac-Toe",
    "code": "import { useState } from 'react';\n\nfunction Square() {\n  const [value, setValue] = useState(null);\n\n  function handleClick() {\n    setValue('X');\n  }\n\n  return (\n    <button\n      className=\"square\"\n      onClick={handleClick}\n    >\n      {value}\n    </button>\n  );\n}\n\nexport default function Board() {\n  return (\n    <>\n      <div className=\"board-row\">\n        <Square />\n        <Square />\n        <Square />\n      </div>\n      <div className=\"board-row\">\n        <Square />\n        <Square />\n        <Square />\n      </div>\n      <div className=\"board-row\">\n        <Square />\n        <Square />\n        <Square />\n      </div>\n    </>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "tictactoe",
      "state",
      "tutorial:",
      "component"
    ],
    "code_length": 40,
    "is_duplicate": false,
    "topic": "Tutorial: Tic-Tac-Toe",
    "purpose": "Tutorial: Tic-Tac-Toe",
    "explanation": "Tutorial: Tic-Tac-Toe – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/tutorial-tic-tac-toe",
    "source_title": "Tutorial: Tic-Tac-Toe – React",
    "section": "Tutorial: Tic-Tac-Toe",
    "code": "// ...\nexport default function Board() {\n  const [squares, setSquares] = useState(Array(9).fill(null));\n  return (\n    // ...\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "tictactoe",
      "state",
      "tutorial:",
      "component"
    ],
    "code_length": 7,
    "is_duplicate": false,
    "topic": "Tutorial: Tic-Tac-Toe",
    "purpose": "Tutorial: Tic-Tac-Toe",
    "explanation": "Tutorial: Tic-Tac-Toe – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/tutorial-tic-tac-toe",
    "source_title": "Tutorial: Tic-Tac-Toe – React",
    "section": "Tutorial: Tic-Tac-Toe",
    "code": "['O', null, 'X', 'X', 'X', 'O', 'O', null, null]",
    "code_language": "unknown",
    "code_type": "snippet",
    "tags": [
      "tictactoe",
      "tutorial:"
    ],
    "code_length": 1,
    "is_duplicate": false,
    "topic": "Tutorial: Tic-Tac-Toe",
    "purpose": "Tutorial: Tic-Tac-Toe",
    "explanation": "Tutorial: Tic-Tac-Toe – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/tutorial-tic-tac-toe",
    "source_title": "Tutorial: Tic-Tac-Toe – React",
    "section": "Tutorial: Tic-Tac-Toe",
    "code": "export default function Board() {\n  const [squares, setSquares] = useState(Array(9).fill(null));\n  return (\n    <>\n      <div className=\"board-row\">\n        <Square value={squares[0]} />\n        <Square value={squares[1]} />\n        <Square value={squares[2]} />\n      </div>\n      <div className=\"board-row\">\n        <Square value={squares[3]} />\n        <Square value={squares[4]} />\n        <Square value={squares[5]} />\n      </div>\n      <div className=\"board-row\">\n        <Square value={squares[6]} />\n        <Square value={squares[7]} />\n        <Square value={squares[8]} />\n      </div>\n    </>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "tictactoe",
      "state",
      "tutorial:",
      "component"
    ],
    "code_length": 22,
    "is_duplicate": false,
    "topic": "Tutorial: Tic-Tac-Toe",
    "purpose": "Tutorial: Tic-Tac-Toe",
    "explanation": "Tutorial: Tic-Tac-Toe – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/tutorial-tic-tac-toe",
    "source_title": "Tutorial: Tic-Tac-Toe – React",
    "section": "Tutorial: Tic-Tac-Toe",
    "code": "function Square({value}) {\n  return <button className=\"square\">{value}</button>;\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "tictactoe",
      "tutorial:"
    ],
    "code_length": 3,
    "is_duplicate": false,
    "topic": "Tutorial: Tic-Tac-Toe",
    "purpose": "Tutorial: Tic-Tac-Toe",
    "explanation": "Tutorial: Tic-Tac-Toe – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/tutorial-tic-tac-toe",
    "source_title": "Tutorial: Tic-Tac-Toe – React",
    "section": "Tutorial: Tic-Tac-Toe",
    "code": "import { useState } from 'react';\n\nfunction Square({ value }) {\n  return <button className=\"square\">{value}</button>;\n}\n\nexport default function Board() {\n  const [squares, setSquares] = useState(Array(9).fill(null));\n  return (\n    <>\n      <div className=\"board-row\">\n        <Square value={squares[0]} />\n        <Square value={squares[1]} />\n        <Square value={squares[2]} />\n      </div>\n      <div className=\"board-row\">\n        <Square value={squares[3]} />\n        <Square value={squares[4]} />\n        <Square value={squares[5]} />\n      </div>\n      <div className=\"board-row\">\n        <Square value={squares[6]} />\n        <Square value={squares[7]} />\n        <Square value={squares[8]} />\n      </div>\n    </>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "tictactoe",
      "state",
      "tutorial:",
      "component"
    ],
    "code_length": 28,
    "is_duplicate": false,
    "topic": "Tutorial: Tic-Tac-Toe",
    "purpose": "Tutorial: Tic-Tac-Toe",
    "explanation": "Tutorial: Tic-Tac-Toe – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/tutorial-tic-tac-toe",
    "source_title": "Tutorial: Tic-Tac-Toe – React",
    "section": "Tutorial: Tic-Tac-Toe",
    "code": "function Square({ value }) {\n  return (\n    <button className=\"square\" onClick={onSquareClick}>\n      {value}\n    </button>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "tictactoe",
      "tutorial:"
    ],
    "code_length": 7,
    "is_duplicate": false,
    "topic": "Tutorial: Tic-Tac-Toe",
    "purpose": "Tutorial: Tic-Tac-Toe",
    "explanation": "Tutorial: Tic-Tac-Toe – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/tutorial-tic-tac-toe",
    "source_title": "Tutorial: Tic-Tac-Toe – React",
    "section": "Tutorial: Tic-Tac-Toe",
    "code": "function Square({ value, onSquareClick }) {\n  return (\n    <button className=\"square\" onClick={onSquareClick}>\n      {value}\n    </button>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "tictactoe",
      "tutorial:"
    ],
    "code_length": 7,
    "is_duplicate": false,
    "topic": "Tutorial: Tic-Tac-Toe",
    "purpose": "Tutorial: Tic-Tac-Toe",
    "explanation": "Tutorial: Tic-Tac-Toe – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/tutorial-tic-tac-toe",
    "source_title": "Tutorial: Tic-Tac-Toe – React",
    "section": "Tutorial: Tic-Tac-Toe",
    "code": "export default function Board() {\n  const [squares, setSquares] = useState(Array(9).fill(null));\n\n  return (\n    <>\n      <div className=\"board-row\">\n        <Square value={squares[0]} onSquareClick={handleClick} />\n        //...\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "tictactoe",
      "state",
      "tutorial:",
      "component"
    ],
    "code_length": 10,
    "is_duplicate": false,
    "topic": "Tutorial: Tic-Tac-Toe",
    "purpose": "Tutorial: Tic-Tac-Toe",
    "explanation": "Tutorial: Tic-Tac-Toe – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/tutorial-tic-tac-toe",
    "source_title": "Tutorial: Tic-Tac-Toe – React",
    "section": "Tutorial: Tic-Tac-Toe",
    "code": "export default function Board() {\n  const [squares, setSquares] = useState(Array(9).fill(null));\n\n  function handleClick() {\n    const nextSquares = squares.slice();\n    nextSquares[0] = \"X\";\n    setSquares(nextSquares);\n  }\n\n  return (\n    // ...\n  )\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "tictactoe",
      "state",
      "tutorial:",
      "component"
    ],
    "code_length": 13,
    "is_duplicate": false,
    "topic": "Tutorial: Tic-Tac-Toe",
    "purpose": "Tutorial: Tic-Tac-Toe",
    "explanation": "Tutorial: Tic-Tac-Toe – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/tutorial-tic-tac-toe",
    "source_title": "Tutorial: Tic-Tac-Toe – React",
    "section": "Tutorial: Tic-Tac-Toe",
    "code": "export default function Board() {\n  const [squares, setSquares] = useState(Array(9).fill(null));\n\n  function handleClick(i) {\n    const nextSquares = squares.slice();\n    nextSquares[i] = \"X\";\n    setSquares(nextSquares);\n  }\n\n  return (\n    // ...\n  )\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "tictactoe",
      "state",
      "tutorial:",
      "component"
    ],
    "code_length": 13,
    "is_duplicate": false,
    "topic": "Tutorial: Tic-Tac-Toe",
    "purpose": "Tutorial: Tic-Tac-Toe",
    "explanation": "Tutorial: Tic-Tac-Toe – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/tutorial-tic-tac-toe",
    "source_title": "Tutorial: Tic-Tac-Toe – React",
    "section": "Tutorial: Tic-Tac-Toe",
    "code": "<Square value={squares[0]} onSquareClick={handleClick(0)} />",
    "code_language": "html/jsx",
    "code_type": "snippet",
    "tags": [
      "tictactoe",
      "tutorial:"
    ],
    "code_length": 1,
    "is_duplicate": false,
    "topic": "Tutorial: Tic-Tac-Toe",
    "purpose": "Tutorial: Tic-Tac-Toe",
    "explanation": "Tutorial: Tic-Tac-Toe – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/tutorial-tic-tac-toe",
    "source_title": "Tutorial: Tic-Tac-Toe – React",
    "section": "Tutorial: Tic-Tac-Toe",
    "code": "export default function Board() {\n  // ...\n  return (\n    <>\n      <div className=\"board-row\">\n        <Square value={squares[0]} onSquareClick={() => handleClick(0)} />\n        // ...\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "tictactoe",
      "tutorial:",
      "component"
    ],
    "code_length": 9,
    "is_duplicate": false,
    "topic": "Tutorial: Tic-Tac-Toe",
    "purpose": "Tutorial: Tic-Tac-Toe",
    "explanation": "Tutorial: Tic-Tac-Toe – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/tutorial-tic-tac-toe",
    "source_title": "Tutorial: Tic-Tac-Toe – React",
    "section": "Tutorial: Tic-Tac-Toe",
    "code": "export default function Board() {\n  // ...\n  return (\n    <>\n      <div className=\"board-row\">\n        <Square value={squares[0]} onSquareClick={() => handleClick(0)} />\n        <Square value={squares[1]} onSquareClick={() => handleClick(1)} />\n        <Square value={squares[2]} onSquareClick={() => handleClick(2)} />\n      </div>\n      <div className=\"board-row\">\n        <Square value={squares[3]} onSquareClick={() => handleClick(3)} />\n        <Square value={squares[4]} onSquareClick={() => handleClick(4)} />\n        <Square value={squares[5]} onSquareClick={() => handleClick(5)} />\n      </div>\n      <div className=\"board-row\">\n        <Square value={squares[6]} onSquareClick={() => handleClick(6)} />\n        <Square value={squares[7]} onSquareClick={() => handleClick(7)} />\n        <Square value={squares[8]} onSquareClick={() => handleClick(8)} />\n      </div>\n    </>\n  );\n};",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "tictactoe",
      "tutorial:",
      "component"
    ],
    "code_length": 22,
    "is_duplicate": false,
    "topic": "Tutorial: Tic-Tac-Toe",
    "purpose": "Tutorial: Tic-Tac-Toe",
    "explanation": "Tutorial: Tic-Tac-Toe – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/tutorial-tic-tac-toe",
    "source_title": "Tutorial: Tic-Tac-Toe – React",
    "section": "Tutorial: Tic-Tac-Toe",
    "code": "import { useState } from 'react';\n\nfunction Square({ value, onSquareClick }) {\n  return (\n    <button className=\"square\" onClick={onSquareClick}>\n      {value}\n    </button>\n  );\n}\n\nexport default function Board() {\n  const [squares, setSquares] = useState(Array(9).fill(null));\n\n  function handleClick(i) {\n    const nextSquares = squares.slice();\n    nextSquares[i] = 'X';\n    setSquares(nextSquares);\n  }\n\n  return (\n    <>\n      <div className=\"board-row\">\n        <Square value={squares[0]} onSquareClick={() => handleClick(0)} />\n        <Square value={squares[1]} onSquareClick={() => handleClick(1)} />\n        <Square value={squares[2]} onSquareClick={() => handleClick(2)} />\n      </div>\n      <div className=\"board-row\">\n        <Square value={squares[3]} onSquareClick={() => handleClick(3)} />\n        <Square value={squares[4]} onSquareClick={() => handleClick(4)} />\n        <Square value={squares[5]} onSquareClick={() => handleClick(5)} />\n      </div>\n      <div className=\"board-row\">\n        <Square value={squares[6]} onSquareClick={() => handleClick(6)} />\n        <Square value={squares[7]} onSquareClick={() => handleClick(7)} />\n        <Square value={squares[8]} onSquareClick={() => handleClick(8)} />\n      </div>\n    </>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "tictactoe",
      "state",
      "tutorial:",
      "component"
    ],
    "code_length": 39,
    "is_duplicate": false,
    "topic": "Tutorial: Tic-Tac-Toe",
    "purpose": "Tutorial: Tic-Tac-Toe",
    "explanation": "Tutorial: Tic-Tac-Toe – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/tutorial-tic-tac-toe",
    "source_title": "Tutorial: Tic-Tac-Toe – React",
    "section": "Tutorial: Tic-Tac-Toe",
    "code": "const squares = [null, null, null, null, null, null, null, null, null];\nsquares[0] = 'X';\n// Now `squares` is [\"X\", null, null, null, null, null, null, null, null];",
    "code_language": "unknown",
    "code_type": "snippet",
    "tags": [
      "tictactoe",
      "tutorial:"
    ],
    "code_length": 3,
    "is_duplicate": false,
    "topic": "Tutorial: Tic-Tac-Toe",
    "purpose": "Tutorial: Tic-Tac-Toe",
    "explanation": "Tutorial: Tic-Tac-Toe – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/tutorial-tic-tac-toe",
    "source_title": "Tutorial: Tic-Tac-Toe – React",
    "section": "Tutorial: Tic-Tac-Toe",
    "code": "const squares = [null, null, null, null, null, null, null, null, null];\nconst nextSquares = ['X', null, null, null, null, null, null, null, null];\n// Now `squares` is unchanged, but `nextSquares` first element is 'X' rather than `null`",
    "code_language": "unknown",
    "code_type": "snippet",
    "tags": [
      "tictactoe",
      "tutorial:"
    ],
    "code_length": 3,
    "is_duplicate": false,
    "topic": "Tutorial: Tic-Tac-Toe",
    "purpose": "Tutorial: Tic-Tac-Toe",
    "explanation": "Tutorial: Tic-Tac-Toe – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/tutorial-tic-tac-toe",
    "source_title": "Tutorial: Tic-Tac-Toe – React",
    "section": "Tutorial: Tic-Tac-Toe",
    "code": "function Board() {\n  const [xIsNext, setXIsNext] = useState(true);\n  const [squares, setSquares] = useState(Array(9).fill(null));\n\n  // ...\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "tictactoe",
      "state",
      "tutorial:"
    ],
    "code_length": 6,
    "is_duplicate": false,
    "topic": "Tutorial: Tic-Tac-Toe",
    "purpose": "Tutorial: Tic-Tac-Toe",
    "explanation": "Tutorial: Tic-Tac-Toe – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/tutorial-tic-tac-toe",
    "source_title": "Tutorial: Tic-Tac-Toe – React",
    "section": "Tutorial: Tic-Tac-Toe",
    "code": "export default function Board() {\n  const [xIsNext, setXIsNext] = useState(true);\n  const [squares, setSquares] = useState(Array(9).fill(null));\n\n  function handleClick(i) {\n    const nextSquares = squares.slice();\n    if (xIsNext) {\n      nextSquares[i] = \"X\";\n    } else {\n      nextSquares[i] = \"O\";\n    }\n    setSquares(nextSquares);\n    setXIsNext(!xIsNext);\n  }\n\n  return (\n    //...\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "tictactoe",
      "state",
      "tutorial:",
      "component"
    ],
    "code_length": 19,
    "is_duplicate": false,
    "topic": "Tutorial: Tic-Tac-Toe",
    "purpose": "Tutorial: Tic-Tac-Toe",
    "explanation": "Tutorial: Tic-Tac-Toe – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/tutorial-tic-tac-toe",
    "source_title": "Tutorial: Tic-Tac-Toe – React",
    "section": "Tutorial: Tic-Tac-Toe",
    "code": "function handleClick(i) {\n  if (squares[i]) {\n    return;\n  }\n  const nextSquares = squares.slice();\n  //...\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "tictactoe",
      "tutorial:"
    ],
    "code_length": 7,
    "is_duplicate": false,
    "topic": "Tutorial: Tic-Tac-Toe",
    "purpose": "Tutorial: Tic-Tac-Toe",
    "explanation": "Tutorial: Tic-Tac-Toe – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/tutorial-tic-tac-toe",
    "source_title": "Tutorial: Tic-Tac-Toe – React",
    "section": "Tutorial: Tic-Tac-Toe",
    "code": "import { useState } from 'react';\n\nfunction Square({value, onSquareClick}) {\n  return (\n    <button className=\"square\" onClick={onSquareClick}>\n      {value}\n    </button>\n  );\n}\n\nexport default function Board() {\n  const [xIsNext, setXIsNext] = useState(true);\n  const [squares, setSquares] = useState(Array(9).fill(null));\n\n  function handleClick(i) {\n    if (squares[i]) {\n      return;\n    }\n    const nextSquares = squares.slice();\n    if (xIsNext) {\n      nextSquares[i] = 'X';\n    } else {\n      nextSquares[i] = 'O';\n    }\n    setSquares(nextSquares);\n    setXIsNext(!xIsNext);\n  }\n\n  return (\n    <>\n      <div className=\"board-row\">\n        <Square value={squares[0]} onSquareClick={() => handleClick(0)} />\n        <Square value={squares[1]} onSquareClick={() => handleClick(1)} />\n        <Square value={squares[2]} onSquareClick={() => handleClick(2)} />\n      </div>\n      <div className=\"board-row\">\n        <Square value={squares[3]} onSquareClick={() => handleClick(3)} />\n        <Square value={squares[4]} onSquareClick={() => handleClick(4)} />\n        <Square value={squares[5]} onSquareClick={() => handleClick(5)} />\n      </div>\n      <div className=\"board-row\">\n        <Square value={squares[6]} onSquareClick={() => handleClick(6)} />\n        <Square value={squares[7]} onSquareClick={() => handleClick(7)} />\n        <Square value={squares[8]} onSquareClick={() => handleClick(8)} />\n      </div>\n    </>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "tictactoe",
      "state",
      "tutorial:",
      "component"
    ],
    "code_length": 48,
    "is_duplicate": false,
    "topic": "Tutorial: Tic-Tac-Toe",
    "purpose": "Tutorial: Tic-Tac-Toe",
    "explanation": "Tutorial: Tic-Tac-Toe – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/tutorial-tic-tac-toe",
    "source_title": "Tutorial: Tic-Tac-Toe – React",
    "section": "Tutorial: Tic-Tac-Toe",
    "code": "export default function Board() {\n  //...\n}\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6]\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "tictactoe",
      "tutorial:",
      "component"
    ],
    "code_length": 23,
    "is_duplicate": false,
    "topic": "Tutorial: Tic-Tac-Toe",
    "purpose": "Tutorial: Tic-Tac-Toe",
    "explanation": "Tutorial: Tic-Tac-Toe – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/tutorial-tic-tac-toe",
    "source_title": "Tutorial: Tic-Tac-Toe – React",
    "section": "Tutorial: Tic-Tac-Toe",
    "code": "function handleClick(i) {\n  if (squares[i] || calculateWinner(squares)) {\n    return;\n  }\n  const nextSquares = squares.slice();\n  //...\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "tictactoe",
      "tutorial:"
    ],
    "code_length": 7,
    "is_duplicate": false,
    "topic": "Tutorial: Tic-Tac-Toe",
    "purpose": "Tutorial: Tic-Tac-Toe",
    "explanation": "Tutorial: Tic-Tac-Toe – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/tutorial-tic-tac-toe",
    "source_title": "Tutorial: Tic-Tac-Toe – React",
    "section": "Tutorial: Tic-Tac-Toe",
    "code": "export default function Board() {\n  // ...\n  const winner = calculateWinner(squares);\n  let status;\n  if (winner) {\n    status = \"Winner: \" + winner;\n  } else {\n    status = \"Next player: \" + (xIsNext ? \"X\" : \"O\");\n  }\n\n  return (\n    <>\n      <div className=\"status\">{status}</div>\n      <div className=\"board-row\">\n        // ...\n  )\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "tictactoe",
      "tutorial:",
      "component"
    ],
    "code_length": 17,
    "is_duplicate": false,
    "topic": "Tutorial: Tic-Tac-Toe",
    "purpose": "Tutorial: Tic-Tac-Toe",
    "explanation": "Tutorial: Tic-Tac-Toe – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/tutorial-tic-tac-toe",
    "source_title": "Tutorial: Tic-Tac-Toe – React",
    "section": "Tutorial: Tic-Tac-Toe",
    "code": "import { useState } from 'react';\n\nfunction Square({value, onSquareClick}) {\n  return (\n    <button className=\"square\" onClick={onSquareClick}>\n      {value}\n    </button>\n  );\n}\n\nexport default function Board() {\n  const [xIsNext, setXIsNext] = useState(true);\n  const [squares, setSquares] = useState(Array(9).fill(null));\n\n  function handleClick(i) {\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n    const nextSquares = squares.slice();\n    if (xIsNext) {\n      nextSquares[i] = 'X';\n    } else {\n      nextSquares[i] = 'O';\n    }\n    setSquares(nextSquares);\n    setXIsNext(!xIsNext);\n  }\n\n  const winner = calculateWinner(squares);\n  let status;\n  if (winner) {\n    status = 'Winner: ' + winner;\n  } else {\n    status = 'Next player: ' + (xIsNext ? 'X' : 'O');\n  }\n\n  return (\n    <>\n      <div className=\"status\">{status}</div>\n      <div className=\"board-row\">\n        <Square value={squares[0]} onSquareClick={() => handleClick(0)} />\n        <Square value={squares[1]} onSquareClick={() => handleClick(1)} />\n        <Square value={squares[2]} onSquareClick={() => handleClick(2)} />\n      </div>\n      <div className=\"board-row\">\n        <Square value={squares[3]} onSquareClick={() => handleClick(3)} />\n        <Square value={squares[4]} onSquareClick={() => handleClick(4)} />\n        <Square value={squares[5]} onSquareClick={() => handleClick(5)} />\n      </div>\n      <div className=\"board-row\">\n        <Square value={squares[6]} onSquareClick={() => handleClick(6)} />\n        <Square value={squares[7]} onSquareClick={() => handleClick(7)} />\n        <Square value={squares[8]} onSquareClick={() => handleClick(8)} />\n      </div>\n    </>\n  );\n}\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "tictactoe",
      "state",
      "tutorial:",
      "component"
    ],
    "code_length": 77,
    "is_duplicate": false,
    "topic": "Tutorial: Tic-Tac-Toe",
    "purpose": "Tutorial: Tic-Tac-Toe",
    "explanation": "Tutorial: Tic-Tac-Toe – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/tutorial-tic-tac-toe",
    "source_title": "Tutorial: Tic-Tac-Toe – React",
    "section": "Tutorial: Tic-Tac-Toe",
    "code": "[\n  // Before first move\n  [null, null, null, null, null, null, null, null, null],\n  // After first move\n  [null, null, null, null, 'X', null, null, null, null],\n  // After second move\n  [null, null, null, null, 'X', null, null, null, 'O'],\n  // ...\n]",
    "code_language": "unknown",
    "code_type": "snippet",
    "tags": [
      "tictactoe",
      "tutorial:"
    ],
    "code_length": 9,
    "is_duplicate": false,
    "topic": "Tutorial: Tic-Tac-Toe",
    "purpose": "Tutorial: Tic-Tac-Toe",
    "explanation": "Tutorial: Tic-Tac-Toe – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/tutorial-tic-tac-toe",
    "source_title": "Tutorial: Tic-Tac-Toe – React",
    "section": "Tutorial: Tic-Tac-Toe",
    "code": "function Board() {\n  // ...\n}\n\nexport default function Game() {\n  return (\n    <div className=\"game\">\n      <div className=\"game-board\">\n        <Board />\n      </div>\n      <div className=\"game-info\">\n        <ol>{/*TODO*/}</ol>\n      </div>\n    </div>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "tictactoe",
      "tutorial:",
      "component"
    ],
    "code_length": 16,
    "is_duplicate": false,
    "topic": "Tutorial: Tic-Tac-Toe",
    "purpose": "Tutorial: Tic-Tac-Toe",
    "explanation": "Tutorial: Tic-Tac-Toe – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/tutorial-tic-tac-toe",
    "source_title": "Tutorial: Tic-Tac-Toe – React",
    "section": "Tutorial: Tic-Tac-Toe",
    "code": "export default function Game() {\n  const [xIsNext, setXIsNext] = useState(true);\n  const [history, setHistory] = useState([Array(9).fill(null)]);\n  // ...",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "tictactoe",
      "state",
      "tutorial:",
      "component"
    ],
    "code_length": 4,
    "is_duplicate": false,
    "topic": "Tutorial: Tic-Tac-Toe",
    "purpose": "Tutorial: Tic-Tac-Toe",
    "explanation": "Tutorial: Tic-Tac-Toe – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/tutorial-tic-tac-toe",
    "source_title": "Tutorial: Tic-Tac-Toe – React",
    "section": "Tutorial: Tic-Tac-Toe",
    "code": "export default function Game() {\n  const [xIsNext, setXIsNext] = useState(true);\n  const [history, setHistory] = useState([Array(9).fill(null)]);\n  const currentSquares = history[history.length - 1];\n  // ...",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "tictactoe",
      "state",
      "tutorial:",
      "component"
    ],
    "code_length": 5,
    "is_duplicate": false,
    "topic": "Tutorial: Tic-Tac-Toe",
    "purpose": "Tutorial: Tic-Tac-Toe",
    "explanation": "Tutorial: Tic-Tac-Toe – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/tutorial-tic-tac-toe",
    "source_title": "Tutorial: Tic-Tac-Toe – React",
    "section": "Tutorial: Tic-Tac-Toe",
    "code": "export default function Game() {\n  const [xIsNext, setXIsNext] = useState(true);\n  const [history, setHistory] = useState([Array(9).fill(null)]);\n  const currentSquares = history[history.length - 1];\n\n  function handlePlay(nextSquares) {\n    // TODO\n  }\n\n  return (\n    <div className=\"game\">\n      <div className=\"game-board\">\n        <Board xIsNext={xIsNext} squares={currentSquares} onPlay={handlePlay} />\n        //...\n  )\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "tictactoe",
      "state",
      "tutorial:",
      "component"
    ],
    "code_length": 16,
    "is_duplicate": false,
    "topic": "Tutorial: Tic-Tac-Toe",
    "purpose": "Tutorial: Tic-Tac-Toe",
    "explanation": "Tutorial: Tic-Tac-Toe – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/tutorial-tic-tac-toe",
    "source_title": "Tutorial: Tic-Tac-Toe – React",
    "section": "Tutorial: Tic-Tac-Toe",
    "code": "function Board({ xIsNext, squares, onPlay }) {\n  function handleClick(i) {\n    //...\n  }\n  // ...\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "tictactoe",
      "tutorial:"
    ],
    "code_length": 6,
    "is_duplicate": false,
    "topic": "Tutorial: Tic-Tac-Toe",
    "purpose": "Tutorial: Tic-Tac-Toe",
    "explanation": "Tutorial: Tic-Tac-Toe – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/tutorial-tic-tac-toe",
    "source_title": "Tutorial: Tic-Tac-Toe – React",
    "section": "Tutorial: Tic-Tac-Toe",
    "code": "function Board({ xIsNext, squares, onPlay }) {\n  function handleClick(i) {\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n    const nextSquares = squares.slice();\n    if (xIsNext) {\n      nextSquares[i] = \"X\";\n    } else {\n      nextSquares[i] = \"O\";\n    }\n    onPlay(nextSquares);\n  }\n  //...\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "tictactoe",
      "tutorial:"
    ],
    "code_length": 15,
    "is_duplicate": false,
    "topic": "Tutorial: Tic-Tac-Toe",
    "purpose": "Tutorial: Tic-Tac-Toe",
    "explanation": "Tutorial: Tic-Tac-Toe – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/tutorial-tic-tac-toe",
    "source_title": "Tutorial: Tic-Tac-Toe – React",
    "section": "Tutorial: Tic-Tac-Toe",
    "code": "export default function Game() {\n  //...\n  function handlePlay(nextSquares) {\n    setHistory([...history, nextSquares]);\n    setXIsNext(!xIsNext);\n  }\n  //...\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "tictactoe",
      "tutorial:",
      "component"
    ],
    "code_length": 8,
    "is_duplicate": false,
    "topic": "Tutorial: Tic-Tac-Toe",
    "purpose": "Tutorial: Tic-Tac-Toe",
    "explanation": "Tutorial: Tic-Tac-Toe – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/tutorial-tic-tac-toe",
    "source_title": "Tutorial: Tic-Tac-Toe – React",
    "section": "Tutorial: Tic-Tac-Toe",
    "code": "import { useState } from 'react';\n\nfunction Square({ value, onSquareClick }) {\n  return (\n    <button className=\"square\" onClick={onSquareClick}>\n      {value}\n    </button>\n  );\n}\n\nfunction Board({ xIsNext, squares, onPlay }) {\n  function handleClick(i) {\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n    const nextSquares = squares.slice();\n    if (xIsNext) {\n      nextSquares[i] = 'X';\n    } else {\n      nextSquares[i] = 'O';\n    }\n    onPlay(nextSquares);\n  }\n\n  const winner = calculateWinner(squares);\n  let status;\n  if (winner) {\n    status = 'Winner: ' + winner;\n  } else {\n    status = 'Next player: ' + (xIsNext ? 'X' : 'O');\n  }\n\n  return (\n    <>\n      <div className=\"status\">{status}</div>\n      <div className=\"board-row\">\n        <Square value={squares[0]} onSquareClick={() => handleClick(0)} />\n        <Square value={squares[1]} onSquareClick={() => handleClick(1)} />\n        <Square value={squares[2]} onSquareClick={() => handleClick(2)} />\n      </div>\n      <div className=\"board-row\">\n        <Square value={squares[3]} onSquareClick={() => handleClick(3)} />\n        <Square value={squares[4]} onSquareClick={() => handleClick(4)} />\n        <Square value={squares[5]} onSquareClick={() => handleClick(5)} />\n      </div>\n      <div className=\"board-row\">\n        <Square value={squares[6]} onSquareClick={() => handleClick(6)} />\n        <Square value={squares[7]} onSquareClick={() => handleClick(7)} />\n        <Square value={squares[8]} onSquareClick={() => handleClick(8)} />\n      </div>\n    </>\n  );\n}\n\nexport default function Game() {\n  const [xIsNext, setXIsNext] = useState(true);\n  const [history, setHistory] = useState([Array(9).fill(null)]);\n  const currentSquares = history[history.length - 1];\n\n  function handlePlay(nextSquares) {\n    setHistory([...history, nextSquares]);\n    setXIsNext(!xIsNext);\n  }\n\n  return (\n    <div className=\"game\">\n      <div className=\"game-board\">\n        <Board xIsNext={xIsNext} squares={currentSquares} onPlay={handlePlay} />\n      </div>\n      <div className=\"game-info\">\n        <ol>{/*TODO*/}</ol>\n      </div>\n    </div>\n  );\n}\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "tictactoe",
      "state",
      "tutorial:",
      "component"
    ],
    "code_length": 95,
    "is_duplicate": false,
    "topic": "Tutorial: Tic-Tac-Toe",
    "purpose": "Tutorial: Tic-Tac-Toe",
    "explanation": "Tutorial: Tic-Tac-Toe – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/tutorial-tic-tac-toe",
    "source_title": "Tutorial: Tic-Tac-Toe – React",
    "section": "Tutorial: Tic-Tac-Toe",
    "code": "[1, 2, 3].map((x) => x * 2) // [2, 4, 6]",
    "code_language": "unknown",
    "code_type": "snippet",
    "tags": [
      "tictactoe",
      "tutorial:"
    ],
    "code_length": 1,
    "is_duplicate": false,
    "topic": "Tutorial: Tic-Tac-Toe",
    "purpose": "Tutorial: Tic-Tac-Toe",
    "explanation": "Tutorial: Tic-Tac-Toe – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/tutorial-tic-tac-toe",
    "source_title": "Tutorial: Tic-Tac-Toe – React",
    "section": "Tutorial: Tic-Tac-Toe",
    "code": "export default function Game() {\n  const [xIsNext, setXIsNext] = useState(true);\n  const [history, setHistory] = useState([Array(9).fill(null)]);\n  const currentSquares = history[history.length - 1];\n\n  function handlePlay(nextSquares) {\n    setHistory([...history, nextSquares]);\n    setXIsNext(!xIsNext);\n  }\n\n  function jumpTo(nextMove) {\n    // TODO\n  }\n\n  const moves = history.map((squares, move) => {\n    let description;\n    if (move > 0) {\n      description = 'Go to move #' + move;\n    } else {\n      description = 'Go to game start';\n    }\n    return (\n      <li>\n        <button onClick={() => jumpTo(move)}>{description}</button>\n      </li>\n    );\n  });\n\n  return (\n    <div className=\"game\">\n      <div className=\"game-board\">\n        <Board xIsNext={xIsNext} squares={currentSquares} onPlay={handlePlay} />\n      </div>\n      <div className=\"game-info\">\n        <ol>{moves}</ol>\n      </div>\n    </div>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "tictactoe",
      "state",
      "tutorial:",
      "component"
    ],
    "code_length": 39,
    "is_duplicate": false,
    "topic": "Tutorial: Tic-Tac-Toe",
    "purpose": "Tutorial: Tic-Tac-Toe",
    "explanation": "Tutorial: Tic-Tac-Toe – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/tutorial-tic-tac-toe",
    "source_title": "Tutorial: Tic-Tac-Toe – React",
    "section": "Tutorial: Tic-Tac-Toe",
    "code": "import { useState } from 'react';\n\nfunction Square({ value, onSquareClick }) {\n  return (\n    <button className=\"square\" onClick={onSquareClick}>\n      {value}\n    </button>\n  );\n}\n\nfunction Board({ xIsNext, squares, onPlay }) {\n  function handleClick(i) {\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n    const nextSquares = squares.slice();\n    if (xIsNext) {\n      nextSquares[i] = 'X';\n    } else {\n      nextSquares[i] = 'O';\n    }\n    onPlay(nextSquares);\n  }\n\n  const winner = calculateWinner(squares);\n  let status;\n  if (winner) {\n    status = 'Winner: ' + winner;\n  } else {\n    status = 'Next player: ' + (xIsNext ? 'X' : 'O');\n  }\n\n  return (\n    <>\n      <div className=\"status\">{status}</div>\n      <div className=\"board-row\">\n        <Square value={squares[0]} onSquareClick={() => handleClick(0)} />\n        <Square value={squares[1]} onSquareClick={() => handleClick(1)} />\n        <Square value={squares[2]} onSquareClick={() => handleClick(2)} />\n      </div>\n      <div className=\"board-row\">\n        <Square value={squares[3]} onSquareClick={() => handleClick(3)} />\n        <Square value={squares[4]} onSquareClick={() => handleClick(4)} />\n        <Square value={squares[5]} onSquareClick={() => handleClick(5)} />\n      </div>\n      <div className=\"board-row\">\n        <Square value={squares[6]} onSquareClick={() => handleClick(6)} />\n        <Square value={squares[7]} onSquareClick={() => handleClick(7)} />\n        <Square value={squares[8]} onSquareClick={() => handleClick(8)} />\n      </div>\n    </>\n  );\n}\n\nexport default function Game() {\n  const [xIsNext, setXIsNext] = useState(true);\n  const [history, setHistory] = useState([Array(9).fill(null)]);\n  const currentSquares = history[history.length - 1];\n\n  function handlePlay(nextSquares) {\n    setHistory([...history, nextSquares]);\n    setXIsNext(!xIsNext);\n  }\n\n  function jumpTo(nextMove) {\n    // TODO\n  }\n\n  const moves = history.map((squares, move) => {\n    let description;\n    if (move > 0) {\n      description = 'Go to move #' + move;\n    } else {\n      description = 'Go to game start';\n    }\n    return (\n      <li>\n        <button onClick={() => jumpTo(move)}>{description}</button>\n      </li>\n    );\n  });\n\n  return (\n    <div className=\"game\">\n      <div className=\"game-board\">\n        <Board xIsNext={xIsNext} squares={currentSquares} onPlay={handlePlay} />\n      </div>\n      <div className=\"game-info\">\n        <ol>{moves}</ol>\n      </div>\n    </div>\n  );\n}\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "tictactoe",
      "state",
      "tutorial:",
      "component"
    ],
    "code_length": 113,
    "is_duplicate": false,
    "topic": "Tutorial: Tic-Tac-Toe",
    "purpose": "Tutorial: Tic-Tac-Toe",
    "explanation": "Tutorial: Tic-Tac-Toe – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/tutorial-tic-tac-toe",
    "source_title": "Tutorial: Tic-Tac-Toe – React",
    "section": "Tutorial: Tic-Tac-Toe",
    "code": "<li>Alexa: 7 tasks left</li>\n<li>Ben: 5 tasks left</li>",
    "code_language": "html/jsx",
    "code_type": "snippet",
    "tags": [
      "tictactoe",
      "tutorial:"
    ],
    "code_length": 2,
    "is_duplicate": false,
    "topic": "Tutorial: Tic-Tac-Toe",
    "purpose": "Tutorial: Tic-Tac-Toe",
    "explanation": "Tutorial: Tic-Tac-Toe – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/tutorial-tic-tac-toe",
    "source_title": "Tutorial: Tic-Tac-Toe – React",
    "section": "Tutorial: Tic-Tac-Toe",
    "code": "<li>Ben: 9 tasks left</li>\n<li>Claudia: 8 tasks left</li>\n<li>Alexa: 5 tasks left</li>",
    "code_language": "html/jsx",
    "code_type": "snippet",
    "tags": [
      "tictactoe",
      "tutorial:"
    ],
    "code_length": 3,
    "is_duplicate": false,
    "topic": "Tutorial: Tic-Tac-Toe",
    "purpose": "Tutorial: Tic-Tac-Toe",
    "explanation": "Tutorial: Tic-Tac-Toe – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/tutorial-tic-tac-toe",
    "source_title": "Tutorial: Tic-Tac-Toe – React",
    "section": "Tutorial: Tic-Tac-Toe",
    "code": "<li key={user.id}>\n  {user.name}: {user.taskCount} tasks left\n</li>",
    "code_language": "html/jsx",
    "code_type": "snippet",
    "tags": [
      "tictactoe",
      "tutorial:"
    ],
    "code_length": 3,
    "is_duplicate": false,
    "topic": "Tutorial: Tic-Tac-Toe",
    "purpose": "Tutorial: Tic-Tac-Toe",
    "explanation": "Tutorial: Tic-Tac-Toe – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/tutorial-tic-tac-toe",
    "source_title": "Tutorial: Tic-Tac-Toe – React",
    "section": "Tutorial: Tic-Tac-Toe",
    "code": "const moves = history.map((squares, move) => {\n  //...\n  return (\n    <li key={move}>\n      <button onClick={() => jumpTo(move)}>{description}</button>\n    </li>\n  );\n});",
    "code_language": "unknown",
    "code_type": "snippet",
    "tags": [
      "tictactoe",
      "tutorial:"
    ],
    "code_length": 8,
    "is_duplicate": false,
    "topic": "Tutorial: Tic-Tac-Toe",
    "purpose": "Tutorial: Tic-Tac-Toe",
    "explanation": "Tutorial: Tic-Tac-Toe – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/tutorial-tic-tac-toe",
    "source_title": "Tutorial: Tic-Tac-Toe – React",
    "section": "Tutorial: Tic-Tac-Toe",
    "code": "import { useState } from 'react';\n\nfunction Square({ value, onSquareClick }) {\n  return (\n    <button className=\"square\" onClick={onSquareClick}>\n      {value}\n    </button>\n  );\n}\n\nfunction Board({ xIsNext, squares, onPlay }) {\n  function handleClick(i) {\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n    const nextSquares = squares.slice();\n    if (xIsNext) {\n      nextSquares[i] = 'X';\n    } else {\n      nextSquares[i] = 'O';\n    }\n    onPlay(nextSquares);\n  }\n\n  const winner = calculateWinner(squares);\n  let status;\n  if (winner) {\n    status = 'Winner: ' + winner;\n  } else {\n    status = 'Next player: ' + (xIsNext ? 'X' : 'O');\n  }\n\n  return (\n    <>\n      <div className=\"status\">{status}</div>\n      <div className=\"board-row\">\n        <Square value={squares[0]} onSquareClick={() => handleClick(0)} />\n        <Square value={squares[1]} onSquareClick={() => handleClick(1)} />\n        <Square value={squares[2]} onSquareClick={() => handleClick(2)} />\n      </div>\n      <div className=\"board-row\">\n        <Square value={squares[3]} onSquareClick={() => handleClick(3)} />\n        <Square value={squares[4]} onSquareClick={() => handleClick(4)} />\n        <Square value={squares[5]} onSquareClick={() => handleClick(5)} />\n      </div>\n      <div className=\"board-row\">\n        <Square value={squares[6]} onSquareClick={() => handleClick(6)} />\n        <Square value={squares[7]} onSquareClick={() => handleClick(7)} />\n        <Square value={squares[8]} onSquareClick={() => handleClick(8)} />\n      </div>\n    </>\n  );\n}\n\nexport default function Game() {\n  const [xIsNext, setXIsNext] = useState(true);\n  const [history, setHistory] = useState([Array(9).fill(null)]);\n  const currentSquares = history[history.length - 1];\n\n  function handlePlay(nextSquares) {\n    setHistory([...history, nextSquares]);\n    setXIsNext(!xIsNext);\n  }\n\n  function jumpTo(nextMove) {\n    // TODO\n  }\n\n  const moves = history.map((squares, move) => {\n    let description;\n    if (move > 0) {\n      description = 'Go to move #' + move;\n    } else {\n      description = 'Go to game start';\n    }\n    return (\n      <li key={move}>\n        <button onClick={() => jumpTo(move)}>{description}</button>\n      </li>\n    );\n  });\n\n  return (\n    <div className=\"game\">\n      <div className=\"game-board\">\n        <Board xIsNext={xIsNext} squares={currentSquares} onPlay={handlePlay} />\n      </div>\n      <div className=\"game-info\">\n        <ol>{moves}</ol>\n      </div>\n    </div>\n  );\n}\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "tictactoe",
      "state",
      "tutorial:",
      "component"
    ],
    "code_length": 113,
    "is_duplicate": false,
    "topic": "Tutorial: Tic-Tac-Toe",
    "purpose": "Tutorial: Tic-Tac-Toe",
    "explanation": "Tutorial: Tic-Tac-Toe – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/tutorial-tic-tac-toe",
    "source_title": "Tutorial: Tic-Tac-Toe – React",
    "section": "Tutorial: Tic-Tac-Toe",
    "code": "export default function Game() {\n  const [xIsNext, setXIsNext] = useState(true);\n  const [history, setHistory] = useState([Array(9).fill(null)]);\n  const [currentMove, setCurrentMove] = useState(0);\n  const currentSquares = history[history.length - 1];\n  //...\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "tictactoe",
      "state",
      "tutorial:",
      "component"
    ],
    "code_length": 7,
    "is_duplicate": false,
    "topic": "Tutorial: Tic-Tac-Toe",
    "purpose": "Tutorial: Tic-Tac-Toe",
    "explanation": "Tutorial: Tic-Tac-Toe – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/tutorial-tic-tac-toe",
    "source_title": "Tutorial: Tic-Tac-Toe – React",
    "section": "Tutorial: Tic-Tac-Toe",
    "code": "export default function Game() {\n  // ...\n  function jumpTo(nextMove) {\n    setCurrentMove(nextMove);\n    setXIsNext(nextMove % 2 === 0);\n  }\n  //...\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "tictactoe",
      "tutorial:",
      "component"
    ],
    "code_length": 8,
    "is_duplicate": false,
    "topic": "Tutorial: Tic-Tac-Toe",
    "purpose": "Tutorial: Tic-Tac-Toe",
    "explanation": "Tutorial: Tic-Tac-Toe – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/tutorial-tic-tac-toe",
    "source_title": "Tutorial: Tic-Tac-Toe – React",
    "section": "Tutorial: Tic-Tac-Toe",
    "code": "function handlePlay(nextSquares) {\n  const nextHistory = [...history.slice(0, currentMove + 1), nextSquares];\n  setHistory(nextHistory);\n  setCurrentMove(nextHistory.length - 1);\n  setXIsNext(!xIsNext);\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "tictactoe",
      "tutorial:"
    ],
    "code_length": 6,
    "is_duplicate": false,
    "topic": "Tutorial: Tic-Tac-Toe",
    "purpose": "Tutorial: Tic-Tac-Toe",
    "explanation": "Tutorial: Tic-Tac-Toe – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/tutorial-tic-tac-toe",
    "source_title": "Tutorial: Tic-Tac-Toe – React",
    "section": "Tutorial: Tic-Tac-Toe",
    "code": "export default function Game() {\n  const [xIsNext, setXIsNext] = useState(true);\n  const [history, setHistory] = useState([Array(9).fill(null)]);\n  const [currentMove, setCurrentMove] = useState(0);\n  const currentSquares = history[currentMove];\n\n  // ...\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "tictactoe",
      "state",
      "tutorial:",
      "component"
    ],
    "code_length": 8,
    "is_duplicate": false,
    "topic": "Tutorial: Tic-Tac-Toe",
    "purpose": "Tutorial: Tic-Tac-Toe",
    "explanation": "Tutorial: Tic-Tac-Toe – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/tutorial-tic-tac-toe",
    "source_title": "Tutorial: Tic-Tac-Toe – React",
    "section": "Tutorial: Tic-Tac-Toe",
    "code": "import { useState } from 'react';\n\nfunction Square({value, onSquareClick}) {\n  return (\n    <button className=\"square\" onClick={onSquareClick}>\n      {value}\n    </button>\n  );\n}\n\nfunction Board({ xIsNext, squares, onPlay }) {\n  function handleClick(i) {\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n    const nextSquares = squares.slice();\n    if (xIsNext) {\n      nextSquares[i] = 'X';\n    } else {\n      nextSquares[i] = 'O';\n    }\n    onPlay(nextSquares);\n  }\n\n  const winner = calculateWinner(squares);\n  let status;\n  if (winner) {\n    status = 'Winner: ' + winner;\n  } else {\n    status = 'Next player: ' + (xIsNext ? 'X' : 'O');\n  }\n\n  return (\n    <>\n      <div className=\"status\">{status}</div>\n      <div className=\"board-row\">\n        <Square value={squares[0]} onSquareClick={() => handleClick(0)} />\n        <Square value={squares[1]} onSquareClick={() => handleClick(1)} />\n        <Square value={squares[2]} onSquareClick={() => handleClick(2)} />\n      </div>\n      <div className=\"board-row\">\n        <Square value={squares[3]} onSquareClick={() => handleClick(3)} />\n        <Square value={squares[4]} onSquareClick={() => handleClick(4)} />\n        <Square value={squares[5]} onSquareClick={() => handleClick(5)} />\n      </div>\n      <div className=\"board-row\">\n        <Square value={squares[6]} onSquareClick={() => handleClick(6)} />\n        <Square value={squares[7]} onSquareClick={() => handleClick(7)} />\n        <Square value={squares[8]} onSquareClick={() => handleClick(8)} />\n      </div>\n    </>\n  );\n}\n\nexport default function Game() {\n  const [xIsNext, setXIsNext] = useState(true);\n  const [history, setHistory] = useState([Array(9).fill(null)]);\n  const [currentMove, setCurrentMove] = useState(0);\n  const currentSquares = history[currentMove];\n\n  function handlePlay(nextSquares) {\n    const nextHistory = [...history.slice(0, currentMove + 1), nextSquares];\n    setHistory(nextHistory);\n    setCurrentMove(nextHistory.length - 1);\n    setXIsNext(!xIsNext);\n  }\n\n  function jumpTo(nextMove) {\n    setCurrentMove(nextMove);\n    setXIsNext(nextMove % 2 === 0);\n  }\n\n  const moves = history.map((squares, move) => {\n    let description;\n    if (move > 0) {\n      description = 'Go to move #' + move;\n    } else {\n      description = 'Go to game start';\n    }\n    return (\n      <li key={move}>\n        <button onClick={() => jumpTo(move)}>{description}</button>\n      </li>\n    );\n  });\n\n  return (\n    <div className=\"game\">\n      <div className=\"game-board\">\n        <Board xIsNext={xIsNext} squares={currentSquares} onPlay={handlePlay} />\n      </div>\n      <div className=\"game-info\">\n        <ol>{moves}</ol>\n      </div>\n    </div>\n  );\n}\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "tictactoe",
      "state",
      "tutorial:",
      "component"
    ],
    "code_length": 117,
    "is_duplicate": false,
    "topic": "Tutorial: Tic-Tac-Toe",
    "purpose": "Tutorial: Tic-Tac-Toe",
    "explanation": "Tutorial: Tic-Tac-Toe – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/tutorial-tic-tac-toe",
    "source_title": "Tutorial: Tic-Tac-Toe – React",
    "section": "Tutorial: Tic-Tac-Toe",
    "code": "export default function Game() {\n  const [history, setHistory] = useState([Array(9).fill(null)]);\n  const [currentMove, setCurrentMove] = useState(0);\n  const xIsNext = currentMove % 2 === 0;\n  const currentSquares = history[currentMove];\n\n  function handlePlay(nextSquares) {\n    const nextHistory = [...history.slice(0, currentMove + 1), nextSquares];\n    setHistory(nextHistory);\n    setCurrentMove(nextHistory.length - 1);\n  }\n\n  function jumpTo(nextMove) {\n    setCurrentMove(nextMove);\n  }\n  // ...\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "tictactoe",
      "state",
      "tutorial:",
      "component"
    ],
    "code_length": 17,
    "is_duplicate": false,
    "topic": "Tutorial: Tic-Tac-Toe",
    "purpose": "Tutorial: Tic-Tac-Toe",
    "explanation": "Tutorial: Tic-Tac-Toe – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/tutorial-tic-tac-toe",
    "source_title": "Tutorial: Tic-Tac-Toe – React",
    "section": "Tutorial: Tic-Tac-Toe",
    "code": "import { useState } from 'react';\n\nfunction Square({ value, onSquareClick }) {\n  return (\n    <button className=\"square\" onClick={onSquareClick}>\n      {value}\n    </button>\n  );\n}\n\nfunction Board({ xIsNext, squares, onPlay }) {\n  function handleClick(i) {\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n    const nextSquares = squares.slice();\n    if (xIsNext) {\n      nextSquares[i] = 'X';\n    } else {\n      nextSquares[i] = 'O';\n    }\n    onPlay(nextSquares);\n  }\n\n  const winner = calculateWinner(squares);\n  let status;\n  if (winner) {\n    status = 'Winner: ' + winner;\n  } else {\n    status = 'Next player: ' + (xIsNext ? 'X' : 'O');\n  }\n\n  return (\n    <>\n      <div className=\"status\">{status}</div>\n      <div className=\"board-row\">\n        <Square value={squares[0]} onSquareClick={() => handleClick(0)} />\n        <Square value={squares[1]} onSquareClick={() => handleClick(1)} />\n        <Square value={squares[2]} onSquareClick={() => handleClick(2)} />\n      </div>\n      <div className=\"board-row\">\n        <Square value={squares[3]} onSquareClick={() => handleClick(3)} />\n        <Square value={squares[4]} onSquareClick={() => handleClick(4)} />\n        <Square value={squares[5]} onSquareClick={() => handleClick(5)} />\n      </div>\n      <div className=\"board-row\">\n        <Square value={squares[6]} onSquareClick={() => handleClick(6)} />\n        <Square value={squares[7]} onSquareClick={() => handleClick(7)} />\n        <Square value={squares[8]} onSquareClick={() => handleClick(8)} />\n      </div>\n    </>\n  );\n}\n\nexport default function Game() {\n  const [history, setHistory] = useState([Array(9).fill(null)]);\n  const [currentMove, setCurrentMove] = useState(0);\n  const xIsNext = currentMove % 2 === 0;\n  const currentSquares = history[currentMove];\n\n  function handlePlay(nextSquares) {\n    const nextHistory = [...history.slice(0, currentMove + 1), nextSquares];\n    setHistory(nextHistory);\n    setCurrentMove(nextHistory.length - 1);\n  }\n\n  function jumpTo(nextMove) {\n    setCurrentMove(nextMove);\n  }\n\n  const moves = history.map((squares, move) => {\n    let description;\n    if (move > 0) {\n      description = 'Go to move #' + move;\n    } else {\n      description = 'Go to game start';\n    }\n    return (\n      <li key={move}>\n        <button onClick={() => jumpTo(move)}>{description}</button>\n      </li>\n    );\n  });\n\n  return (\n    <div className=\"game\">\n      <div className=\"game-board\">\n        <Board xIsNext={xIsNext} squares={currentSquares} onPlay={handlePlay} />\n      </div>\n      <div className=\"game-info\">\n        <ol>{moves}</ol>\n      </div>\n    </div>\n  );\n}\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "tictactoe",
      "state",
      "tutorial:",
      "component"
    ],
    "code_length": 115,
    "is_duplicate": false,
    "topic": "Tutorial: Tic-Tac-Toe",
    "purpose": "Tutorial: Tic-Tac-Toe",
    "explanation": "Tutorial: Tic-Tac-Toe – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/responding-to-events",
    "source_title": "Responding to Events – React",
    "section": "Responding to Events",
    "code": "export default function Button() {\n  function handleClick() {\n    alert('You clicked me!');\n  }\n\n  return (\n    <button onClick={handleClick}>\n      Click me\n    </button>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "responding",
      "events",
      "component"
    ],
    "code_length": 11,
    "is_duplicate": false,
    "topic": "Responding to Events",
    "purpose": "Responding to Events",
    "explanation": "Responding to Events – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/responding-to-events",
    "source_title": "Responding to Events – React",
    "section": "Responding to Events",
    "code": "<button onClick={function handleClick() {\n  alert('You clicked me!');\n}}>",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "responding",
      "events"
    ],
    "code_length": 3,
    "is_duplicate": false,
    "topic": "Responding to Events",
    "purpose": "Responding to Events",
    "explanation": "Responding to Events – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/responding-to-events",
    "source_title": "Responding to Events – React",
    "section": "Responding to Events",
    "code": "<button onClick={() => {\n  alert('You clicked me!');\n}}>",
    "code_language": "html/jsx",
    "code_type": "snippet",
    "tags": [
      "responding",
      "events"
    ],
    "code_length": 3,
    "is_duplicate": false,
    "topic": "Responding to Events",
    "purpose": "Responding to Events",
    "explanation": "Responding to Events – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/responding-to-events",
    "source_title": "Responding to Events – React",
    "section": "Responding to Events",
    "code": "// This alert fires when the component renders, not when clicked!\n<button onClick={alert('You clicked me!')}>",
    "code_language": "unknown",
    "code_type": "snippet",
    "tags": [
      "responding",
      "events"
    ],
    "code_length": 2,
    "is_duplicate": false,
    "topic": "Responding to Events",
    "purpose": "Responding to Events",
    "explanation": "Responding to Events – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/responding-to-events",
    "source_title": "Responding to Events – React",
    "section": "Responding to Events",
    "code": "<button onClick={() => alert('You clicked me!')}>",
    "code_language": "html/jsx",
    "code_type": "snippet",
    "tags": [
      "responding",
      "events"
    ],
    "code_length": 1,
    "is_duplicate": false,
    "topic": "Responding to Events",
    "purpose": "Responding to Events",
    "explanation": "Responding to Events – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/responding-to-events",
    "source_title": "Responding to Events – React",
    "section": "Responding to Events",
    "code": "function AlertButton({ message, children }) {\n  return (\n    <button onClick={() => alert(message)}>\n      {children}\n    </button>\n  );\n}\n\nexport default function Toolbar() {\n  return (\n    <div>\n      <AlertButton message=\"Playing!\">\n        Play Movie\n      </AlertButton>\n      <AlertButton message=\"Uploading!\">\n        Upload Image\n      </AlertButton>\n    </div>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "responding",
      "events",
      "component"
    ],
    "code_length": 20,
    "is_duplicate": false,
    "topic": "Responding to Events",
    "purpose": "Responding to Events",
    "explanation": "Responding to Events – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/responding-to-events",
    "source_title": "Responding to Events – React",
    "section": "Responding to Events",
    "code": "function Button({ onClick, children }) {\n  return (\n    <button onClick={onClick}>\n      {children}\n    </button>\n  );\n}\n\nfunction PlayButton({ movieName }) {\n  function handlePlayClick() {\n    alert(`Playing ${movieName}!`);\n  }\n\n  return (\n    <Button onClick={handlePlayClick}>\n      Play \"{movieName}\"\n    </Button>\n  );\n}\n\nfunction UploadButton() {\n  return (\n    <Button onClick={() => alert('Uploading!')}>\n      Upload Image\n    </Button>\n  );\n}\n\nexport default function Toolbar() {\n  return (\n    <div>\n      <PlayButton movieName=\"Kiki's Delivery Service\" />\n      <UploadButton />\n    </div>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "responding",
      "events",
      "component"
    ],
    "code_length": 36,
    "is_duplicate": false,
    "topic": "Responding to Events",
    "purpose": "Responding to Events",
    "explanation": "Responding to Events – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/responding-to-events",
    "source_title": "Responding to Events – React",
    "section": "Responding to Events",
    "code": "function Button({ onSmash, children }) {\n  return (\n    <button onClick={onSmash}>\n      {children}\n    </button>\n  );\n}\n\nexport default function App() {\n  return (\n    <div>\n      <Button onSmash={() => alert('Playing!')}>\n        Play Movie\n      </Button>\n      <Button onSmash={() => alert('Uploading!')}>\n        Upload Image\n      </Button>\n    </div>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "responding",
      "events",
      "component"
    ],
    "code_length": 20,
    "is_duplicate": false,
    "topic": "Responding to Events",
    "purpose": "Responding to Events",
    "explanation": "Responding to Events – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/responding-to-events",
    "source_title": "Responding to Events – React",
    "section": "Responding to Events",
    "code": "export default function App() {\n  return (\n    <Toolbar\n      onPlayMovie={() => alert('Playing!')}\n      onUploadImage={() => alert('Uploading!')}\n    />\n  );\n}\n\nfunction Toolbar({ onPlayMovie, onUploadImage }) {\n  return (\n    <div>\n      <Button onClick={onPlayMovie}>\n        Play Movie\n      </Button>\n      <Button onClick={onUploadImage}>\n        Upload Image\n      </Button>\n    </div>\n  );\n}\n\nfunction Button({ onClick, children }) {\n  return (\n    <button onClick={onClick}>\n      {children}\n    </button>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "responding",
      "events",
      "component"
    ],
    "code_length": 29,
    "is_duplicate": false,
    "topic": "Responding to Events",
    "purpose": "Responding to Events",
    "explanation": "Responding to Events – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/responding-to-events",
    "source_title": "Responding to Events – React",
    "section": "Responding to Events",
    "code": "export default function Toolbar() {\n  return (\n    <div className=\"Toolbar\" onClick={() => {\n      alert('You clicked on the toolbar!');\n    }}>\n      <button onClick={() => alert('Playing!')}>\n        Play Movie\n      </button>\n      <button onClick={() => alert('Uploading!')}>\n        Upload Image\n      </button>\n    </div>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "responding",
      "events",
      "component"
    ],
    "code_length": 14,
    "is_duplicate": false,
    "topic": "Responding to Events",
    "purpose": "Responding to Events",
    "explanation": "Responding to Events – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/responding-to-events",
    "source_title": "Responding to Events – React",
    "section": "Responding to Events",
    "code": "function Button({ onClick, children }) {\n  return (\n    <button onClick={e => {\n      e.stopPropagation();\n      onClick();\n    }}>\n      {children}\n    </button>\n  );\n}\n\nexport default function Toolbar() {\n  return (\n    <div className=\"Toolbar\" onClick={() => {\n      alert('You clicked on the toolbar!');\n    }}>\n      <Button onClick={() => alert('Playing!')}>\n        Play Movie\n      </Button>\n      <Button onClick={() => alert('Uploading!')}>\n        Upload Image\n      </Button>\n    </div>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "responding",
      "events",
      "component"
    ],
    "code_length": 25,
    "is_duplicate": false,
    "topic": "Responding to Events",
    "purpose": "Responding to Events",
    "explanation": "Responding to Events – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/responding-to-events",
    "source_title": "Responding to Events – React",
    "section": "Responding to Events",
    "code": "function Button({ onClick, children }) {\n  return (\n    <button onClick={e => {\n      e.stopPropagation();\n      onClick();\n    }}>\n      {children}\n    </button>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "responding",
      "events"
    ],
    "code_length": 10,
    "is_duplicate": false,
    "topic": "Responding to Events",
    "purpose": "Responding to Events",
    "explanation": "Responding to Events – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/responding-to-events",
    "source_title": "Responding to Events – React",
    "section": "Responding to Events",
    "code": "export default function Signup() {\n  return (\n    <form onSubmit={() => alert('Submitting!')}>\n      <input />\n      <button>Send</button>\n    </form>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "responding",
      "events",
      "component"
    ],
    "code_length": 8,
    "is_duplicate": false,
    "topic": "Responding to Events",
    "purpose": "Responding to Events",
    "explanation": "Responding to Events – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/responding-to-events",
    "source_title": "Responding to Events – React",
    "section": "Responding to Events",
    "code": "export default function Signup() {\n  return (\n    <form onSubmit={e => {\n      e.preventDefault();\n      alert('Submitting!');\n    }}>\n      <input />\n      <button>Send</button>\n    </form>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "responding",
      "events",
      "component"
    ],
    "code_length": 11,
    "is_duplicate": false,
    "topic": "Responding to Events",
    "purpose": "Responding to Events",
    "explanation": "Responding to Events – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/responding-to-events",
    "source_title": "Responding to Events – React",
    "section": "Responding to Events",
    "code": "export default function LightSwitch() {\n  function handleClick() {\n    let bodyStyle = document.body.style;\n    if (bodyStyle.backgroundColor === 'black') {\n      bodyStyle.backgroundColor = 'white';\n    } else {\n      bodyStyle.backgroundColor = 'black';\n    }\n  }\n\n  return (\n    <button onClick={handleClick()}>\n      Toggle the lights\n    </button>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "responding",
      "events",
      "component"
    ],
    "code_length": 16,
    "is_duplicate": false,
    "topic": "Responding to Events",
    "purpose": "Responding to Events",
    "explanation": "Responding to Events – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/understanding-your-ui-as-a-tree",
    "source_title": "Understanding Your UI as a Tree – React",
    "section": "Understanding Your UI as a Tree",
    "code": "import FancyText from './FancyText';\nimport InspirationGenerator from './InspirationGenerator';\nimport Copyright from './Copyright';\n\nexport default function App() {\n  return (\n    <>\n      <FancyText title text=\"Get Inspired App\" />\n      <InspirationGenerator>\n        <Copyright year={2004} />\n      </InspirationGenerator>\n    </>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "tree",
      "ui",
      "understanding",
      "your",
      "component"
    ],
    "code_length": 14,
    "is_duplicate": false,
    "topic": "Understanding Your UI as a Tree",
    "purpose": "Understanding Your UI as a Tree",
    "explanation": "Understanding Your UI as a Tree – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/understanding-your-ui-as-a-tree",
    "source_title": "Understanding Your UI as a Tree – React",
    "section": "Understanding Your UI as a Tree",
    "code": "import FancyText from './FancyText';\nimport InspirationGenerator from './InspirationGenerator';\nimport Copyright from './Copyright';\n\nexport default function App() {\n  return (\n    <>\n      <FancyText title text=\"Get Inspired App\" />\n      <InspirationGenerator>\n        <Copyright year={2004} />\n      </InspirationGenerator>\n    </>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "tree",
      "ui",
      "understanding",
      "your",
      "component"
    ],
    "code_length": 14,
    "is_duplicate": true,
    "topic": "Understanding Your UI as a Tree",
    "purpose": "Understanding Your UI as a Tree",
    "explanation": "Understanding Your UI as a Tree – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/updating-objects-in-state",
    "source_title": "Updating Objects in State – React",
    "section": "Updating Objects in State",
    "code": "const [x, setX] = useState(0);",
    "code_language": "unknown",
    "code_type": "snippet",
    "tags": [
      "objects",
      "state",
      "updating"
    ],
    "code_length": 1,
    "is_duplicate": false,
    "topic": "Updating Objects in State",
    "purpose": "Updating Objects in State",
    "explanation": "Updating Objects in State – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/updating-objects-in-state",
    "source_title": "Updating Objects in State – React",
    "section": "Updating Objects in State",
    "code": "setX(5);",
    "code_language": "unknown",
    "code_type": "snippet",
    "tags": [
      "objects",
      "state",
      "updating"
    ],
    "code_length": 1,
    "is_duplicate": false,
    "topic": "Updating Objects in State",
    "purpose": "Updating Objects in State",
    "explanation": "Updating Objects in State – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/updating-objects-in-state",
    "source_title": "Updating Objects in State – React",
    "section": "Updating Objects in State",
    "code": "const [position, setPosition] = useState({ x: 0, y: 0 });",
    "code_language": "unknown",
    "code_type": "snippet",
    "tags": [
      "objects",
      "state",
      "updating"
    ],
    "code_length": 1,
    "is_duplicate": true,
    "topic": "Updating Objects in State",
    "purpose": "Updating Objects in State",
    "explanation": "Updating Objects in State – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/updating-objects-in-state",
    "source_title": "Updating Objects in State – React",
    "section": "Updating Objects in State",
    "code": "position.x = 5;",
    "code_language": "unknown",
    "code_type": "snippet",
    "tags": [
      "objects",
      "state",
      "updating"
    ],
    "code_length": 1,
    "is_duplicate": false,
    "topic": "Updating Objects in State",
    "purpose": "Updating Objects in State",
    "explanation": "Updating Objects in State – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/updating-objects-in-state",
    "source_title": "Updating Objects in State – React",
    "section": "Updating Objects in State",
    "code": "import { useState } from 'react';\n\nexport default function MovingDot() {\n  const [position, setPosition] = useState({\n    x: 0,\n    y: 0\n  });\n  return (\n    <div\n      onPointerMove={e => {\n        position.x = e.clientX;\n        position.y = e.clientY;\n      }}\n      style={{\n        position: 'relative',\n        width: '100vw',\n        height: '100vh',\n      }}>\n      <div style={{\n        position: 'absolute',\n        backgroundColor: 'red',\n        borderRadius: '50%',\n        transform: `translate(${position.x}px, ${position.y}px)`,\n        left: -10,\n        top: -10,\n        width: 20,\n        height: 20,\n      }} />\n    </div>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "objects",
      "component",
      "state",
      "updating"
    ],
    "code_length": 31,
    "is_duplicate": false,
    "topic": "Updating Objects in State",
    "purpose": "Updating Objects in State",
    "explanation": "Updating Objects in State – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/updating-objects-in-state",
    "source_title": "Updating Objects in State – React",
    "section": "Updating Objects in State",
    "code": "onPointerMove={e => {\n  position.x = e.clientX;\n  position.y = e.clientY;\n}}",
    "code_language": "unknown",
    "code_type": "snippet",
    "tags": [
      "objects",
      "state",
      "updating"
    ],
    "code_length": 4,
    "is_duplicate": false,
    "topic": "Updating Objects in State",
    "purpose": "Updating Objects in State",
    "explanation": "Updating Objects in State – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/updating-objects-in-state",
    "source_title": "Updating Objects in State – React",
    "section": "Updating Objects in State",
    "code": "onPointerMove={e => {\n  setPosition({\n    x: e.clientX,\n    y: e.clientY\n  });\n}}",
    "code_language": "unknown",
    "code_type": "snippet",
    "tags": [
      "objects",
      "state",
      "updating"
    ],
    "code_length": 6,
    "is_duplicate": false,
    "topic": "Updating Objects in State",
    "purpose": "Updating Objects in State",
    "explanation": "Updating Objects in State – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/updating-objects-in-state",
    "source_title": "Updating Objects in State – React",
    "section": "Updating Objects in State",
    "code": "import { useState } from 'react';\n\nexport default function MovingDot() {\n  const [position, setPosition] = useState({\n    x: 0,\n    y: 0\n  });\n  return (\n    <div\n      onPointerMove={e => {\n        setPosition({\n          x: e.clientX,\n          y: e.clientY\n        });\n      }}\n      style={{\n        position: 'relative',\n        width: '100vw',\n        height: '100vh',\n      }}>\n      <div style={{\n        position: 'absolute',\n        backgroundColor: 'red',\n        borderRadius: '50%',\n        transform: `translate(${position.x}px, ${position.y}px)`,\n        left: -10,\n        top: -10,\n        width: 20,\n        height: 20,\n      }} />\n    </div>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "objects",
      "component",
      "state",
      "updating"
    ],
    "code_length": 33,
    "is_duplicate": false,
    "topic": "Updating Objects in State",
    "purpose": "Updating Objects in State",
    "explanation": "Updating Objects in State – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/updating-objects-in-state",
    "source_title": "Updating Objects in State – React",
    "section": "Updating Objects in State",
    "code": "import { useState } from 'react';\n\nexport default function Form() {\n  const [person, setPerson] = useState({\n    firstName: 'Barbara',\n    lastName: 'Hepworth',\n    email: 'bhepworth@sculpture.com'\n  });\n\n  function handleFirstNameChange(e) {\n    person.firstName = e.target.value;\n  }\n\n  function handleLastNameChange(e) {\n    person.lastName = e.target.value;\n  }\n\n  function handleEmailChange(e) {\n    person.email = e.target.value;\n  }\n\n  return (\n    <>\n      <label>\n        First name:\n        <input\n          value={person.firstName}\n          onChange={handleFirstNameChange}\n        />\n      </label>\n      <label>\n        Last name:\n        <input\n          value={person.lastName}\n          onChange={handleLastNameChange}\n        />\n      </label>\n      <label>\n        Email:\n        <input\n          value={person.email}\n          onChange={handleEmailChange}\n        />\n      </label>\n      <p>\n        {person.firstName}{' '}\n        {person.lastName}{' '}\n        ({person.email})\n      </p>\n    </>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "objects",
      "component",
      "state",
      "updating"
    ],
    "code_length": 52,
    "is_duplicate": false,
    "topic": "Updating Objects in State",
    "purpose": "Updating Objects in State",
    "explanation": "Updating Objects in State – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/updating-objects-in-state",
    "source_title": "Updating Objects in State – React",
    "section": "Updating Objects in State",
    "code": "person.firstName = e.target.value;",
    "code_language": "unknown",
    "code_type": "snippet",
    "tags": [
      "objects",
      "state",
      "updating"
    ],
    "code_length": 1,
    "is_duplicate": false,
    "topic": "Updating Objects in State",
    "purpose": "Updating Objects in State",
    "explanation": "Updating Objects in State – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/updating-objects-in-state",
    "source_title": "Updating Objects in State – React",
    "section": "Updating Objects in State",
    "code": "setPerson({\n  firstName: e.target.value, // New first name from the input\n  lastName: person.lastName,\n  email: person.email\n});",
    "code_language": "unknown",
    "code_type": "snippet",
    "tags": [
      "objects",
      "state",
      "updating"
    ],
    "code_length": 5,
    "is_duplicate": false,
    "topic": "Updating Objects in State",
    "purpose": "Updating Objects in State",
    "explanation": "Updating Objects in State – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/updating-objects-in-state",
    "source_title": "Updating Objects in State – React",
    "section": "Updating Objects in State",
    "code": "setPerson({\n  ...person, // Copy the old fields\n  firstName: e.target.value // But override this one\n});",
    "code_language": "unknown",
    "code_type": "snippet",
    "tags": [
      "objects",
      "state",
      "updating"
    ],
    "code_length": 4,
    "is_duplicate": false,
    "topic": "Updating Objects in State",
    "purpose": "Updating Objects in State",
    "explanation": "Updating Objects in State – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/updating-objects-in-state",
    "source_title": "Updating Objects in State – React",
    "section": "Updating Objects in State",
    "code": "import { useState } from 'react';\n\nexport default function Form() {\n  const [person, setPerson] = useState({\n    firstName: 'Barbara',\n    lastName: 'Hepworth',\n    email: 'bhepworth@sculpture.com'\n  });\n\n  function handleFirstNameChange(e) {\n    setPerson({\n      ...person,\n      firstName: e.target.value\n    });\n  }\n\n  function handleLastNameChange(e) {\n    setPerson({\n      ...person,\n      lastName: e.target.value\n    });\n  }\n\n  function handleEmailChange(e) {\n    setPerson({\n      ...person,\n      email: e.target.value\n    });\n  }\n\n  return (\n    <>\n      <label>\n        First name:\n        <input\n          value={person.firstName}\n          onChange={handleFirstNameChange}\n        />\n      </label>\n      <label>\n        Last name:\n        <input\n          value={person.lastName}\n          onChange={handleLastNameChange}\n        />\n      </label>\n      <label>\n        Email:\n        <input\n          value={person.email}\n          onChange={handleEmailChange}\n        />\n      </label>\n      <p>\n        {person.firstName}{' '}\n        {person.lastName}{' '}\n        ({person.email})\n      </p>\n    </>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "objects",
      "component",
      "state",
      "updating"
    ],
    "code_length": 61,
    "is_duplicate": false,
    "topic": "Updating Objects in State",
    "purpose": "Updating Objects in State",
    "explanation": "Updating Objects in State – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/updating-objects-in-state",
    "source_title": "Updating Objects in State – React",
    "section": "Updating Objects in State",
    "code": "const [person, setPerson] = useState({\n  name: 'Niki de Saint Phalle',\n  artwork: {\n    title: 'Blue Nana',\n    city: 'Hamburg',\n    image: 'https://i.imgur.com/Sd1AgUOm.jpg',\n  }\n});",
    "code_language": "unknown",
    "code_type": "snippet",
    "tags": [
      "objects",
      "state",
      "updating"
    ],
    "code_length": 8,
    "is_duplicate": false,
    "topic": "Updating Objects in State",
    "purpose": "Updating Objects in State",
    "explanation": "Updating Objects in State – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/updating-objects-in-state",
    "source_title": "Updating Objects in State – React",
    "section": "Updating Objects in State",
    "code": "person.artwork.city = 'New Delhi';",
    "code_language": "unknown",
    "code_type": "snippet",
    "tags": [
      "objects",
      "state",
      "updating"
    ],
    "code_length": 1,
    "is_duplicate": false,
    "topic": "Updating Objects in State",
    "purpose": "Updating Objects in State",
    "explanation": "Updating Objects in State – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/updating-objects-in-state",
    "source_title": "Updating Objects in State – React",
    "section": "Updating Objects in State",
    "code": "const nextArtwork = { ...person.artwork, city: 'New Delhi' };\nconst nextPerson = { ...person, artwork: nextArtwork };\nsetPerson(nextPerson);",
    "code_language": "unknown",
    "code_type": "snippet",
    "tags": [
      "objects",
      "state",
      "updating"
    ],
    "code_length": 3,
    "is_duplicate": false,
    "topic": "Updating Objects in State",
    "purpose": "Updating Objects in State",
    "explanation": "Updating Objects in State – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/updating-objects-in-state",
    "source_title": "Updating Objects in State – React",
    "section": "Updating Objects in State",
    "code": "setPerson({\n  ...person, // Copy other fields\n  artwork: { // but replace the artwork\n    ...person.artwork, // with the same one\n    city: 'New Delhi' // but in New Delhi!\n  }\n});",
    "code_language": "unknown",
    "code_type": "snippet",
    "tags": [
      "objects",
      "state",
      "updating"
    ],
    "code_length": 7,
    "is_duplicate": false,
    "topic": "Updating Objects in State",
    "purpose": "Updating Objects in State",
    "explanation": "Updating Objects in State – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/updating-objects-in-state",
    "source_title": "Updating Objects in State – React",
    "section": "Updating Objects in State",
    "code": "import { useState } from 'react';\n\nexport default function Form() {\n  const [person, setPerson] = useState({\n    name: 'Niki de Saint Phalle',\n    artwork: {\n      title: 'Blue Nana',\n      city: 'Hamburg',\n      image: 'https://i.imgur.com/Sd1AgUOm.jpg',\n    }\n  });\n\n  function handleNameChange(e) {\n    setPerson({\n      ...person,\n      name: e.target.value\n    });\n  }\n\n  function handleTitleChange(e) {\n    setPerson({\n      ...person,\n      artwork: {\n        ...person.artwork,\n        title: e.target.value\n      }\n    });\n  }\n\n  function handleCityChange(e) {\n    setPerson({\n      ...person,\n      artwork: {\n        ...person.artwork,\n        city: e.target.value\n      }\n    });\n  }\n\n  function handleImageChange(e) {\n    setPerson({\n      ...person,\n      artwork: {\n        ...person.artwork,\n        image: e.target.value\n      }\n    });\n  }\n\n  return (\n    <>\n      <label>\n        Name:\n        <input\n          value={person.name}\n          onChange={handleNameChange}\n        />\n      </label>\n      <label>\n        Title:\n        <input\n          value={person.artwork.title}\n          onChange={handleTitleChange}\n        />\n      </label>\n      <label>\n        City:\n        <input\n          value={person.artwork.city}\n          onChange={handleCityChange}\n        />\n      </label>\n      <label>\n        Image:\n        <input\n          value={person.artwork.image}\n          onChange={handleImageChange}\n        />\n      </label>\n      <p>\n        <i>{person.artwork.title}</i>\n        {' by '}\n        {person.name}\n        <br />\n        (located in {person.artwork.city})\n      </p>\n      <img \n        src={person.artwork.image} \n        alt={person.artwork.title}\n      />\n    </>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "objects",
      "component",
      "state",
      "updating"
    ],
    "code_length": 93,
    "is_duplicate": false,
    "topic": "Updating Objects in State",
    "purpose": "Updating Objects in State",
    "explanation": "Updating Objects in State – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/updating-objects-in-state",
    "source_title": "Updating Objects in State – React",
    "section": "Updating Objects in State",
    "code": "updatePerson(draft => {\n  draft.artwork.city = 'Lagos';\n});",
    "code_language": "unknown",
    "code_type": "snippet",
    "tags": [
      "objects",
      "state",
      "updating"
    ],
    "code_length": 3,
    "is_duplicate": false,
    "topic": "Updating Objects in State",
    "purpose": "Updating Objects in State",
    "explanation": "Updating Objects in State – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/updating-objects-in-state",
    "source_title": "Updating Objects in State – React",
    "section": "Updating Objects in State",
    "code": "{\n  \"dependencies\": {\n    \"immer\": \"1.7.3\",\n    \"react\": \"latest\",\n    \"react-dom\": \"latest\",\n    \"react-scripts\": \"latest\",\n    \"use-immer\": \"0.5.1\"\n  },\n  \"scripts\": {\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n    \"test\": \"react-scripts test --env=jsdom\",\n    \"eject\": \"react-scripts eject\"\n  },\n  \"devDependencies\": {}\n}",
    "code_language": "unknown",
    "code_type": "snippet",
    "tags": [
      "objects",
      "state",
      "updating"
    ],
    "code_length": 16,
    "is_duplicate": true,
    "topic": "Updating Objects in State",
    "purpose": "Updating Objects in State",
    "explanation": "Updating Objects in State – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/updating-objects-in-state",
    "source_title": "Updating Objects in State – React",
    "section": "Updating Objects in State",
    "code": "import { useState } from 'react';\n\nexport default function Scoreboard() {\n  const [player, setPlayer] = useState({\n    firstName: 'Ranjani',\n    lastName: 'Shettar',\n    score: 10,\n  });\n\n  function handlePlusClick() {\n    player.score++;\n  }\n\n  function handleFirstNameChange(e) {\n    setPlayer({\n      ...player,\n      firstName: e.target.value,\n    });\n  }\n\n  function handleLastNameChange(e) {\n    setPlayer({\n      lastName: e.target.value\n    });\n  }\n\n  return (\n    <>\n      <label>\n        Score: <b>{player.score}</b>\n        {' '}\n        <button onClick={handlePlusClick}>\n          +1\n        </button>\n      </label>\n      <label>\n        First name:\n        <input\n          value={player.firstName}\n          onChange={handleFirstNameChange}\n        />\n      </label>\n      <label>\n        Last name:\n        <input\n          value={player.lastName}\n          onChange={handleLastNameChange}\n        />\n      </label>\n    </>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "objects",
      "component",
      "state",
      "updating"
    ],
    "code_length": 52,
    "is_duplicate": false,
    "topic": "Updating Objects in State",
    "purpose": "Updating Objects in State",
    "explanation": "Updating Objects in State – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/removing-effect-dependencies",
    "source_title": "Removing Effect Dependencies – React",
    "section": "Removing Effect Dependencies",
    "code": "const serverUrl = 'https://localhost:1234';\n\nfunction ChatRoom({ roomId }) {\n  useEffect(() => {\n    const connection = createConnection(serverUrl, roomId);\n    connection.connect();\n    return () => connection.disconnect();\n   // ...\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "dependencies",
      "removing",
      "effect"
    ],
    "code_length": 9,
    "is_duplicate": false,
    "topic": "Removing Effect Dependencies",
    "purpose": "Removing Effect Dependencies",
    "explanation": "Removing Effect Dependencies – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/removing-effect-dependencies",
    "source_title": "Removing Effect Dependencies – React",
    "section": "Removing Effect Dependencies",
    "code": "function ChatRoom({ roomId }) {\n  useEffect(() => {\n    const connection = createConnection(serverUrl, roomId);\n    connection.connect();\n    return () => connection.disconnect();\n  }, [roomId]); // ✅ All dependencies declared\n  // ...\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "dependencies",
      "removing",
      "effect"
    ],
    "code_length": 8,
    "is_duplicate": false,
    "topic": "Removing Effect Dependencies",
    "purpose": "Removing Effect Dependencies",
    "explanation": "Removing Effect Dependencies – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/removing-effect-dependencies",
    "source_title": "Removing Effect Dependencies – React",
    "section": "Removing Effect Dependencies",
    "code": "import { useState, useEffect } from 'react';\nimport { createConnection } from './chat.js';\n\nconst serverUrl = 'https://localhost:1234';\n\nfunction ChatRoom({ roomId }) {\n  useEffect(() => {\n    const connection = createConnection(serverUrl, roomId);\n    connection.connect();\n    return () => connection.disconnect();\n  }, [roomId]);\n  return <h1>Welcome to the {roomId} room!</h1>;\n}\n\nexport default function App() {\n  const [roomId, setRoomId] = useState('general');\n  return (\n    <>\n      <label>\n        Choose the chat room:{' '}\n        <select\n          value={roomId}\n          onChange={e => setRoomId(e.target.value)}\n        >\n          <option value=\"general\">general</option>\n          <option value=\"travel\">travel</option>\n          <option value=\"music\">music</option>\n        </select>\n      </label>\n      <hr />\n      <ChatRoom roomId={roomId} />\n    </>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "effect",
      "dependencies",
      "state",
      "component",
      "removing"
    ],
    "code_length": 34,
    "is_duplicate": false,
    "topic": "Removing Effect Dependencies",
    "purpose": "Removing Effect Dependencies",
    "explanation": "Removing Effect Dependencies – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/removing-effect-dependencies",
    "source_title": "Removing Effect Dependencies – React",
    "section": "Removing Effect Dependencies",
    "code": "const serverUrl = 'https://localhost:1234';\n\nfunction ChatRoom({ roomId }) { // This is a reactive value\n  useEffect(() => {\n    const connection = createConnection(serverUrl, roomId); // This Effect reads that reactive value\n    connection.connect();\n    return () => connection.disconnect();\n  }, [roomId]); // ✅ So you must specify that reactive value as a dependency of your Effect\n  // ...\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "dependencies",
      "removing",
      "effect"
    ],
    "code_length": 10,
    "is_duplicate": false,
    "topic": "Removing Effect Dependencies",
    "purpose": "Removing Effect Dependencies",
    "explanation": "Removing Effect Dependencies – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/removing-effect-dependencies",
    "source_title": "Removing Effect Dependencies – React",
    "section": "Removing Effect Dependencies",
    "code": "const serverUrl = 'https://localhost:1234';\n\nfunction ChatRoom({ roomId }) {\n  useEffect(() => {\n    const connection = createConnection(serverUrl, roomId);\n    connection.connect();\n    return () => connection.disconnect();\n  }, []); // 🔴 React Hook useEffect has a missing dependency: 'roomId'\n  // ...\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "dependencies",
      "removing",
      "effect"
    ],
    "code_length": 10,
    "is_duplicate": false,
    "topic": "Removing Effect Dependencies",
    "purpose": "Removing Effect Dependencies",
    "explanation": "Removing Effect Dependencies – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/removing-effect-dependencies",
    "source_title": "Removing Effect Dependencies – React",
    "section": "Removing Effect Dependencies",
    "code": "const serverUrl = 'https://localhost:1234';\nconst roomId = 'music'; // Not a reactive value anymore\n\nfunction ChatRoom() {\n  useEffect(() => {\n    const connection = createConnection(serverUrl, roomId);\n    connection.connect();\n    return () => connection.disconnect();\n  }, []); // ✅ All dependencies declared\n  // ...\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "dependencies",
      "removing",
      "effect"
    ],
    "code_length": 11,
    "is_duplicate": false,
    "topic": "Removing Effect Dependencies",
    "purpose": "Removing Effect Dependencies",
    "explanation": "Removing Effect Dependencies – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/removing-effect-dependencies",
    "source_title": "Removing Effect Dependencies – React",
    "section": "Removing Effect Dependencies",
    "code": "import { useState, useEffect } from 'react';\nimport { createConnection } from './chat.js';\n\nconst serverUrl = 'https://localhost:1234';\nconst roomId = 'music';\n\nexport default function ChatRoom() {\n  useEffect(() => {\n    const connection = createConnection(serverUrl, roomId);\n    connection.connect();\n    return () => connection.disconnect();\n  }, []);\n  return <h1>Welcome to the {roomId} room!</h1>;\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "effect",
      "dependencies",
      "state",
      "component",
      "removing"
    ],
    "code_length": 14,
    "is_duplicate": false,
    "topic": "Removing Effect Dependencies",
    "purpose": "Removing Effect Dependencies",
    "explanation": "Removing Effect Dependencies – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/removing-effect-dependencies",
    "source_title": "Removing Effect Dependencies – React",
    "section": "Removing Effect Dependencies",
    "code": "useEffect(() => {\n  // ...\n  // 🔴 Avoid suppressing the linter like this:\n  // eslint-ignore-next-line react-hooks/exhaustive-deps\n}, []);",
    "code_language": "unknown",
    "code_type": "snippet",
    "tags": [
      "dependencies",
      "removing",
      "effect"
    ],
    "code_length": 5,
    "is_duplicate": true,
    "topic": "Removing Effect Dependencies",
    "purpose": "Removing Effect Dependencies",
    "explanation": "Removing Effect Dependencies – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/removing-effect-dependencies",
    "source_title": "Removing Effect Dependencies – React",
    "section": "Removing Effect Dependencies",
    "code": "function Form() {\n  const [submitted, setSubmitted] = useState(false);\n\n  useEffect(() => {\n    if (submitted) {\n      // 🔴 Avoid: Event-specific logic inside an Effect\n      post('/api/register');\n      showNotification('Successfully registered!');\n    }\n  }, [submitted]);\n\n  function handleSubmit() {\n    setSubmitted(true);\n  }\n\n  // ...\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "dependencies",
      "removing",
      "effect",
      "state"
    ],
    "code_length": 17,
    "is_duplicate": false,
    "topic": "Removing Effect Dependencies",
    "purpose": "Removing Effect Dependencies",
    "explanation": "Removing Effect Dependencies – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/removing-effect-dependencies",
    "source_title": "Removing Effect Dependencies – React",
    "section": "Removing Effect Dependencies",
    "code": "function Form() {\n  const [submitted, setSubmitted] = useState(false);\n  const theme = useContext(ThemeContext);\n\n  useEffect(() => {\n    if (submitted) {\n      // 🔴 Avoid: Event-specific logic inside an Effect\n      post('/api/register');\n      showNotification('Successfully registered!', theme);\n    }\n  }, [submitted, theme]); // ✅ All dependencies declared\n\n  function handleSubmit() {\n    setSubmitted(true);\n  }  \n\n  // ...\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "dependencies",
      "removing",
      "effect",
      "state"
    ],
    "code_length": 18,
    "is_duplicate": false,
    "topic": "Removing Effect Dependencies",
    "purpose": "Removing Effect Dependencies",
    "explanation": "Removing Effect Dependencies – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/removing-effect-dependencies",
    "source_title": "Removing Effect Dependencies – React",
    "section": "Removing Effect Dependencies",
    "code": "function Form() {\n  const theme = useContext(ThemeContext);\n\n  function handleSubmit() {\n    // ✅ Good: Event-specific logic is called from event handlers\n    post('/api/register');\n    showNotification('Successfully registered!', theme);\n  }  \n\n  // ...\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "dependencies",
      "removing",
      "effect"
    ],
    "code_length": 11,
    "is_duplicate": false,
    "topic": "Removing Effect Dependencies",
    "purpose": "Removing Effect Dependencies",
    "explanation": "Removing Effect Dependencies – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/removing-effect-dependencies",
    "source_title": "Removing Effect Dependencies – React",
    "section": "Removing Effect Dependencies",
    "code": "function ShippingForm({ country }) {\n  const [cities, setCities] = useState(null);\n  const [city, setCity] = useState(null);\n\n  useEffect(() => {\n    let ignore = false;\n    fetch(`/api/cities?country=${country}`)\n      .then(response => response.json())\n      .then(json => {\n        if (!ignore) {\n          setCities(json);\n        }\n      });\n    return () => {\n      ignore = true;\n    };\n  }, [country]); // ✅ All dependencies declared\n\n  // ...",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "dependencies",
      "removing",
      "effect",
      "state"
    ],
    "code_length": 19,
    "is_duplicate": false,
    "topic": "Removing Effect Dependencies",
    "purpose": "Removing Effect Dependencies",
    "explanation": "Removing Effect Dependencies – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/removing-effect-dependencies",
    "source_title": "Removing Effect Dependencies – React",
    "section": "Removing Effect Dependencies",
    "code": "function ShippingForm({ country }) {\n  const [cities, setCities] = useState(null);\n  const [city, setCity] = useState(null);\n  const [areas, setAreas] = useState(null);\n\n  useEffect(() => {\n    let ignore = false;\n    fetch(`/api/cities?country=${country}`)\n      .then(response => response.json())\n      .then(json => {\n        if (!ignore) {\n          setCities(json);\n        }\n      });\n    // 🔴 Avoid: A single Effect synchronizes two independent processes\n    if (city) {\n      fetch(`/api/areas?city=${city}`)\n        .then(response => response.json())\n        .then(json => {\n          if (!ignore) {\n            setAreas(json);\n          }\n        });\n    }\n    return () => {\n      ignore = true;\n    };\n  }, [country, city]); // ✅ All dependencies declared\n\n  // ...",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "dependencies",
      "removing",
      "effect",
      "state"
    ],
    "code_length": 30,
    "is_duplicate": false,
    "topic": "Removing Effect Dependencies",
    "purpose": "Removing Effect Dependencies",
    "explanation": "Removing Effect Dependencies – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/removing-effect-dependencies",
    "source_title": "Removing Effect Dependencies – React",
    "section": "Removing Effect Dependencies",
    "code": "function ShippingForm({ country }) {\n  const [cities, setCities] = useState(null);\n  useEffect(() => {\n    let ignore = false;\n    fetch(`/api/cities?country=${country}`)\n      .then(response => response.json())\n      .then(json => {\n        if (!ignore) {\n          setCities(json);\n        }\n      });\n    return () => {\n      ignore = true;\n    };\n  }, [country]); // ✅ All dependencies declared\n\n  const [city, setCity] = useState(null);\n  const [areas, setAreas] = useState(null);\n  useEffect(() => {\n    if (city) {\n      let ignore = false;\n      fetch(`/api/areas?city=${city}`)\n        .then(response => response.json())\n        .then(json => {\n          if (!ignore) {\n            setAreas(json);\n          }\n        });\n      return () => {\n        ignore = true;\n      };\n    }\n  }, [city]); // ✅ All dependencies declared\n\n  // ...",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "dependencies",
      "removing",
      "effect",
      "state"
    ],
    "code_length": 35,
    "is_duplicate": false,
    "topic": "Removing Effect Dependencies",
    "purpose": "Removing Effect Dependencies",
    "explanation": "Removing Effect Dependencies – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/removing-effect-dependencies",
    "source_title": "Removing Effect Dependencies – React",
    "section": "Removing Effect Dependencies",
    "code": "function ChatRoom({ roomId }) {\n  const [messages, setMessages] = useState([]);\n  useEffect(() => {\n    const connection = createConnection();\n    connection.connect();\n    connection.on('message', (receivedMessage) => {\n      setMessages([...messages, receivedMessage]);\n    });\n    // ...",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "dependencies",
      "removing",
      "effect",
      "state"
    ],
    "code_length": 9,
    "is_duplicate": false,
    "topic": "Removing Effect Dependencies",
    "purpose": "Removing Effect Dependencies",
    "explanation": "Removing Effect Dependencies – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/removing-effect-dependencies",
    "source_title": "Removing Effect Dependencies – React",
    "section": "Removing Effect Dependencies",
    "code": "function ChatRoom({ roomId }) {\n  const [messages, setMessages] = useState([]);\n  useEffect(() => {\n    const connection = createConnection();\n    connection.connect();\n    connection.on('message', (receivedMessage) => {\n      setMessages([...messages, receivedMessage]);\n    });\n    return () => connection.disconnect();\n  }, [roomId, messages]); // ✅ All dependencies declared\n  // ...",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "dependencies",
      "removing",
      "effect",
      "state"
    ],
    "code_length": 11,
    "is_duplicate": false,
    "topic": "Removing Effect Dependencies",
    "purpose": "Removing Effect Dependencies",
    "explanation": "Removing Effect Dependencies – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/removing-effect-dependencies",
    "source_title": "Removing Effect Dependencies – React",
    "section": "Removing Effect Dependencies",
    "code": "function ChatRoom({ roomId }) {\n  const [messages, setMessages] = useState([]);\n  useEffect(() => {\n    const connection = createConnection();\n    connection.connect();\n    connection.on('message', (receivedMessage) => {\n      setMessages(msgs => [...msgs, receivedMessage]);\n    });\n    return () => connection.disconnect();\n  }, [roomId]); // ✅ All dependencies declared\n  // ...",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "dependencies",
      "removing",
      "effect",
      "state"
    ],
    "code_length": 11,
    "is_duplicate": false,
    "topic": "Removing Effect Dependencies",
    "purpose": "Removing Effect Dependencies",
    "explanation": "Removing Effect Dependencies – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/removing-effect-dependencies",
    "source_title": "Removing Effect Dependencies – React",
    "section": "Removing Effect Dependencies",
    "code": "function ChatRoom({ roomId }) {\n  const [messages, setMessages] = useState([]);\n  const [isMuted, setIsMuted] = useState(false);\n\n  useEffect(() => {\n    const connection = createConnection();\n    connection.connect();\n    connection.on('message', (receivedMessage) => {\n      setMessages(msgs => [...msgs, receivedMessage]);\n      if (!isMuted) {\n        playSound();\n      }\n    });\n    // ...",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "dependencies",
      "removing",
      "effect",
      "state"
    ],
    "code_length": 14,
    "is_duplicate": false,
    "topic": "Removing Effect Dependencies",
    "purpose": "Removing Effect Dependencies",
    "explanation": "Removing Effect Dependencies – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/removing-effect-dependencies",
    "source_title": "Removing Effect Dependencies – React",
    "section": "Removing Effect Dependencies",
    "code": "function ChatRoom({ roomId }) {\n  const [messages, setMessages] = useState([]);\n  const [isMuted, setIsMuted] = useState(false);\n\n  useEffect(() => {\n    const connection = createConnection();\n    connection.connect();\n    connection.on('message', (receivedMessage) => {\n      setMessages(msgs => [...msgs, receivedMessage]);\n      if (!isMuted) {\n        playSound();\n      }\n    });\n    return () => connection.disconnect();\n  }, [roomId, isMuted]); // ✅ All dependencies declared\n  // ...",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "dependencies",
      "removing",
      "effect",
      "state"
    ],
    "code_length": 16,
    "is_duplicate": false,
    "topic": "Removing Effect Dependencies",
    "purpose": "Removing Effect Dependencies",
    "explanation": "Removing Effect Dependencies – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/removing-effect-dependencies",
    "source_title": "Removing Effect Dependencies – React",
    "section": "Removing Effect Dependencies",
    "code": "import { useState, useEffect, useEffectEvent } from 'react';\n\nfunction ChatRoom({ roomId }) {\n  const [messages, setMessages] = useState([]);\n  const [isMuted, setIsMuted] = useState(false);\n\n  const onMessage = useEffectEvent(receivedMessage => {\n    setMessages(msgs => [...msgs, receivedMessage]);\n    if (!isMuted) {\n      playSound();\n    }\n  });\n\n  useEffect(() => {\n    const connection = createConnection();\n    connection.connect();\n    connection.on('message', (receivedMessage) => {\n      onMessage(receivedMessage);\n    });\n    return () => connection.disconnect();\n  }, [roomId]); // ✅ All dependencies declared\n  // ...",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "dependencies",
      "removing",
      "effect",
      "state"
    ],
    "code_length": 22,
    "is_duplicate": false,
    "topic": "Removing Effect Dependencies",
    "purpose": "Removing Effect Dependencies",
    "explanation": "Removing Effect Dependencies – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/removing-effect-dependencies",
    "source_title": "Removing Effect Dependencies – React",
    "section": "Removing Effect Dependencies",
    "code": "function ChatRoom({ roomId, onReceiveMessage }) {\n  const [messages, setMessages] = useState([]);\n\n  useEffect(() => {\n    const connection = createConnection();\n    connection.connect();\n    connection.on('message', (receivedMessage) => {\n      onReceiveMessage(receivedMessage);\n    });\n    return () => connection.disconnect();\n  }, [roomId, onReceiveMessage]); // ✅ All dependencies declared\n  // ...",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "dependencies",
      "removing",
      "effect",
      "state"
    ],
    "code_length": 12,
    "is_duplicate": false,
    "topic": "Removing Effect Dependencies",
    "purpose": "Removing Effect Dependencies",
    "explanation": "Removing Effect Dependencies – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/removing-effect-dependencies",
    "source_title": "Removing Effect Dependencies – React",
    "section": "Removing Effect Dependencies",
    "code": "<ChatRoom\n  roomId={roomId}\n  onReceiveMessage={receivedMessage => {\n    // ...\n  }}\n/>",
    "code_language": "html/jsx",
    "code_type": "snippet",
    "tags": [
      "dependencies",
      "removing",
      "effect"
    ],
    "code_length": 6,
    "is_duplicate": false,
    "topic": "Removing Effect Dependencies",
    "purpose": "Removing Effect Dependencies",
    "explanation": "Removing Effect Dependencies – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/removing-effect-dependencies",
    "source_title": "Removing Effect Dependencies – React",
    "section": "Removing Effect Dependencies",
    "code": "function ChatRoom({ roomId, onReceiveMessage }) {\n  const [messages, setMessages] = useState([]);\n\n  const onMessage = useEffectEvent(receivedMessage => {\n    onReceiveMessage(receivedMessage);\n  });\n\n  useEffect(() => {\n    const connection = createConnection();\n    connection.connect();\n    connection.on('message', (receivedMessage) => {\n      onMessage(receivedMessage);\n    });\n    return () => connection.disconnect();\n  }, [roomId]); // ✅ All dependencies declared\n  // ...",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "dependencies",
      "removing",
      "effect",
      "state"
    ],
    "code_length": 16,
    "is_duplicate": false,
    "topic": "Removing Effect Dependencies",
    "purpose": "Removing Effect Dependencies",
    "explanation": "Removing Effect Dependencies – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/removing-effect-dependencies",
    "source_title": "Removing Effect Dependencies – React",
    "section": "Removing Effect Dependencies",
    "code": "function Chat({ roomId, notificationCount }) {\n  const onVisit = useEffectEvent(visitedRoomId => {\n    logVisit(visitedRoomId, notificationCount);\n  });\n\n  useEffect(() => {\n    onVisit(roomId);\n  }, [roomId]); // ✅ All dependencies declared\n  // ...\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "dependencies",
      "removing",
      "effect"
    ],
    "code_length": 10,
    "is_duplicate": false,
    "topic": "Removing Effect Dependencies",
    "purpose": "Removing Effect Dependencies",
    "explanation": "Removing Effect Dependencies – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/removing-effect-dependencies",
    "source_title": "Removing Effect Dependencies – React",
    "section": "Removing Effect Dependencies",
    "code": "function ChatRoom({ roomId }) {\n  // ...\n  const options = {\n    serverUrl: serverUrl,\n    roomId: roomId\n  };\n\n  useEffect(() => {\n    const connection = createConnection(options);\n    connection.connect();\n    // ...",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "dependencies",
      "removing",
      "effect"
    ],
    "code_length": 11,
    "is_duplicate": false,
    "topic": "Removing Effect Dependencies",
    "purpose": "Removing Effect Dependencies",
    "explanation": "Removing Effect Dependencies – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/removing-effect-dependencies",
    "source_title": "Removing Effect Dependencies – React",
    "section": "Removing Effect Dependencies",
    "code": "// ...\n  useEffect(() => {\n    const connection = createConnection(options);\n    connection.connect();\n    return () => connection.disconnect();\n  }, [options]); // ✅ All dependencies declared\n  // ...",
    "code_language": "unknown",
    "code_type": "snippet",
    "tags": [
      "dependencies",
      "removing",
      "effect"
    ],
    "code_length": 7,
    "is_duplicate": false,
    "topic": "Removing Effect Dependencies",
    "purpose": "Removing Effect Dependencies",
    "explanation": "Removing Effect Dependencies – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/removing-effect-dependencies",
    "source_title": "Removing Effect Dependencies – React",
    "section": "Removing Effect Dependencies",
    "code": "import { useState, useEffect } from 'react';\nimport { createConnection } from './chat.js';\n\nconst serverUrl = 'https://localhost:1234';\n\nfunction ChatRoom({ roomId }) {\n  const [message, setMessage] = useState('');\n\n  // Temporarily disable the linter to demonstrate the problem\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const options = {\n    serverUrl: serverUrl,\n    roomId: roomId\n  };\n\n  useEffect(() => {\n    const connection = createConnection(options);\n    connection.connect();\n    return () => connection.disconnect();\n  }, [options]);\n\n  return (\n    <>\n      <h1>Welcome to the {roomId} room!</h1>\n      <input value={message} onChange={e => setMessage(e.target.value)} />\n    </>\n  );\n}\n\nexport default function App() {\n  const [roomId, setRoomId] = useState('general');\n  return (\n    <>\n      <label>\n        Choose the chat room:{' '}\n        <select\n          value={roomId}\n          onChange={e => setRoomId(e.target.value)}\n        >\n          <option value=\"general\">general</option>\n          <option value=\"travel\">travel</option>\n          <option value=\"music\">music</option>\n        </select>\n      </label>\n      <hr />\n      <ChatRoom roomId={roomId} />\n    </>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "effect",
      "dependencies",
      "state",
      "component",
      "removing"
    ],
    "code_length": 49,
    "is_duplicate": false,
    "topic": "Removing Effect Dependencies",
    "purpose": "Removing Effect Dependencies",
    "explanation": "Removing Effect Dependencies – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/removing-effect-dependencies",
    "source_title": "Removing Effect Dependencies – React",
    "section": "Removing Effect Dependencies",
    "code": "// During the first render\nconst options1 = { serverUrl: 'https://localhost:1234', roomId: 'music' };\n\n// During the next render\nconst options2 = { serverUrl: 'https://localhost:1234', roomId: 'music' };\n\n// These are two different objects!\nconsole.log(Object.is(options1, options2)); // false",
    "code_language": "unknown",
    "code_type": "snippet",
    "tags": [
      "dependencies",
      "removing",
      "effect"
    ],
    "code_length": 8,
    "is_duplicate": false,
    "topic": "Removing Effect Dependencies",
    "purpose": "Removing Effect Dependencies",
    "explanation": "Removing Effect Dependencies – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/removing-effect-dependencies",
    "source_title": "Removing Effect Dependencies – React",
    "section": "Removing Effect Dependencies",
    "code": "const options = {\n  serverUrl: 'https://localhost:1234',\n  roomId: 'music'\n};\n\nfunction ChatRoom() {\n  const [message, setMessage] = useState('');\n\n  useEffect(() => {\n    const connection = createConnection(options);\n    connection.connect();\n    return () => connection.disconnect();\n  }, []); // ✅ All dependencies declared\n  // ...",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "dependencies",
      "removing",
      "effect",
      "state"
    ],
    "code_length": 14,
    "is_duplicate": false,
    "topic": "Removing Effect Dependencies",
    "purpose": "Removing Effect Dependencies",
    "explanation": "Removing Effect Dependencies – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/removing-effect-dependencies",
    "source_title": "Removing Effect Dependencies – React",
    "section": "Removing Effect Dependencies",
    "code": "function createOptions() {\n  return {\n    serverUrl: 'https://localhost:1234',\n    roomId: 'music'\n  };\n}\n\nfunction ChatRoom() {\n  const [message, setMessage] = useState('');\n\n  useEffect(() => {\n    const options = createOptions();\n    const connection = createConnection(options);\n    connection.connect();\n    return () => connection.disconnect();\n  }, []); // ✅ All dependencies declared\n  // ...",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "dependencies",
      "removing",
      "effect",
      "state"
    ],
    "code_length": 17,
    "is_duplicate": false,
    "topic": "Removing Effect Dependencies",
    "purpose": "Removing Effect Dependencies",
    "explanation": "Removing Effect Dependencies – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/removing-effect-dependencies",
    "source_title": "Removing Effect Dependencies – React",
    "section": "Removing Effect Dependencies",
    "code": "const serverUrl = 'https://localhost:1234';\n\nfunction ChatRoom({ roomId }) {\n  const [message, setMessage] = useState('');\n\n  useEffect(() => {\n    const options = {\n      serverUrl: serverUrl,\n      roomId: roomId\n    };\n    const connection = createConnection(options);\n    connection.connect();\n    return () => connection.disconnect();\n  }, [roomId]); // ✅ All dependencies declared\n  // ...",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "dependencies",
      "removing",
      "effect",
      "state"
    ],
    "code_length": 15,
    "is_duplicate": false,
    "topic": "Removing Effect Dependencies",
    "purpose": "Removing Effect Dependencies",
    "explanation": "Removing Effect Dependencies – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/removing-effect-dependencies",
    "source_title": "Removing Effect Dependencies – React",
    "section": "Removing Effect Dependencies",
    "code": "// During the first render\nconst roomId1 = 'music';\n\n// During the next render\nconst roomId2 = 'music';\n\n// These two strings are the same!\nconsole.log(Object.is(roomId1, roomId2)); // true",
    "code_language": "unknown",
    "code_type": "snippet",
    "tags": [
      "dependencies",
      "removing",
      "effect"
    ],
    "code_length": 8,
    "is_duplicate": false,
    "topic": "Removing Effect Dependencies",
    "purpose": "Removing Effect Dependencies",
    "explanation": "Removing Effect Dependencies – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/removing-effect-dependencies",
    "source_title": "Removing Effect Dependencies – React",
    "section": "Removing Effect Dependencies",
    "code": "import { useState, useEffect } from 'react';\nimport { createConnection } from './chat.js';\n\nconst serverUrl = 'https://localhost:1234';\n\nfunction ChatRoom({ roomId }) {\n  const [message, setMessage] = useState('');\n\n  useEffect(() => {\n    const options = {\n      serverUrl: serverUrl,\n      roomId: roomId\n    };\n    const connection = createConnection(options);\n    connection.connect();\n    return () => connection.disconnect();\n  }, [roomId]);\n\n  return (\n    <>\n      <h1>Welcome to the {roomId} room!</h1>\n      <input value={message} onChange={e => setMessage(e.target.value)} />\n    </>\n  );\n}\n\nexport default function App() {\n  const [roomId, setRoomId] = useState('general');\n  return (\n    <>\n      <label>\n        Choose the chat room:{' '}\n        <select\n          value={roomId}\n          onChange={e => setRoomId(e.target.value)}\n        >\n          <option value=\"general\">general</option>\n          <option value=\"travel\">travel</option>\n          <option value=\"music\">music</option>\n        </select>\n      </label>\n      <hr />\n      <ChatRoom roomId={roomId} />\n    </>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "effect",
      "dependencies",
      "state",
      "component",
      "removing"
    ],
    "code_length": 46,
    "is_duplicate": true,
    "topic": "Removing Effect Dependencies",
    "purpose": "Removing Effect Dependencies",
    "explanation": "Removing Effect Dependencies – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/removing-effect-dependencies",
    "source_title": "Removing Effect Dependencies – React",
    "section": "Removing Effect Dependencies",
    "code": "const serverUrl = 'https://localhost:1234';\n\nfunction ChatRoom({ roomId }) {\n  const [message, setMessage] = useState('');\n\n  useEffect(() => {\n    function createOptions() {\n      return {\n        serverUrl: serverUrl,\n        roomId: roomId\n      };\n    }\n\n    const options = createOptions();\n    const connection = createConnection(options);\n    connection.connect();\n    return () => connection.disconnect();\n  }, [roomId]); // ✅ All dependencies declared\n  // ...",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "dependencies",
      "removing",
      "effect",
      "state"
    ],
    "code_length": 19,
    "is_duplicate": false,
    "topic": "Removing Effect Dependencies",
    "purpose": "Removing Effect Dependencies",
    "explanation": "Removing Effect Dependencies – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/removing-effect-dependencies",
    "source_title": "Removing Effect Dependencies – React",
    "section": "Removing Effect Dependencies",
    "code": "function ChatRoom({ options }) {\n  const [message, setMessage] = useState('');\n\n  useEffect(() => {\n    const connection = createConnection(options);\n    connection.connect();\n    return () => connection.disconnect();\n  }, [options]); // ✅ All dependencies declared\n  // ...",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "dependencies",
      "removing",
      "effect",
      "state"
    ],
    "code_length": 9,
    "is_duplicate": false,
    "topic": "Removing Effect Dependencies",
    "purpose": "Removing Effect Dependencies",
    "explanation": "Removing Effect Dependencies – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/removing-effect-dependencies",
    "source_title": "Removing Effect Dependencies – React",
    "section": "Removing Effect Dependencies",
    "code": "<ChatRoom\n  roomId={roomId}\n  options={{\n    serverUrl: serverUrl,\n    roomId: roomId\n  }}\n/>",
    "code_language": "html/jsx",
    "code_type": "snippet",
    "tags": [
      "dependencies",
      "removing",
      "effect"
    ],
    "code_length": 7,
    "is_duplicate": false,
    "topic": "Removing Effect Dependencies",
    "purpose": "Removing Effect Dependencies",
    "explanation": "Removing Effect Dependencies – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/removing-effect-dependencies",
    "source_title": "Removing Effect Dependencies – React",
    "section": "Removing Effect Dependencies",
    "code": "function ChatRoom({ options }) {\n  const [message, setMessage] = useState('');\n\n  const { roomId, serverUrl } = options;\n  useEffect(() => {\n    const connection = createConnection({\n      roomId: roomId,\n      serverUrl: serverUrl\n    });\n    connection.connect();\n    return () => connection.disconnect();\n  }, [roomId, serverUrl]); // ✅ All dependencies declared\n  // ...",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "dependencies",
      "removing",
      "effect",
      "state"
    ],
    "code_length": 13,
    "is_duplicate": false,
    "topic": "Removing Effect Dependencies",
    "purpose": "Removing Effect Dependencies",
    "explanation": "Removing Effect Dependencies – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/removing-effect-dependencies",
    "source_title": "Removing Effect Dependencies – React",
    "section": "Removing Effect Dependencies",
    "code": "<ChatRoom\n  roomId={roomId}\n  getOptions={() => {\n    return {\n      serverUrl: serverUrl,\n      roomId: roomId\n    };\n  }}\n/>",
    "code_language": "html/jsx",
    "code_type": "snippet",
    "tags": [
      "dependencies",
      "removing",
      "effect"
    ],
    "code_length": 9,
    "is_duplicate": false,
    "topic": "Removing Effect Dependencies",
    "purpose": "Removing Effect Dependencies",
    "explanation": "Removing Effect Dependencies – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/removing-effect-dependencies",
    "source_title": "Removing Effect Dependencies – React",
    "section": "Removing Effect Dependencies",
    "code": "function ChatRoom({ getOptions }) {\n  const [message, setMessage] = useState('');\n\n  const { roomId, serverUrl } = getOptions();\n  useEffect(() => {\n    const connection = createConnection({\n      roomId: roomId,\n      serverUrl: serverUrl\n    });\n    connection.connect();\n    return () => connection.disconnect();\n  }, [roomId, serverUrl]); // ✅ All dependencies declared\n  // ...",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "dependencies",
      "removing",
      "effect",
      "state"
    ],
    "code_length": 13,
    "is_duplicate": false,
    "topic": "Removing Effect Dependencies",
    "purpose": "Removing Effect Dependencies",
    "explanation": "Removing Effect Dependencies – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/removing-effect-dependencies",
    "source_title": "Removing Effect Dependencies – React",
    "section": "Removing Effect Dependencies",
    "code": "import { useState, useEffect } from 'react';\n\nexport default function Timer() {\n  const [count, setCount] = useState(0);\n\n  useEffect(() => {\n    console.log('✅ Creating an interval');\n    const id = setInterval(() => {\n      console.log('⏰ Interval tick');\n      setCount(count + 1);\n    }, 1000);\n    return () => {\n      console.log('❌ Clearing an interval');\n      clearInterval(id);\n    };\n  }, [count]);\n\n  return <h1>Counter: {count}</h1>\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "effect",
      "dependencies",
      "state",
      "component",
      "removing"
    ],
    "code_length": 19,
    "is_duplicate": false,
    "topic": "Removing Effect Dependencies",
    "purpose": "Removing Effect Dependencies",
    "explanation": "Removing Effect Dependencies – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/conditional-rendering",
    "source_title": "Conditional Rendering – React",
    "section": "Conditional Rendering",
    "code": "if (isPacked) {\n  return <li className=\"item\">{name} ✅</li>;\n}\nreturn <li className=\"item\">{name}</li>;",
    "code_language": "unknown",
    "code_type": "class",
    "tags": [
      "conditional",
      "rendering"
    ],
    "code_length": 4,
    "is_duplicate": false,
    "topic": "Conditional Rendering",
    "purpose": "Conditional Rendering",
    "explanation": "Conditional Rendering – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/conditional-rendering",
    "source_title": "Conditional Rendering – React",
    "section": "Conditional Rendering",
    "code": "function Item({ name, isPacked }) {\n  if (isPacked) {\n    return <li className=\"item\">{name} ✅</li>;\n  }\n  return <li className=\"item\">{name}</li>;\n}\n\nexport default function PackingList() {\n  return (\n    <section>\n      <h1>Sally Ride's Packing List</h1>\n      <ul>\n        <Item \n          isPacked={true} \n          name=\"Space suit\" \n        />\n        <Item \n          isPacked={true} \n          name=\"Helmet with a golden leaf\" \n        />\n        <Item \n          isPacked={false} \n          name=\"Photo of Tam\" \n        />\n      </ul>\n    </section>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "component",
      "conditional",
      "rendering"
    ],
    "code_length": 28,
    "is_duplicate": false,
    "topic": "Conditional Rendering",
    "purpose": "Conditional Rendering",
    "explanation": "Conditional Rendering – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/conditional-rendering",
    "source_title": "Conditional Rendering – React",
    "section": "Conditional Rendering",
    "code": "if (isPacked) {\n  return null;\n}\nreturn <li className=\"item\">{name}</li>;",
    "code_language": "unknown",
    "code_type": "class",
    "tags": [
      "conditional",
      "rendering"
    ],
    "code_length": 4,
    "is_duplicate": false,
    "topic": "Conditional Rendering",
    "purpose": "Conditional Rendering",
    "explanation": "Conditional Rendering – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/conditional-rendering",
    "source_title": "Conditional Rendering – React",
    "section": "Conditional Rendering",
    "code": "function Item({ name, isPacked }) {\n  if (isPacked) {\n    return null;\n  }\n  return <li className=\"item\">{name}</li>;\n}\n\nexport default function PackingList() {\n  return (\n    <section>\n      <h1>Sally Ride's Packing List</h1>\n      <ul>\n        <Item \n          isPacked={true} \n          name=\"Space suit\" \n        />\n        <Item \n          isPacked={true} \n          name=\"Helmet with a golden leaf\" \n        />\n        <Item \n          isPacked={false} \n          name=\"Photo of Tam\" \n        />\n      </ul>\n    </section>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "component",
      "conditional",
      "rendering"
    ],
    "code_length": 28,
    "is_duplicate": false,
    "topic": "Conditional Rendering",
    "purpose": "Conditional Rendering",
    "explanation": "Conditional Rendering – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/conditional-rendering",
    "source_title": "Conditional Rendering – React",
    "section": "Conditional Rendering",
    "code": "<li className=\"item\">{name} ✅</li>",
    "code_language": "html/jsx",
    "code_type": "class",
    "tags": [
      "conditional",
      "rendering"
    ],
    "code_length": 1,
    "is_duplicate": false,
    "topic": "Conditional Rendering",
    "purpose": "Conditional Rendering",
    "explanation": "Conditional Rendering – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/conditional-rendering",
    "source_title": "Conditional Rendering – React",
    "section": "Conditional Rendering",
    "code": "<li className=\"item\">{name}</li>",
    "code_language": "html/jsx",
    "code_type": "class",
    "tags": [
      "conditional",
      "rendering"
    ],
    "code_length": 1,
    "is_duplicate": false,
    "topic": "Conditional Rendering",
    "purpose": "Conditional Rendering",
    "explanation": "Conditional Rendering – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/conditional-rendering",
    "source_title": "Conditional Rendering – React",
    "section": "Conditional Rendering",
    "code": "if (isPacked) {\n  return <li className=\"item\">{name} ✅</li>;\n}\nreturn <li className=\"item\">{name}</li>;",
    "code_language": "unknown",
    "code_type": "class",
    "tags": [
      "conditional",
      "rendering"
    ],
    "code_length": 4,
    "is_duplicate": true,
    "topic": "Conditional Rendering",
    "purpose": "Conditional Rendering",
    "explanation": "Conditional Rendering – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/conditional-rendering",
    "source_title": "Conditional Rendering – React",
    "section": "Conditional Rendering",
    "code": "if (isPacked) {\n  return <li className=\"item\">{name} ✅</li>;\n}\nreturn <li className=\"item\">{name}</li>;",
    "code_language": "unknown",
    "code_type": "class",
    "tags": [
      "conditional",
      "rendering"
    ],
    "code_length": 4,
    "is_duplicate": true,
    "topic": "Conditional Rendering",
    "purpose": "Conditional Rendering",
    "explanation": "Conditional Rendering – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/conditional-rendering",
    "source_title": "Conditional Rendering – React",
    "section": "Conditional Rendering",
    "code": "return (\n  <li className=\"item\">\n    {isPacked ? name + ' ✅' : name}\n  </li>\n);",
    "code_language": "unknown",
    "code_type": "class",
    "tags": [
      "conditional",
      "rendering"
    ],
    "code_length": 5,
    "is_duplicate": false,
    "topic": "Conditional Rendering",
    "purpose": "Conditional Rendering",
    "explanation": "Conditional Rendering – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/conditional-rendering",
    "source_title": "Conditional Rendering – React",
    "section": "Conditional Rendering",
    "code": "function Item({ name, isPacked }) {\n  return (\n    <li className=\"item\">\n      {isPacked ? (\n        <del>\n          {name + ' ✅'}\n        </del>\n      ) : (\n        name\n      )}\n    </li>\n  );\n}\n\nexport default function PackingList() {\n  return (\n    <section>\n      <h1>Sally Ride's Packing List</h1>\n      <ul>\n        <Item \n          isPacked={true} \n          name=\"Space suit\" \n        />\n        <Item \n          isPacked={true} \n          name=\"Helmet with a golden leaf\" \n        />\n        <Item \n          isPacked={false} \n          name=\"Photo of Tam\" \n        />\n      </ul>\n    </section>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "component",
      "conditional",
      "rendering"
    ],
    "code_length": 35,
    "is_duplicate": false,
    "topic": "Conditional Rendering",
    "purpose": "Conditional Rendering",
    "explanation": "Conditional Rendering – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/conditional-rendering",
    "source_title": "Conditional Rendering – React",
    "section": "Conditional Rendering",
    "code": "return (\n  <li className=\"item\">\n    {name} {isPacked && '✅'}\n  </li>\n);",
    "code_language": "unknown",
    "code_type": "class",
    "tags": [
      "conditional",
      "rendering"
    ],
    "code_length": 5,
    "is_duplicate": false,
    "topic": "Conditional Rendering",
    "purpose": "Conditional Rendering",
    "explanation": "Conditional Rendering – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/conditional-rendering",
    "source_title": "Conditional Rendering – React",
    "section": "Conditional Rendering",
    "code": "function Item({ name, isPacked }) {\n  return (\n    <li className=\"item\">\n      {name} {isPacked && '✅'}\n    </li>\n  );\n}\n\nexport default function PackingList() {\n  return (\n    <section>\n      <h1>Sally Ride's Packing List</h1>\n      <ul>\n        <Item \n          isPacked={true} \n          name=\"Space suit\" \n        />\n        <Item \n          isPacked={true} \n          name=\"Helmet with a golden leaf\" \n        />\n        <Item \n          isPacked={false} \n          name=\"Photo of Tam\" \n        />\n      </ul>\n    </section>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "component",
      "conditional",
      "rendering"
    ],
    "code_length": 29,
    "is_duplicate": false,
    "topic": "Conditional Rendering",
    "purpose": "Conditional Rendering",
    "explanation": "Conditional Rendering – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/conditional-rendering",
    "source_title": "Conditional Rendering – React",
    "section": "Conditional Rendering",
    "code": "let itemContent = name;",
    "code_language": "unknown",
    "code_type": "snippet",
    "tags": [
      "conditional",
      "rendering"
    ],
    "code_length": 1,
    "is_duplicate": false,
    "topic": "Conditional Rendering",
    "purpose": "Conditional Rendering",
    "explanation": "Conditional Rendering – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/conditional-rendering",
    "source_title": "Conditional Rendering – React",
    "section": "Conditional Rendering",
    "code": "if (isPacked) {\n  itemContent = name + \" ✅\";\n}",
    "code_language": "unknown",
    "code_type": "snippet",
    "tags": [
      "conditional",
      "rendering"
    ],
    "code_length": 3,
    "is_duplicate": false,
    "topic": "Conditional Rendering",
    "purpose": "Conditional Rendering",
    "explanation": "Conditional Rendering – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/conditional-rendering",
    "source_title": "Conditional Rendering – React",
    "section": "Conditional Rendering",
    "code": "<li className=\"item\">\n  {itemContent}\n</li>",
    "code_language": "html/jsx",
    "code_type": "class",
    "tags": [
      "conditional",
      "rendering"
    ],
    "code_length": 3,
    "is_duplicate": false,
    "topic": "Conditional Rendering",
    "purpose": "Conditional Rendering",
    "explanation": "Conditional Rendering – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/conditional-rendering",
    "source_title": "Conditional Rendering – React",
    "section": "Conditional Rendering",
    "code": "function Item({ name, isPacked }) {\n  let itemContent = name;\n  if (isPacked) {\n    itemContent = name + \" ✅\";\n  }\n  return (\n    <li className=\"item\">\n      {itemContent}\n    </li>\n  );\n}\n\nexport default function PackingList() {\n  return (\n    <section>\n      <h1>Sally Ride's Packing List</h1>\n      <ul>\n        <Item \n          isPacked={true} \n          name=\"Space suit\" \n        />\n        <Item \n          isPacked={true} \n          name=\"Helmet with a golden leaf\" \n        />\n        <Item \n          isPacked={false} \n          name=\"Photo of Tam\" \n        />\n      </ul>\n    </section>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "component",
      "conditional",
      "rendering"
    ],
    "code_length": 33,
    "is_duplicate": false,
    "topic": "Conditional Rendering",
    "purpose": "Conditional Rendering",
    "explanation": "Conditional Rendering – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/conditional-rendering",
    "source_title": "Conditional Rendering – React",
    "section": "Conditional Rendering",
    "code": "function Item({ name, isPacked }) {\n  let itemContent = name;\n  if (isPacked) {\n    itemContent = (\n      <del>\n        {name + \" ✅\"}\n      </del>\n    );\n  }\n  return (\n    <li className=\"item\">\n      {itemContent}\n    </li>\n  );\n}\n\nexport default function PackingList() {\n  return (\n    <section>\n      <h1>Sally Ride's Packing List</h1>\n      <ul>\n        <Item \n          isPacked={true} \n          name=\"Space suit\" \n        />\n        <Item \n          isPacked={true} \n          name=\"Helmet with a golden leaf\" \n        />\n        <Item \n          isPacked={false} \n          name=\"Photo of Tam\" \n        />\n      </ul>\n    </section>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "component",
      "conditional",
      "rendering"
    ],
    "code_length": 37,
    "is_duplicate": false,
    "topic": "Conditional Rendering",
    "purpose": "Conditional Rendering",
    "explanation": "Conditional Rendering – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/conditional-rendering",
    "source_title": "Conditional Rendering – React",
    "section": "Conditional Rendering",
    "code": "function Item({ name, isPacked }) {\n  return (\n    <li className=\"item\">\n      {name} {isPacked && '✅'}\n    </li>\n  );\n}\n\nexport default function PackingList() {\n  return (\n    <section>\n      <h1>Sally Ride's Packing List</h1>\n      <ul>\n        <Item \n          isPacked={true} \n          name=\"Space suit\" \n        />\n        <Item \n          isPacked={true} \n          name=\"Helmet with a golden leaf\" \n        />\n        <Item \n          isPacked={false} \n          name=\"Photo of Tam\" \n        />\n      </ul>\n    </section>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "component",
      "conditional",
      "rendering"
    ],
    "code_length": 29,
    "is_duplicate": true,
    "topic": "Conditional Rendering",
    "purpose": "Conditional Rendering",
    "explanation": "Conditional Rendering – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/react-compiler/introduction",
    "source_title": "Introduction – React",
    "section": "Introduction",
    "code": "import { useMemo, useCallback, memo } from 'react';\n\nconst ExpensiveComponent = memo(function ExpensiveComponent({ data, onClick }) {\n  const processedData = useMemo(() => {\n    return expensiveProcessing(data);\n  }, [data]);\n\n  const handleClick = useCallback((item) => {\n    onClick(item.id);\n  }, [onClick]);\n\n  return (\n    <div>\n      {processedData.map(item => (\n        <Item key={item.id} onClick={() => handleClick(item)} />\n      ))}\n    </div>\n  );\n});",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "introduction"
    ],
    "code_length": 19,
    "is_duplicate": false,
    "topic": "Introduction",
    "purpose": "Introduction",
    "explanation": "Introduction – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/react-compiler/introduction",
    "source_title": "Introduction – React",
    "section": "Introduction",
    "code": "function ExpensiveComponent({ data, onClick }) {\n  const processedData = expensiveProcessing(data);\n\n  const handleClick = (item) => {\n    onClick(item.id);\n  };\n\n  return (\n    <div>\n      {processedData.map(item => (\n        <Item key={item.id} onClick={() => handleClick(item)} />\n      ))}\n    </div>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "introduction"
    ],
    "code_length": 15,
    "is_duplicate": false,
    "topic": "Introduction",
    "purpose": "Introduction",
    "explanation": "Introduction – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/passing-props-to-a-component",
    "source_title": "Passing Props to a Component – React",
    "section": "Passing Props to a Component",
    "code": "export default function Profile() {\n  return (\n    <Avatar />\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "props",
      "passing",
      "component"
    ],
    "code_length": 5,
    "is_duplicate": false,
    "topic": "Passing Props to a Component",
    "purpose": "Passing Props to a Component",
    "explanation": "Passing Props to a Component – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/passing-props-to-a-component",
    "source_title": "Passing Props to a Component – React",
    "section": "Passing Props to a Component",
    "code": "export default function Profile() {\n  return (\n    <Avatar\n      person={{ name: 'Lin Lanying', imageId: '1bX5QH6' }}\n      size={100}\n    />\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "props",
      "passing",
      "component"
    ],
    "code_length": 8,
    "is_duplicate": false,
    "topic": "Passing Props to a Component",
    "purpose": "Passing Props to a Component",
    "explanation": "Passing Props to a Component – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/passing-props-to-a-component",
    "source_title": "Passing Props to a Component – React",
    "section": "Passing Props to a Component",
    "code": "function Avatar({ person, size }) {\n  // person and size are available here\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "props",
      "passing",
      "component"
    ],
    "code_length": 3,
    "is_duplicate": false,
    "topic": "Passing Props to a Component",
    "purpose": "Passing Props to a Component",
    "explanation": "Passing Props to a Component – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/passing-props-to-a-component",
    "source_title": "Passing Props to a Component – React",
    "section": "Passing Props to a Component",
    "code": "import { getImageUrl } from './utils.js';\n\nfunction Avatar({ person, size }) {\n  return (\n    <img\n      className=\"avatar\"\n      src={getImageUrl(person)}\n      alt={person.name}\n      width={size}\n      height={size}\n    />\n  );\n}\n\nexport default function Profile() {\n  return (\n    <div>\n      <Avatar\n        size={100}\n        person={{ \n          name: 'Katsuko Saruhashi', \n          imageId: 'YfeOqp2'\n        }}\n      />\n      <Avatar\n        size={80}\n        person={{\n          name: 'Aklilu Lemma', \n          imageId: 'OKS67lh'\n        }}\n      />\n      <Avatar\n        size={50}\n        person={{ \n          name: 'Lin Lanying',\n          imageId: '1bX5QH6'\n        }}\n      />\n    </div>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "props",
      "passing",
      "component"
    ],
    "code_length": 41,
    "is_duplicate": false,
    "topic": "Passing Props to a Component",
    "purpose": "Passing Props to a Component",
    "explanation": "Passing Props to a Component – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/passing-props-to-a-component",
    "source_title": "Passing Props to a Component – React",
    "section": "Passing Props to a Component",
    "code": "function Avatar(props) {\n  let person = props.person;\n  let size = props.size;\n  // ...\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "props",
      "passing",
      "component"
    ],
    "code_length": 5,
    "is_duplicate": false,
    "topic": "Passing Props to a Component",
    "purpose": "Passing Props to a Component",
    "explanation": "Passing Props to a Component – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/passing-props-to-a-component",
    "source_title": "Passing Props to a Component – React",
    "section": "Passing Props to a Component",
    "code": "function Avatar({ person, size }) {\n  // ...\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "props",
      "passing",
      "component"
    ],
    "code_length": 3,
    "is_duplicate": false,
    "topic": "Passing Props to a Component",
    "purpose": "Passing Props to a Component",
    "explanation": "Passing Props to a Component – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/passing-props-to-a-component",
    "source_title": "Passing Props to a Component – React",
    "section": "Passing Props to a Component",
    "code": "function Avatar(props) {\n  let person = props.person;\n  let size = props.size;\n  // ...\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "props",
      "passing",
      "component"
    ],
    "code_length": 5,
    "is_duplicate": true,
    "topic": "Passing Props to a Component",
    "purpose": "Passing Props to a Component",
    "explanation": "Passing Props to a Component – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/passing-props-to-a-component",
    "source_title": "Passing Props to a Component – React",
    "section": "Passing Props to a Component",
    "code": "function Avatar({ person, size = 100 }) {\n  // ...\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "props",
      "passing",
      "component"
    ],
    "code_length": 3,
    "is_duplicate": false,
    "topic": "Passing Props to a Component",
    "purpose": "Passing Props to a Component",
    "explanation": "Passing Props to a Component – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/passing-props-to-a-component",
    "source_title": "Passing Props to a Component – React",
    "section": "Passing Props to a Component",
    "code": "function Profile({ person, size, isSepia, thickBorder }) {\n  return (\n    <div className=\"card\">\n      <Avatar\n        person={person}\n        size={size}\n        isSepia={isSepia}\n        thickBorder={thickBorder}\n      />\n    </div>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "props",
      "passing",
      "component"
    ],
    "code_length": 12,
    "is_duplicate": false,
    "topic": "Passing Props to a Component",
    "purpose": "Passing Props to a Component",
    "explanation": "Passing Props to a Component – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/passing-props-to-a-component",
    "source_title": "Passing Props to a Component – React",
    "section": "Passing Props to a Component",
    "code": "function Profile(props) {\n  return (\n    <div className=\"card\">\n      <Avatar {...props} />\n    </div>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "props",
      "passing",
      "component"
    ],
    "code_length": 7,
    "is_duplicate": false,
    "topic": "Passing Props to a Component",
    "purpose": "Passing Props to a Component",
    "explanation": "Passing Props to a Component – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/passing-props-to-a-component",
    "source_title": "Passing Props to a Component – React",
    "section": "Passing Props to a Component",
    "code": "<div>\n  <img />\n</div>",
    "code_language": "html/jsx",
    "code_type": "snippet",
    "tags": [
      "props",
      "passing",
      "component"
    ],
    "code_length": 3,
    "is_duplicate": false,
    "topic": "Passing Props to a Component",
    "purpose": "Passing Props to a Component",
    "explanation": "Passing Props to a Component – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/passing-props-to-a-component",
    "source_title": "Passing Props to a Component – React",
    "section": "Passing Props to a Component",
    "code": "<Card>\n  <Avatar />\n</Card>",
    "code_language": "html/jsx",
    "code_type": "snippet",
    "tags": [
      "props",
      "passing",
      "component"
    ],
    "code_length": 3,
    "is_duplicate": false,
    "topic": "Passing Props to a Component",
    "purpose": "Passing Props to a Component",
    "explanation": "Passing Props to a Component – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/passing-props-to-a-component",
    "source_title": "Passing Props to a Component – React",
    "section": "Passing Props to a Component",
    "code": "import Avatar from './Avatar.js';\n\nfunction Card({ children }) {\n  return (\n    <div className=\"card\">\n      {children}\n    </div>\n  );\n}\n\nexport default function Profile() {\n  return (\n    <Card>\n      <Avatar\n        size={100}\n        person={{ \n          name: 'Katsuko Saruhashi',\n          imageId: 'YfeOqp2'\n        }}\n      />\n    </Card>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "props",
      "passing",
      "component"
    ],
    "code_length": 23,
    "is_duplicate": false,
    "topic": "Passing Props to a Component",
    "purpose": "Passing Props to a Component",
    "explanation": "Passing Props to a Component – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/passing-props-to-a-component",
    "source_title": "Passing Props to a Component – React",
    "section": "Passing Props to a Component",
    "code": "export default function Clock({ color, time }) {\n  return (\n    <h1 style={{ color: color }}>\n      {time}\n    </h1>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "props",
      "passing",
      "component"
    ],
    "code_length": 7,
    "is_duplicate": false,
    "topic": "Passing Props to a Component",
    "purpose": "Passing Props to a Component",
    "explanation": "Passing Props to a Component – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/passing-props-to-a-component",
    "source_title": "Passing Props to a Component – React",
    "section": "Passing Props to a Component",
    "code": "import { getImageUrl } from './utils.js';\n\nexport default function Gallery() {\n  return (\n    <div>\n      <h1>Notable Scientists</h1>\n      <section className=\"profile\">\n        <h2>Maria Skłodowska-Curie</h2>\n        <img\n          className=\"avatar\"\n          src={getImageUrl('szV5sdG')}\n          alt=\"Maria Skłodowska-Curie\"\n          width={70}\n          height={70}\n        />\n        <ul>\n          <li>\n            <b>Profession: </b> \n            physicist and chemist\n          </li>\n          <li>\n            <b>Awards: 4 </b> \n            (Nobel Prize in Physics, Nobel Prize in Chemistry, Davy Medal, Matteucci Medal)\n          </li>\n          <li>\n            <b>Discovered: </b>\n            polonium (chemical element)\n          </li>\n        </ul>\n      </section>\n      <section className=\"profile\">\n        <h2>Katsuko Saruhashi</h2>\n        <img\n          className=\"avatar\"\n          src={getImageUrl('YfeOqp2')}\n          alt=\"Katsuko Saruhashi\"\n          width={70}\n          height={70}\n        />\n        <ul>\n          <li>\n            <b>Profession: </b> \n            geochemist\n          </li>\n          <li>\n            <b>Awards: 2 </b> \n            (Miyake Prize for geochemistry, Tanaka Prize)\n          </li>\n          <li>\n            <b>Discovered: </b>\n            a method for measuring carbon dioxide in seawater\n          </li>\n        </ul>\n      </section>\n    </div>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "props",
      "passing",
      "component"
    ],
    "code_length": 57,
    "is_duplicate": false,
    "topic": "Passing Props to a Component",
    "purpose": "Passing Props to a Component",
    "explanation": "Passing Props to a Component – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/render-and-commit",
    "source_title": "Render and Commit – React",
    "section": "Render and Commit",
    "code": "import Image from './Image.js';\nimport { createRoot } from 'react-dom/client';\n\nconst root = createRoot(document.getElementById('root'))\nroot.render(<Image />);",
    "code_language": "javascript/jsx",
    "code_type": "import",
    "tags": [
      "commit",
      "render"
    ],
    "code_length": 5,
    "is_duplicate": false,
    "topic": "Render and Commit",
    "purpose": "Render and Commit",
    "explanation": "Render and Commit – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/render-and-commit",
    "source_title": "Render and Commit – React",
    "section": "Render and Commit",
    "code": "export default function Gallery() {\n  return (\n    <section>\n      <h1>Inspiring Sculptures</h1>\n      <Image />\n      <Image />\n      <Image />\n    </section>\n  );\n}\n\nfunction Image() {\n  return (\n    <img\n      src=\"https://i.imgur.com/ZF6s192.jpg\"\n      alt=\"'Floralis Genérica' by Eduardo Catalano: a gigantic metallic flower sculpture with reflective petals\"\n    />\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "commit",
      "render",
      "component"
    ],
    "code_length": 19,
    "is_duplicate": false,
    "topic": "Render and Commit",
    "purpose": "Render and Commit",
    "explanation": "Render and Commit – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/render-and-commit",
    "source_title": "Render and Commit – React",
    "section": "Render and Commit",
    "code": "export default function Clock({ time }) {\n  return (\n    <>\n      <h1>{time}</h1>\n      <input />\n    </>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "commit",
      "render",
      "component"
    ],
    "code_length": 8,
    "is_duplicate": false,
    "topic": "Render and Commit",
    "purpose": "Render and Commit",
    "explanation": "Render and Commit – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/react-compiler/installation",
    "source_title": "Installation – React",
    "section": "Installation",
    "code": "module.exports = {\n  plugins: [\n    'babel-plugin-react-compiler', // must run first!\n    // ... other plugins\n  ],\n  // ... other config\n};",
    "code_language": "unknown",
    "code_type": "snippet",
    "tags": [
      "installation"
    ],
    "code_length": 7,
    "is_duplicate": false,
    "topic": "Installation",
    "purpose": "Installation",
    "explanation": "Installation – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/react-compiler/installation",
    "source_title": "Installation – React",
    "section": "Installation",
    "code": "// vite.config.js\nimport { defineConfig } from 'vite';\nimport react from '@vitejs/plugin-react';\n\nexport default defineConfig({\n  plugins: [\n    react({\n      babel: {\n        plugins: ['babel-plugin-react-compiler'],\n      },\n    }),\n  ],\n});",
    "code_language": "javascript/jsx",
    "code_type": "component",
    "tags": [
      "installation",
      "component"
    ],
    "code_length": 13,
    "is_duplicate": false,
    "topic": "Installation",
    "purpose": "Installation",
    "explanation": "Installation – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/react-compiler/installation",
    "source_title": "Installation – React",
    "section": "Installation",
    "code": "// vite.config.js\nimport babel from 'vite-plugin-babel';\nimport { defineConfig } from 'vite';\nimport react from '@vitejs/plugin-react';\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    babel({\n      babelConfig: {\n        plugins: ['babel-plugin-react-compiler'],\n      },\n    }),\n  ],\n});",
    "code_language": "javascript/jsx",
    "code_type": "component",
    "tags": [
      "installation",
      "component"
    ],
    "code_length": 15,
    "is_duplicate": false,
    "topic": "Installation",
    "purpose": "Installation",
    "explanation": "Installation – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/react-compiler/installation",
    "source_title": "Installation – React",
    "section": "Installation",
    "code": "// vite.config.js\nimport { defineConfig } from \"vite\";\nimport babel from \"vite-plugin-babel\";\nimport { reactRouter } from \"@react-router/dev/vite\";\n\nconst ReactCompilerConfig = { /* ... */ };\n\nexport default defineConfig({\n  plugins: [\n    reactRouter(),\n    babel({\n      filter: /\\.[jt]sx?$/,\n      babelConfig: {\n        presets: [\"@babel/preset-typescript\"], // if you use TypeScript\n        plugins: [\n          [\"babel-plugin-react-compiler\", ReactCompilerConfig],\n        ],\n      },\n    }),\n  ],\n});",
    "code_language": "javascript/jsx",
    "code_type": "component",
    "tags": [
      "installation",
      "component"
    ],
    "code_length": 21,
    "is_duplicate": false,
    "topic": "Installation",
    "purpose": "Installation",
    "explanation": "Installation – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/react-compiler/installation",
    "source_title": "Installation – React",
    "section": "Installation",
    "code": "// .eslintrc.js\nmodule.exports = {\n  rules: {\n    'react-hooks/react-compiler': 'error',\n  },\n};",
    "code_language": "unknown",
    "code_type": "snippet",
    "tags": [
      "installation"
    ],
    "code_length": 6,
    "is_duplicate": false,
    "topic": "Installation",
    "purpose": "Installation",
    "explanation": "Installation – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/react-compiler/installation",
    "source_title": "Installation – React",
    "section": "Installation",
    "code": "import { c as _c } from \"react/compiler-runtime\";\nexport default function MyApp() {\n  const $ = _c(1);\n  let t0;\n  if ($[0] === Symbol.for(\"react.memo_cache_sentinel\")) {\n    t0 = <div>Hello World</div>;\n    $[0] = t0;\n  } else {\n    t0 = $[0];\n  }\n  return t0;\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "installation",
      "component"
    ],
    "code_length": 12,
    "is_duplicate": false,
    "topic": "Installation",
    "purpose": "Installation",
    "explanation": "Installation – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/react-compiler/installation",
    "source_title": "Installation – React",
    "section": "Installation",
    "code": "function ProblematicComponent() {\n  \"use no memo\";\n  // Component code here\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "installation"
    ],
    "code_length": 4,
    "is_duplicate": false,
    "topic": "Installation",
    "purpose": "Installation",
    "explanation": "Installation – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/scaling-up-with-reducer-and-context",
    "source_title": "Scaling Up with Reducer and Context – React",
    "section": "Scaling Up with Reducer and Context",
    "code": "<TaskList\n  tasks={tasks}\n  onChangeTask={handleChangeTask}\n  onDeleteTask={handleDeleteTask}\n/>",
    "code_language": "html/jsx",
    "code_type": "snippet",
    "tags": [
      "context",
      "up",
      "reducer",
      "scaling"
    ],
    "code_length": 5,
    "is_duplicate": false,
    "topic": "Scaling Up with Reducer and Context",
    "purpose": "Scaling Up with Reducer and Context",
    "explanation": "Scaling Up with Reducer and Context – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/scaling-up-with-reducer-and-context",
    "source_title": "Scaling Up with Reducer and Context – React",
    "section": "Scaling Up with Reducer and Context",
    "code": "<Task\n  task={task}\n  onChange={onChangeTask}\n  onDelete={onDeleteTask}\n/>",
    "code_language": "html/jsx",
    "code_type": "snippet",
    "tags": [
      "context",
      "up",
      "reducer",
      "scaling"
    ],
    "code_length": 5,
    "is_duplicate": false,
    "topic": "Scaling Up with Reducer and Context",
    "purpose": "Scaling Up with Reducer and Context",
    "explanation": "Scaling Up with Reducer and Context – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/scaling-up-with-reducer-and-context",
    "source_title": "Scaling Up with Reducer and Context – React",
    "section": "Scaling Up with Reducer and Context",
    "code": "const [tasks, dispatch] = useReducer(tasksReducer, initialTasks);",
    "code_language": "unknown",
    "code_type": "snippet",
    "tags": [
      "context",
      "up",
      "reducer",
      "scaling"
    ],
    "code_length": 1,
    "is_duplicate": true,
    "topic": "Scaling Up with Reducer and Context",
    "purpose": "Scaling Up with Reducer and Context",
    "explanation": "Scaling Up with Reducer and Context – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/scaling-up-with-reducer-and-context",
    "source_title": "Scaling Up with Reducer and Context – React",
    "section": "Scaling Up with Reducer and Context",
    "code": "import { createContext } from 'react';\n\nexport const TasksContext = createContext(null);\nexport const TasksDispatchContext = createContext(null);",
    "code_language": "javascript/jsx",
    "code_type": "import",
    "tags": [
      "context",
      "up",
      "reducer",
      "scaling"
    ],
    "code_length": 4,
    "is_duplicate": false,
    "topic": "Scaling Up with Reducer and Context",
    "purpose": "Scaling Up with Reducer and Context",
    "explanation": "Scaling Up with Reducer and Context – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/scaling-up-with-reducer-and-context",
    "source_title": "Scaling Up with Reducer and Context – React",
    "section": "Scaling Up with Reducer and Context",
    "code": "import { TasksContext, TasksDispatchContext } from './TasksContext.js';\n\nexport default function TaskApp() {\n  const [tasks, dispatch] = useReducer(tasksReducer, initialTasks);\n  // ...\n  return (\n    <TasksContext value={tasks}>\n      <TasksDispatchContext value={dispatch}>\n        ...\n      </TasksDispatchContext>\n    </TasksContext>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "reducer",
      "component",
      "context",
      "scaling",
      "up"
    ],
    "code_length": 13,
    "is_duplicate": false,
    "topic": "Scaling Up with Reducer and Context",
    "purpose": "Scaling Up with Reducer and Context",
    "explanation": "Scaling Up with Reducer and Context – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/scaling-up-with-reducer-and-context",
    "source_title": "Scaling Up with Reducer and Context – React",
    "section": "Scaling Up with Reducer and Context",
    "code": "import { useReducer } from 'react';\nimport AddTask from './AddTask.js';\nimport TaskList from './TaskList.js';\nimport { TasksContext, TasksDispatchContext } from './TasksContext.js';\n\nexport default function TaskApp() {\n  const [tasks, dispatch] = useReducer(\n    tasksReducer,\n    initialTasks\n  );\n\n  function handleAddTask(text) {\n    dispatch({\n      type: 'added',\n      id: nextId++,\n      text: text,\n    });\n  }\n\n  function handleChangeTask(task) {\n    dispatch({\n      type: 'changed',\n      task: task\n    });\n  }\n\n  function handleDeleteTask(taskId) {\n    dispatch({\n      type: 'deleted',\n      id: taskId\n    });\n  }\n\n  return (\n    <TasksContext value={tasks}>\n      <TasksDispatchContext value={dispatch}>\n        <h1>Day off in Kyoto</h1>\n        <AddTask\n          onAddTask={handleAddTask}\n        />\n        <TaskList\n          tasks={tasks}\n          onChangeTask={handleChangeTask}\n          onDeleteTask={handleDeleteTask}\n        />\n      </TasksDispatchContext>\n    </TasksContext>\n  );\n}\n\nfunction tasksReducer(tasks, action) {\n  switch (action.type) {\n    case 'added': {\n      return [...tasks, {\n        id: action.id,\n        text: action.text,\n        done: false\n      }];\n    }\n    case 'changed': {\n      return tasks.map(t => {\n        if (t.id === action.task.id) {\n          return action.task;\n        } else {\n          return t;\n        }\n      });\n    }\n    case 'deleted': {\n      return tasks.filter(t => t.id !== action.id);\n    }\n    default: {\n      throw Error('Unknown action: ' + action.type);\n    }\n  }\n}\n\nlet nextId = 3;\nconst initialTasks = [\n  { id: 0, text: 'Philosopher’s Path', done: true },\n  { id: 1, text: 'Visit the temple', done: false },\n  { id: 2, text: 'Drink matcha', done: false }\n];",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "reducer",
      "component",
      "context",
      "scaling",
      "up"
    ],
    "code_length": 83,
    "is_duplicate": false,
    "topic": "Scaling Up with Reducer and Context",
    "purpose": "Scaling Up with Reducer and Context",
    "explanation": "Scaling Up with Reducer and Context – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/scaling-up-with-reducer-and-context",
    "source_title": "Scaling Up with Reducer and Context – React",
    "section": "Scaling Up with Reducer and Context",
    "code": "<TasksContext value={tasks}>\n  <TasksDispatchContext value={dispatch}>\n    <h1>Day off in Kyoto</h1>\n    <AddTask />\n    <TaskList />\n  </TasksDispatchContext>\n</TasksContext>",
    "code_language": "html/jsx",
    "code_type": "snippet",
    "tags": [
      "context",
      "up",
      "reducer",
      "scaling"
    ],
    "code_length": 7,
    "is_duplicate": false,
    "topic": "Scaling Up with Reducer and Context",
    "purpose": "Scaling Up with Reducer and Context",
    "explanation": "Scaling Up with Reducer and Context – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/scaling-up-with-reducer-and-context",
    "source_title": "Scaling Up with Reducer and Context – React",
    "section": "Scaling Up with Reducer and Context",
    "code": "export default function TaskList() {\n  const tasks = useContext(TasksContext);\n  // ...",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "reducer",
      "component",
      "context",
      "scaling",
      "up"
    ],
    "code_length": 3,
    "is_duplicate": false,
    "topic": "Scaling Up with Reducer and Context",
    "purpose": "Scaling Up with Reducer and Context",
    "explanation": "Scaling Up with Reducer and Context – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/scaling-up-with-reducer-and-context",
    "source_title": "Scaling Up with Reducer and Context – React",
    "section": "Scaling Up with Reducer and Context",
    "code": "export default function AddTask() {\n  const [text, setText] = useState('');\n  const dispatch = useContext(TasksDispatchContext);\n  // ...\n  return (\n    // ...\n    <button onClick={() => {\n      setText('');\n      dispatch({\n        type: 'added',\n        id: nextId++,\n        text: text,\n      });\n    }}>Add</button>\n    // ...",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "reducer",
      "state",
      "component",
      "context",
      "scaling",
      "up"
    ],
    "code_length": 15,
    "is_duplicate": false,
    "topic": "Scaling Up with Reducer and Context",
    "purpose": "Scaling Up with Reducer and Context",
    "explanation": "Scaling Up with Reducer and Context – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/scaling-up-with-reducer-and-context",
    "source_title": "Scaling Up with Reducer and Context – React",
    "section": "Scaling Up with Reducer and Context",
    "code": "import { useState, useContext } from 'react';\nimport { TasksContext, TasksDispatchContext } from './TasksContext.js';\n\nexport default function TaskList() {\n  const tasks = useContext(TasksContext);\n  return (\n    <ul>\n      {tasks.map(task => (\n        <li key={task.id}>\n          <Task task={task} />\n        </li>\n      ))}\n    </ul>\n  );\n}\n\nfunction Task({ task }) {\n  const [isEditing, setIsEditing] = useState(false);\n  const dispatch = useContext(TasksDispatchContext);\n  let taskContent;\n  if (isEditing) {\n    taskContent = (\n      <>\n        <input\n          value={task.text}\n          onChange={e => {\n            dispatch({\n              type: 'changed',\n              task: {\n                ...task,\n                text: e.target.value\n              }\n            });\n          }} />\n        <button onClick={() => setIsEditing(false)}>\n          Save\n        </button>\n      </>\n    );\n  } else {\n    taskContent = (\n      <>\n        {task.text}\n        <button onClick={() => setIsEditing(true)}>\n          Edit\n        </button>\n      </>\n    );\n  }\n  return (\n    <label>\n      <input\n        type=\"checkbox\"\n        checked={task.done}\n        onChange={e => {\n          dispatch({\n            type: 'changed',\n            task: {\n              ...task,\n              done: e.target.checked\n            }\n          });\n        }}\n      />\n      {taskContent}\n      <button onClick={() => {\n        dispatch({\n          type: 'deleted',\n          id: task.id\n        });\n      }}>\n        Delete\n      </button>\n    </label>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "reducer",
      "state",
      "component",
      "context",
      "scaling",
      "up"
    ],
    "code_length": 76,
    "is_duplicate": false,
    "topic": "Scaling Up with Reducer and Context",
    "purpose": "Scaling Up with Reducer and Context",
    "explanation": "Scaling Up with Reducer and Context – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/scaling-up-with-reducer-and-context",
    "source_title": "Scaling Up with Reducer and Context – React",
    "section": "Scaling Up with Reducer and Context",
    "code": "import { createContext } from 'react';\n\nexport const TasksContext = createContext(null);\nexport const TasksDispatchContext = createContext(null);",
    "code_language": "javascript/jsx",
    "code_type": "import",
    "tags": [
      "context",
      "up",
      "reducer",
      "scaling"
    ],
    "code_length": 4,
    "is_duplicate": true,
    "topic": "Scaling Up with Reducer and Context",
    "purpose": "Scaling Up with Reducer and Context",
    "explanation": "Scaling Up with Reducer and Context – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/scaling-up-with-reducer-and-context",
    "source_title": "Scaling Up with Reducer and Context – React",
    "section": "Scaling Up with Reducer and Context",
    "code": "export function TasksProvider({ children }) {\n  const [tasks, dispatch] = useReducer(tasksReducer, initialTasks);\n\n  return (\n    <TasksContext value={tasks}>\n      <TasksDispatchContext value={dispatch}>\n        {children}\n      </TasksDispatchContext>\n    </TasksContext>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "context",
      "up",
      "reducer",
      "scaling"
    ],
    "code_length": 11,
    "is_duplicate": false,
    "topic": "Scaling Up with Reducer and Context",
    "purpose": "Scaling Up with Reducer and Context",
    "explanation": "Scaling Up with Reducer and Context – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/scaling-up-with-reducer-and-context",
    "source_title": "Scaling Up with Reducer and Context – React",
    "section": "Scaling Up with Reducer and Context",
    "code": "import AddTask from './AddTask.js';\nimport TaskList from './TaskList.js';\nimport { TasksProvider } from './TasksContext.js';\n\nexport default function TaskApp() {\n  return (\n    <TasksProvider>\n      <h1>Day off in Kyoto</h1>\n      <AddTask />\n      <TaskList />\n    </TasksProvider>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "reducer",
      "component",
      "context",
      "scaling",
      "up"
    ],
    "code_length": 13,
    "is_duplicate": false,
    "topic": "Scaling Up with Reducer and Context",
    "purpose": "Scaling Up with Reducer and Context",
    "explanation": "Scaling Up with Reducer and Context – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/scaling-up-with-reducer-and-context",
    "source_title": "Scaling Up with Reducer and Context – React",
    "section": "Scaling Up with Reducer and Context",
    "code": "export function useTasks() {\n  return useContext(TasksContext);\n}\n\nexport function useTasksDispatch() {\n  return useContext(TasksDispatchContext);\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "context",
      "up",
      "reducer",
      "scaling"
    ],
    "code_length": 7,
    "is_duplicate": false,
    "topic": "Scaling Up with Reducer and Context",
    "purpose": "Scaling Up with Reducer and Context",
    "explanation": "Scaling Up with Reducer and Context – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/scaling-up-with-reducer-and-context",
    "source_title": "Scaling Up with Reducer and Context – React",
    "section": "Scaling Up with Reducer and Context",
    "code": "const tasks = useTasks();\nconst dispatch = useTasksDispatch();",
    "code_language": "unknown",
    "code_type": "snippet",
    "tags": [
      "context",
      "up",
      "reducer",
      "scaling"
    ],
    "code_length": 2,
    "is_duplicate": false,
    "topic": "Scaling Up with Reducer and Context",
    "purpose": "Scaling Up with Reducer and Context",
    "explanation": "Scaling Up with Reducer and Context – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/scaling-up-with-reducer-and-context",
    "source_title": "Scaling Up with Reducer and Context – React",
    "section": "Scaling Up with Reducer and Context",
    "code": "import { useState } from 'react';\nimport { useTasks, useTasksDispatch } from './TasksContext.js';\n\nexport default function TaskList() {\n  const tasks = useTasks();\n  return (\n    <ul>\n      {tasks.map(task => (\n        <li key={task.id}>\n          <Task task={task} />\n        </li>\n      ))}\n    </ul>\n  );\n}\n\nfunction Task({ task }) {\n  const [isEditing, setIsEditing] = useState(false);\n  const dispatch = useTasksDispatch();\n  let taskContent;\n  if (isEditing) {\n    taskContent = (\n      <>\n        <input\n          value={task.text}\n          onChange={e => {\n            dispatch({\n              type: 'changed',\n              task: {\n                ...task,\n                text: e.target.value\n              }\n            });\n          }} />\n        <button onClick={() => setIsEditing(false)}>\n          Save\n        </button>\n      </>\n    );\n  } else {\n    taskContent = (\n      <>\n        {task.text}\n        <button onClick={() => setIsEditing(true)}>\n          Edit\n        </button>\n      </>\n    );\n  }\n  return (\n    <label>\n      <input\n        type=\"checkbox\"\n        checked={task.done}\n        onChange={e => {\n          dispatch({\n            type: 'changed',\n            task: {\n              ...task,\n              done: e.target.checked\n            }\n          });\n        }}\n      />\n      {taskContent}\n      <button onClick={() => {\n        dispatch({\n          type: 'deleted',\n          id: task.id\n        });\n      }}>\n        Delete\n      </button>\n    </label>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "reducer",
      "state",
      "component",
      "context",
      "scaling",
      "up"
    ],
    "code_length": 76,
    "is_duplicate": false,
    "topic": "Scaling Up with Reducer and Context",
    "purpose": "Scaling Up with Reducer and Context",
    "explanation": "Scaling Up with Reducer and Context – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/queueing-a-series-of-state-updates",
    "source_title": "Queueing a Series of State Updates – React",
    "section": "Queueing a Series of State Updates",
    "code": "setNumber(0 + 1);\nsetNumber(0 + 1);\nsetNumber(0 + 1);",
    "code_language": "unknown",
    "code_type": "snippet",
    "tags": [
      "queueing",
      "series",
      "state",
      "updates"
    ],
    "code_length": 3,
    "is_duplicate": false,
    "topic": "Queueing a Series of State Updates",
    "purpose": "Queueing a Series of State Updates",
    "explanation": "Queueing a Series of State Updates – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/queueing-a-series-of-state-updates",
    "source_title": "Queueing a Series of State Updates – React",
    "section": "Queueing a Series of State Updates",
    "code": "import { useState } from 'react';\n\nexport default function Counter() {\n  const [number, setNumber] = useState(0);\n\n  return (\n    <>\n      <h1>{number}</h1>\n      <button onClick={() => {\n        setNumber(n => n + 1);\n        setNumber(n => n + 1);\n        setNumber(n => n + 1);\n      }}>+3</button>\n    </>\n  )\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "queueing",
      "series",
      "updates",
      "state",
      "component"
    ],
    "code_length": 16,
    "is_duplicate": false,
    "topic": "Queueing a Series of State Updates",
    "purpose": "Queueing a Series of State Updates",
    "explanation": "Queueing a Series of State Updates – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/queueing-a-series-of-state-updates",
    "source_title": "Queueing a Series of State Updates – React",
    "section": "Queueing a Series of State Updates",
    "code": "setNumber(n => n + 1);\nsetNumber(n => n + 1);\nsetNumber(n => n + 1);",
    "code_language": "unknown",
    "code_type": "snippet",
    "tags": [
      "queueing",
      "series",
      "state",
      "updates"
    ],
    "code_length": 3,
    "is_duplicate": false,
    "topic": "Queueing a Series of State Updates",
    "purpose": "Queueing a Series of State Updates",
    "explanation": "Queueing a Series of State Updates – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/queueing-a-series-of-state-updates",
    "source_title": "Queueing a Series of State Updates – React",
    "section": "Queueing a Series of State Updates",
    "code": "<button onClick={() => {\n  setNumber(number + 5);\n  setNumber(n => n + 1);\n}}>",
    "code_language": "html/jsx",
    "code_type": "snippet",
    "tags": [
      "queueing",
      "series",
      "state",
      "updates"
    ],
    "code_length": 4,
    "is_duplicate": false,
    "topic": "Queueing a Series of State Updates",
    "purpose": "Queueing a Series of State Updates",
    "explanation": "Queueing a Series of State Updates – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/queueing-a-series-of-state-updates",
    "source_title": "Queueing a Series of State Updates – React",
    "section": "Queueing a Series of State Updates",
    "code": "import { useState } from 'react';\n\nexport default function Counter() {\n  const [number, setNumber] = useState(0);\n\n  return (\n    <>\n      <h1>{number}</h1>\n      <button onClick={() => {\n        setNumber(number + 5);\n        setNumber(n => n + 1);\n      }}>Increase the number</button>\n    </>\n  )\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "queueing",
      "series",
      "updates",
      "state",
      "component"
    ],
    "code_length": 15,
    "is_duplicate": false,
    "topic": "Queueing a Series of State Updates",
    "purpose": "Queueing a Series of State Updates",
    "explanation": "Queueing a Series of State Updates – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/queueing-a-series-of-state-updates",
    "source_title": "Queueing a Series of State Updates – React",
    "section": "Queueing a Series of State Updates",
    "code": "<button onClick={() => {\n  setNumber(number + 5);\n  setNumber(n => n + 1);\n  setNumber(42);\n}}>",
    "code_language": "html/jsx",
    "code_type": "snippet",
    "tags": [
      "queueing",
      "series",
      "state",
      "updates"
    ],
    "code_length": 5,
    "is_duplicate": false,
    "topic": "Queueing a Series of State Updates",
    "purpose": "Queueing a Series of State Updates",
    "explanation": "Queueing a Series of State Updates – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/queueing-a-series-of-state-updates",
    "source_title": "Queueing a Series of State Updates – React",
    "section": "Queueing a Series of State Updates",
    "code": "import { useState } from 'react';\n\nexport default function Counter() {\n  const [number, setNumber] = useState(0);\n\n  return (\n    <>\n      <h1>{number}</h1>\n      <button onClick={() => {\n        setNumber(number + 5);\n        setNumber(n => n + 1);\n        setNumber(42);\n      }}>Increase the number</button>\n    </>\n  )\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "queueing",
      "series",
      "updates",
      "state",
      "component"
    ],
    "code_length": 16,
    "is_duplicate": false,
    "topic": "Queueing a Series of State Updates",
    "purpose": "Queueing a Series of State Updates",
    "explanation": "Queueing a Series of State Updates – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/queueing-a-series-of-state-updates",
    "source_title": "Queueing a Series of State Updates – React",
    "section": "Queueing a Series of State Updates",
    "code": "setEnabled(e => !e);\nsetLastName(ln => ln.reverse());\nsetFriendCount(fc => fc * 2);",
    "code_language": "unknown",
    "code_type": "snippet",
    "tags": [
      "queueing",
      "series",
      "state",
      "updates"
    ],
    "code_length": 3,
    "is_duplicate": false,
    "topic": "Queueing a Series of State Updates",
    "purpose": "Queueing a Series of State Updates",
    "explanation": "Queueing a Series of State Updates – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/queueing-a-series-of-state-updates",
    "source_title": "Queueing a Series of State Updates – React",
    "section": "Queueing a Series of State Updates",
    "code": "import { useState } from 'react';\n\nexport default function RequestTracker() {\n  const [pending, setPending] = useState(0);\n  const [completed, setCompleted] = useState(0);\n\n  async function handleClick() {\n    setPending(pending + 1);\n    await delay(3000);\n    setPending(pending - 1);\n    setCompleted(completed + 1);\n  }\n\n  return (\n    <>\n      <h3>\n        Pending: {pending}\n      </h3>\n      <h3>\n        Completed: {completed}\n      </h3>\n      <button onClick={handleClick}>\n        Buy     \n      </button>\n    </>\n  );\n}\n\nfunction delay(ms) {\n  return new Promise(resolve => {\n    setTimeout(resolve, ms);\n  });\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "queueing",
      "series",
      "updates",
      "state",
      "component"
    ],
    "code_length": 33,
    "is_duplicate": false,
    "topic": "Queueing a Series of State Updates",
    "purpose": "Queueing a Series of State Updates",
    "explanation": "Queueing a Series of State Updates – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/adding-interactivity",
    "source_title": "Adding Interactivity – React",
    "section": "Adding Interactivity",
    "code": "const [index, setIndex] = useState(0);\nconst [showMore, setShowMore] = useState(false);",
    "code_language": "unknown",
    "code_type": "snippet",
    "tags": [
      "adding",
      "state",
      "interactivity"
    ],
    "code_length": 2,
    "is_duplicate": false,
    "topic": "Adding Interactivity",
    "purpose": "Adding Interactivity",
    "explanation": "Adding Interactivity – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/adding-interactivity",
    "source_title": "Adding Interactivity – React",
    "section": "Adding Interactivity",
    "code": "import { useState } from 'react';\nimport { sculptureList } from './data.js';\n\nexport default function Gallery() {\n  const [index, setIndex] = useState(0);\n  const [showMore, setShowMore] = useState(false);\n  const hasNext = index < sculptureList.length - 1;\n\n  function handleNextClick() {\n    if (hasNext) {\n      setIndex(index + 1);\n    } else {\n      setIndex(0);\n    }\n  }\n\n  function handleMoreClick() {\n    setShowMore(!showMore);\n  }\n\n  let sculpture = sculptureList[index];\n  return (\n    <>\n      <button onClick={handleNextClick}>\n        Next\n      </button>\n      <h2>\n        <i>{sculpture.name} </i>\n        by {sculpture.artist}\n      </h2>\n      <h3>\n        ({index + 1} of {sculptureList.length})\n      </h3>\n      <button onClick={handleMoreClick}>\n        {showMore ? 'Hide' : 'Show'} details\n      </button>\n      {showMore && <p>{sculpture.description}</p>}\n      <img\n        src={sculpture.url}\n        alt={sculpture.alt}\n      />\n    </>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "adding",
      "component",
      "state",
      "interactivity"
    ],
    "code_length": 44,
    "is_duplicate": false,
    "topic": "Adding Interactivity",
    "purpose": "Adding Interactivity",
    "explanation": "Adding Interactivity – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/adding-interactivity",
    "source_title": "Adding Interactivity – React",
    "section": "Adding Interactivity",
    "code": "console.log(count);  // 0\nsetCount(count + 1); // Request a re-render with 1\nconsole.log(count);  // Still 0!",
    "code_language": "unknown",
    "code_type": "snippet",
    "tags": [
      "adding",
      "interactivity"
    ],
    "code_length": 3,
    "is_duplicate": false,
    "topic": "Adding Interactivity",
    "purpose": "Adding Interactivity",
    "explanation": "Adding Interactivity – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/adding-interactivity",
    "source_title": "Adding Interactivity – React",
    "section": "Adding Interactivity",
    "code": "import { useState } from 'react';\n\nexport default function Form() {\n  const [to, setTo] = useState('Alice');\n  const [message, setMessage] = useState('Hello');\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    setTimeout(() => {\n      alert(`You said ${message} to ${to}`);\n    }, 5000);\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <label>\n        To:{' '}\n        <select\n          value={to}\n          onChange={e => setTo(e.target.value)}>\n          <option value=\"Alice\">Alice</option>\n          <option value=\"Bob\">Bob</option>\n        </select>\n      </label>\n      <textarea\n        placeholder=\"Message\"\n        value={message}\n        onChange={e => setMessage(e.target.value)}\n      />\n      <button type=\"submit\">Send</button>\n    </form>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "adding",
      "component",
      "state",
      "interactivity"
    ],
    "code_length": 33,
    "is_duplicate": true,
    "topic": "Adding Interactivity",
    "purpose": "Adding Interactivity",
    "explanation": "Adding Interactivity – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/adding-interactivity",
    "source_title": "Adding Interactivity – React",
    "section": "Adding Interactivity",
    "code": "import { useState } from 'react';\n\nexport default function Counter() {\n  const [score, setScore] = useState(0);\n\n  function increment() {\n    setScore(score + 1);\n  }\n\n  return (\n    <>\n      <button onClick={() => increment()}>+1</button>\n      <button onClick={() => {\n        increment();\n        increment();\n        increment();\n      }}>+3</button>\n      <h1>Score: {score}</h1>\n    </>\n  )\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "adding",
      "component",
      "state",
      "interactivity"
    ],
    "code_length": 21,
    "is_duplicate": false,
    "topic": "Adding Interactivity",
    "purpose": "Adding Interactivity",
    "explanation": "Adding Interactivity – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/adding-interactivity",
    "source_title": "Adding Interactivity – React",
    "section": "Adding Interactivity",
    "code": "console.log(score);  // 0\nsetScore(score + 1); // setScore(0 + 1);\nconsole.log(score);  // 0\nsetScore(score + 1); // setScore(0 + 1);\nconsole.log(score);  // 0\nsetScore(score + 1); // setScore(0 + 1);\nconsole.log(score);  // 0",
    "code_language": "unknown",
    "code_type": "snippet",
    "tags": [
      "adding",
      "interactivity"
    ],
    "code_length": 7,
    "is_duplicate": false,
    "topic": "Adding Interactivity",
    "purpose": "Adding Interactivity",
    "explanation": "Adding Interactivity – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/adding-interactivity",
    "source_title": "Adding Interactivity – React",
    "section": "Adding Interactivity",
    "code": "import { useState } from 'react';\n\nexport default function Counter() {\n  const [score, setScore] = useState(0);\n\n  function increment() {\n    setScore(s => s + 1);\n  }\n\n  return (\n    <>\n      <button onClick={() => increment()}>+1</button>\n      <button onClick={() => {\n        increment();\n        increment();\n        increment();\n      }}>+3</button>\n      <h1>Score: {score}</h1>\n    </>\n  )\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "adding",
      "component",
      "state",
      "interactivity"
    ],
    "code_length": 21,
    "is_duplicate": false,
    "topic": "Adding Interactivity",
    "purpose": "Adding Interactivity",
    "explanation": "Adding Interactivity – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/adding-interactivity",
    "source_title": "Adding Interactivity – React",
    "section": "Adding Interactivity",
    "code": "import { useState } from 'react';\n\nexport default function Form() {\n  const [person, setPerson] = useState({\n    name: 'Niki de Saint Phalle',\n    artwork: {\n      title: 'Blue Nana',\n      city: 'Hamburg',\n      image: 'https://i.imgur.com/Sd1AgUOm.jpg',\n    }\n  });\n\n  function handleNameChange(e) {\n    setPerson({\n      ...person,\n      name: e.target.value\n    });\n  }\n\n  function handleTitleChange(e) {\n    setPerson({\n      ...person,\n      artwork: {\n        ...person.artwork,\n        title: e.target.value\n      }\n    });\n  }\n\n  function handleCityChange(e) {\n    setPerson({\n      ...person,\n      artwork: {\n        ...person.artwork,\n        city: e.target.value\n      }\n    });\n  }\n\n  function handleImageChange(e) {\n    setPerson({\n      ...person,\n      artwork: {\n        ...person.artwork,\n        image: e.target.value\n      }\n    });\n  }\n\n  return (\n    <>\n      <label>\n        Name:\n        <input\n          value={person.name}\n          onChange={handleNameChange}\n        />\n      </label>\n      <label>\n        Title:\n        <input\n          value={person.artwork.title}\n          onChange={handleTitleChange}\n        />\n      </label>\n      <label>\n        City:\n        <input\n          value={person.artwork.city}\n          onChange={handleCityChange}\n        />\n      </label>\n      <label>\n        Image:\n        <input\n          value={person.artwork.image}\n          onChange={handleImageChange}\n        />\n      </label>\n      <p>\n        <i>{person.artwork.title}</i>\n        {' by '}\n        {person.name}\n        <br />\n        (located in {person.artwork.city})\n      </p>\n      <img\n        src={person.artwork.image}\n        alt={person.artwork.title}\n      />\n    </>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "adding",
      "component",
      "state",
      "interactivity"
    ],
    "code_length": 93,
    "is_duplicate": false,
    "topic": "Adding Interactivity",
    "purpose": "Adding Interactivity",
    "explanation": "Adding Interactivity – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/adding-interactivity",
    "source_title": "Adding Interactivity – React",
    "section": "Adding Interactivity",
    "code": "{\n  \"dependencies\": {\n    \"immer\": \"1.7.3\",\n    \"react\": \"latest\",\n    \"react-dom\": \"latest\",\n    \"react-scripts\": \"latest\",\n    \"use-immer\": \"0.5.1\"\n  },\n  \"scripts\": {\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n    \"test\": \"react-scripts test --env=jsdom\",\n    \"eject\": \"react-scripts eject\"\n  },\n  \"devDependencies\": {}\n}",
    "code_language": "unknown",
    "code_type": "snippet",
    "tags": [
      "adding",
      "interactivity"
    ],
    "code_length": 16,
    "is_duplicate": true,
    "topic": "Adding Interactivity",
    "purpose": "Adding Interactivity",
    "explanation": "Adding Interactivity – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/adding-interactivity",
    "source_title": "Adding Interactivity – React",
    "section": "Adding Interactivity",
    "code": "import { useState } from 'react';\n\nconst initialList = [\n  { id: 0, title: 'Big Bellies', seen: false },\n  { id: 1, title: 'Lunar Landscape', seen: false },\n  { id: 2, title: 'Terracotta Army', seen: true },\n];\n\nexport default function BucketList() {\n  const [list, setList] = useState(\n    initialList\n  );\n\n  function handleToggle(artworkId, nextSeen) {\n    setList(list.map(artwork => {\n      if (artwork.id === artworkId) {\n        return { ...artwork, seen: nextSeen };\n      } else {\n        return artwork;\n      }\n    }));\n  }\n\n  return (\n    <>\n      <h1>Art Bucket List</h1>\n      <h2>My list of art to see:</h2>\n      <ItemList\n        artworks={list}\n        onToggle={handleToggle} />\n    </>\n  );\n}\n\nfunction ItemList({ artworks, onToggle }) {\n  return (\n    <ul>\n      {artworks.map(artwork => (\n        <li key={artwork.id}>\n          <label>\n            <input\n              type=\"checkbox\"\n              checked={artwork.seen}\n              onChange={e => {\n                onToggle(\n                  artwork.id,\n                  e.target.checked\n                );\n              }}\n            />\n            {artwork.title}\n          </label>\n        </li>\n      ))}\n    </ul>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "adding",
      "component",
      "state",
      "interactivity"
    ],
    "code_length": 57,
    "is_duplicate": false,
    "topic": "Adding Interactivity",
    "purpose": "Adding Interactivity",
    "explanation": "Adding Interactivity – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/adding-interactivity",
    "source_title": "Adding Interactivity – React",
    "section": "Adding Interactivity",
    "code": "{\n  \"dependencies\": {\n    \"immer\": \"1.7.3\",\n    \"react\": \"latest\",\n    \"react-dom\": \"latest\",\n    \"react-scripts\": \"latest\",\n    \"use-immer\": \"0.5.1\"\n  },\n  \"scripts\": {\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n    \"test\": \"react-scripts test --env=jsdom\",\n    \"eject\": \"react-scripts eject\"\n  },\n  \"devDependencies\": {}\n}",
    "code_language": "unknown",
    "code_type": "snippet",
    "tags": [
      "adding",
      "interactivity"
    ],
    "code_length": 16,
    "is_duplicate": true,
    "topic": "Adding Interactivity",
    "purpose": "Adding Interactivity",
    "explanation": "Adding Interactivity – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/updating-arrays-in-state",
    "source_title": "Updating Arrays in State – React",
    "section": "Updating Arrays in State",
    "code": "import { useState } from 'react';\n\nlet nextId = 0;\n\nexport default function List() {\n  const [name, setName] = useState('');\n  const [artists, setArtists] = useState([]);\n\n  return (\n    <>\n      <h1>Inspiring sculptors:</h1>\n      <input\n        value={name}\n        onChange={e => setName(e.target.value)}\n      />\n      <button onClick={() => {\n        artists.push({\n          id: nextId++,\n          name: name,\n        });\n      }}>Add</button>\n      <ul>\n        {artists.map(artist => (\n          <li key={artist.id}>{artist.name}</li>\n        ))}\n      </ul>\n    </>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "component",
      "arrays",
      "state",
      "updating"
    ],
    "code_length": 29,
    "is_duplicate": false,
    "topic": "Updating Arrays in State",
    "purpose": "Updating Arrays in State",
    "explanation": "Updating Arrays in State – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/updating-arrays-in-state",
    "source_title": "Updating Arrays in State – React",
    "section": "Updating Arrays in State",
    "code": "setArtists( // Replace the state\n  [ // with a new array\n    ...artists, // that contains all the old items\n    { id: nextId++, name: name } // and one new item at the end\n  ]\n);",
    "code_language": "unknown",
    "code_type": "snippet",
    "tags": [
      "arrays",
      "state",
      "updating"
    ],
    "code_length": 6,
    "is_duplicate": false,
    "topic": "Updating Arrays in State",
    "purpose": "Updating Arrays in State",
    "explanation": "Updating Arrays in State – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/updating-arrays-in-state",
    "source_title": "Updating Arrays in State – React",
    "section": "Updating Arrays in State",
    "code": "import { useState } from 'react';\n\nlet nextId = 0;\n\nexport default function List() {\n  const [name, setName] = useState('');\n  const [artists, setArtists] = useState([]);\n\n  return (\n    <>\n      <h1>Inspiring sculptors:</h1>\n      <input\n        value={name}\n        onChange={e => setName(e.target.value)}\n      />\n      <button onClick={() => {\n        setArtists([\n          ...artists,\n          { id: nextId++, name: name }\n        ]);\n      }}>Add</button>\n      <ul>\n        {artists.map(artist => (\n          <li key={artist.id}>{artist.name}</li>\n        ))}\n      </ul>\n    </>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "component",
      "arrays",
      "state",
      "updating"
    ],
    "code_length": 29,
    "is_duplicate": false,
    "topic": "Updating Arrays in State",
    "purpose": "Updating Arrays in State",
    "explanation": "Updating Arrays in State – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/updating-arrays-in-state",
    "source_title": "Updating Arrays in State – React",
    "section": "Updating Arrays in State",
    "code": "setArtists([\n  { id: nextId++, name: name },\n  ...artists // Put old items at the end\n]);",
    "code_language": "unknown",
    "code_type": "snippet",
    "tags": [
      "arrays",
      "state",
      "updating"
    ],
    "code_length": 4,
    "is_duplicate": false,
    "topic": "Updating Arrays in State",
    "purpose": "Updating Arrays in State",
    "explanation": "Updating Arrays in State – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/updating-arrays-in-state",
    "source_title": "Updating Arrays in State – React",
    "section": "Updating Arrays in State",
    "code": "import { useState } from 'react';\n\nlet initialArtists = [\n  { id: 0, name: 'Marta Colvin Andrade' },\n  { id: 1, name: 'Lamidi Olonade Fakeye'},\n  { id: 2, name: 'Louise Nevelson'},\n];\n\nexport default function List() {\n  const [artists, setArtists] = useState(\n    initialArtists\n  );\n\n  return (\n    <>\n      <h1>Inspiring sculptors:</h1>\n      <ul>\n        {artists.map(artist => (\n          <li key={artist.id}>\n            {artist.name}{' '}\n            <button onClick={() => {\n              setArtists(\n                artists.filter(a =>\n                  a.id !== artist.id\n                )\n              );\n            }}>\n              Delete\n            </button>\n          </li>\n        ))}\n      </ul>\n    </>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "component",
      "arrays",
      "state",
      "updating"
    ],
    "code_length": 35,
    "is_duplicate": false,
    "topic": "Updating Arrays in State",
    "purpose": "Updating Arrays in State",
    "explanation": "Updating Arrays in State – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/updating-arrays-in-state",
    "source_title": "Updating Arrays in State – React",
    "section": "Updating Arrays in State",
    "code": "setArtists(\n  artists.filter(a => a.id !== artist.id)\n);",
    "code_language": "unknown",
    "code_type": "snippet",
    "tags": [
      "arrays",
      "state",
      "updating"
    ],
    "code_length": 3,
    "is_duplicate": false,
    "topic": "Updating Arrays in State",
    "purpose": "Updating Arrays in State",
    "explanation": "Updating Arrays in State – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/updating-arrays-in-state",
    "source_title": "Updating Arrays in State – React",
    "section": "Updating Arrays in State",
    "code": "import { useState } from 'react';\n\nlet initialShapes = [\n  { id: 0, type: 'circle', x: 50, y: 100 },\n  { id: 1, type: 'square', x: 150, y: 100 },\n  { id: 2, type: 'circle', x: 250, y: 100 },\n];\n\nexport default function ShapeEditor() {\n  const [shapes, setShapes] = useState(\n    initialShapes\n  );\n\n  function handleClick() {\n    const nextShapes = shapes.map(shape => {\n      if (shape.type === 'square') {\n        // No change\n        return shape;\n      } else {\n        // Return a new circle 50px below\n        return {\n          ...shape,\n          y: shape.y + 50,\n        };\n      }\n    });\n    // Re-render with the new array\n    setShapes(nextShapes);\n  }\n\n  return (\n    <>\n      <button onClick={handleClick}>\n        Move circles down!\n      </button>\n      {shapes.map(shape => (\n        <div\n          key={shape.id}\n          style={{\n          background: 'purple',\n          position: 'absolute',\n          left: shape.x,\n          top: shape.y,\n          borderRadius:\n            shape.type === 'circle'\n              ? '50%' : '',\n          width: 20,\n          height: 20,\n        }} />\n      ))}\n    </>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "component",
      "arrays",
      "state",
      "updating"
    ],
    "code_length": 53,
    "is_duplicate": false,
    "topic": "Updating Arrays in State",
    "purpose": "Updating Arrays in State",
    "explanation": "Updating Arrays in State – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/updating-arrays-in-state",
    "source_title": "Updating Arrays in State – React",
    "section": "Updating Arrays in State",
    "code": "import { useState } from 'react';\n\nlet initialCounters = [\n  0, 0, 0\n];\n\nexport default function CounterList() {\n  const [counters, setCounters] = useState(\n    initialCounters\n  );\n\n  function handleIncrementClick(index) {\n    const nextCounters = counters.map((c, i) => {\n      if (i === index) {\n        // Increment the clicked counter\n        return c + 1;\n      } else {\n        // The rest haven't changed\n        return c;\n      }\n    });\n    setCounters(nextCounters);\n  }\n\n  return (\n    <ul>\n      {counters.map((counter, i) => (\n        <li key={i}>\n          {counter}\n          <button onClick={() => {\n            handleIncrementClick(i);\n          }}>+1</button>\n        </li>\n      ))}\n    </ul>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "component",
      "arrays",
      "state",
      "updating"
    ],
    "code_length": 37,
    "is_duplicate": false,
    "topic": "Updating Arrays in State",
    "purpose": "Updating Arrays in State",
    "explanation": "Updating Arrays in State – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/updating-arrays-in-state",
    "source_title": "Updating Arrays in State – React",
    "section": "Updating Arrays in State",
    "code": "import { useState } from 'react';\n\nlet nextId = 3;\nconst initialArtists = [\n  { id: 0, name: 'Marta Colvin Andrade' },\n  { id: 1, name: 'Lamidi Olonade Fakeye'},\n  { id: 2, name: 'Louise Nevelson'},\n];\n\nexport default function List() {\n  const [name, setName] = useState('');\n  const [artists, setArtists] = useState(\n    initialArtists\n  );\n\n  function handleClick() {\n    const insertAt = 1; // Could be any index\n    const nextArtists = [\n      // Items before the insertion point:\n      ...artists.slice(0, insertAt),\n      // New item:\n      { id: nextId++, name: name },\n      // Items after the insertion point:\n      ...artists.slice(insertAt)\n    ];\n    setArtists(nextArtists);\n    setName('');\n  }\n\n  return (\n    <>\n      <h1>Inspiring sculptors:</h1>\n      <input\n        value={name}\n        onChange={e => setName(e.target.value)}\n      />\n      <button onClick={handleClick}>\n        Insert\n      </button>\n      <ul>\n        {artists.map(artist => (\n          <li key={artist.id}>{artist.name}</li>\n        ))}\n      </ul>\n    </>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "component",
      "arrays",
      "state",
      "updating"
    ],
    "code_length": 47,
    "is_duplicate": false,
    "topic": "Updating Arrays in State",
    "purpose": "Updating Arrays in State",
    "explanation": "Updating Arrays in State – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/updating-arrays-in-state",
    "source_title": "Updating Arrays in State – React",
    "section": "Updating Arrays in State",
    "code": "import { useState } from 'react';\n\nconst initialList = [\n  { id: 0, title: 'Big Bellies' },\n  { id: 1, title: 'Lunar Landscape' },\n  { id: 2, title: 'Terracotta Army' },\n];\n\nexport default function List() {\n  const [list, setList] = useState(initialList);\n\n  function handleClick() {\n    const nextList = [...list];\n    nextList.reverse();\n    setList(nextList);\n  }\n\n  return (\n    <>\n      <button onClick={handleClick}>\n        Reverse\n      </button>\n      <ul>\n        {list.map(artwork => (\n          <li key={artwork.id}>{artwork.title}</li>\n        ))}\n      </ul>\n    </>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "component",
      "arrays",
      "state",
      "updating"
    ],
    "code_length": 30,
    "is_duplicate": false,
    "topic": "Updating Arrays in State",
    "purpose": "Updating Arrays in State",
    "explanation": "Updating Arrays in State – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/updating-arrays-in-state",
    "source_title": "Updating Arrays in State – React",
    "section": "Updating Arrays in State",
    "code": "const nextList = [...list];\nnextList[0].seen = true; // Problem: mutates list[0]\nsetList(nextList);",
    "code_language": "unknown",
    "code_type": "snippet",
    "tags": [
      "arrays",
      "state",
      "updating"
    ],
    "code_length": 3,
    "is_duplicate": false,
    "topic": "Updating Arrays in State",
    "purpose": "Updating Arrays in State",
    "explanation": "Updating Arrays in State – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/updating-arrays-in-state",
    "source_title": "Updating Arrays in State – React",
    "section": "Updating Arrays in State",
    "code": "import { useState } from 'react';\n\nlet nextId = 3;\nconst initialList = [\n  { id: 0, title: 'Big Bellies', seen: false },\n  { id: 1, title: 'Lunar Landscape', seen: false },\n  { id: 2, title: 'Terracotta Army', seen: true },\n];\n\nexport default function BucketList() {\n  const [myList, setMyList] = useState(initialList);\n  const [yourList, setYourList] = useState(\n    initialList\n  );\n\n  function handleToggleMyList(artworkId, nextSeen) {\n    const myNextList = [...myList];\n    const artwork = myNextList.find(\n      a => a.id === artworkId\n    );\n    artwork.seen = nextSeen;\n    setMyList(myNextList);\n  }\n\n  function handleToggleYourList(artworkId, nextSeen) {\n    const yourNextList = [...yourList];\n    const artwork = yourNextList.find(\n      a => a.id === artworkId\n    );\n    artwork.seen = nextSeen;\n    setYourList(yourNextList);\n  }\n\n  return (\n    <>\n      <h1>Art Bucket List</h1>\n      <h2>My list of art to see:</h2>\n      <ItemList\n        artworks={myList}\n        onToggle={handleToggleMyList} />\n      <h2>Your list of art to see:</h2>\n      <ItemList\n        artworks={yourList}\n        onToggle={handleToggleYourList} />\n    </>\n  );\n}\n\nfunction ItemList({ artworks, onToggle }) {\n  return (\n    <ul>\n      {artworks.map(artwork => (\n        <li key={artwork.id}>\n          <label>\n            <input\n              type=\"checkbox\"\n              checked={artwork.seen}\n              onChange={e => {\n                onToggle(\n                  artwork.id,\n                  e.target.checked\n                );\n              }}\n            />\n            {artwork.title}\n          </label>\n        </li>\n      ))}\n    </ul>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "component",
      "arrays",
      "state",
      "updating"
    ],
    "code_length": 71,
    "is_duplicate": false,
    "topic": "Updating Arrays in State",
    "purpose": "Updating Arrays in State",
    "explanation": "Updating Arrays in State – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/updating-arrays-in-state",
    "source_title": "Updating Arrays in State – React",
    "section": "Updating Arrays in State",
    "code": "const myNextList = [...myList];\nconst artwork = myNextList.find(a => a.id === artworkId);\nartwork.seen = nextSeen; // Problem: mutates an existing item\nsetMyList(myNextList);",
    "code_language": "unknown",
    "code_type": "snippet",
    "tags": [
      "arrays",
      "state",
      "updating"
    ],
    "code_length": 4,
    "is_duplicate": false,
    "topic": "Updating Arrays in State",
    "purpose": "Updating Arrays in State",
    "explanation": "Updating Arrays in State – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/updating-arrays-in-state",
    "source_title": "Updating Arrays in State – React",
    "section": "Updating Arrays in State",
    "code": "setMyList(myList.map(artwork => {\n  if (artwork.id === artworkId) {\n    // Create a *new* object with changes\n    return { ...artwork, seen: nextSeen };\n  } else {\n    // No changes\n    return artwork;\n  }\n}));",
    "code_language": "unknown",
    "code_type": "snippet",
    "tags": [
      "arrays",
      "state",
      "updating"
    ],
    "code_length": 9,
    "is_duplicate": false,
    "topic": "Updating Arrays in State",
    "purpose": "Updating Arrays in State",
    "explanation": "Updating Arrays in State – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/updating-arrays-in-state",
    "source_title": "Updating Arrays in State – React",
    "section": "Updating Arrays in State",
    "code": "import { useState } from 'react';\n\nlet nextId = 3;\nconst initialList = [\n  { id: 0, title: 'Big Bellies', seen: false },\n  { id: 1, title: 'Lunar Landscape', seen: false },\n  { id: 2, title: 'Terracotta Army', seen: true },\n];\n\nexport default function BucketList() {\n  const [myList, setMyList] = useState(initialList);\n  const [yourList, setYourList] = useState(\n    initialList\n  );\n\n  function handleToggleMyList(artworkId, nextSeen) {\n    setMyList(myList.map(artwork => {\n      if (artwork.id === artworkId) {\n        // Create a *new* object with changes\n        return { ...artwork, seen: nextSeen };\n      } else {\n        // No changes\n        return artwork;\n      }\n    }));\n  }\n\n  function handleToggleYourList(artworkId, nextSeen) {\n    setYourList(yourList.map(artwork => {\n      if (artwork.id === artworkId) {\n        // Create a *new* object with changes\n        return { ...artwork, seen: nextSeen };\n      } else {\n        // No changes\n        return artwork;\n      }\n    }));\n  }\n\n  return (\n    <>\n      <h1>Art Bucket List</h1>\n      <h2>My list of art to see:</h2>\n      <ItemList\n        artworks={myList}\n        onToggle={handleToggleMyList} />\n      <h2>Your list of art to see:</h2>\n      <ItemList\n        artworks={yourList}\n        onToggle={handleToggleYourList} />\n    </>\n  );\n}\n\nfunction ItemList({ artworks, onToggle }) {\n  return (\n    <ul>\n      {artworks.map(artwork => (\n        <li key={artwork.id}>\n          <label>\n            <input\n              type=\"checkbox\"\n              checked={artwork.seen}\n              onChange={e => {\n                onToggle(\n                  artwork.id,\n                  e.target.checked\n                );\n              }}\n            />\n            {artwork.title}\n          </label>\n        </li>\n      ))}\n    </ul>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "component",
      "arrays",
      "state",
      "updating"
    ],
    "code_length": 77,
    "is_duplicate": false,
    "topic": "Updating Arrays in State",
    "purpose": "Updating Arrays in State",
    "explanation": "Updating Arrays in State – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/updating-arrays-in-state",
    "source_title": "Updating Arrays in State – React",
    "section": "Updating Arrays in State",
    "code": "{\n  \"dependencies\": {\n    \"immer\": \"1.7.3\",\n    \"react\": \"latest\",\n    \"react-dom\": \"latest\",\n    \"react-scripts\": \"latest\",\n    \"use-immer\": \"0.5.1\"\n  },\n  \"scripts\": {\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n    \"test\": \"react-scripts test --env=jsdom\",\n    \"eject\": \"react-scripts eject\"\n  },\n  \"devDependencies\": {}\n}",
    "code_language": "unknown",
    "code_type": "snippet",
    "tags": [
      "arrays",
      "state",
      "updating"
    ],
    "code_length": 16,
    "is_duplicate": true,
    "topic": "Updating Arrays in State",
    "purpose": "Updating Arrays in State",
    "explanation": "Updating Arrays in State – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/updating-arrays-in-state",
    "source_title": "Updating Arrays in State – React",
    "section": "Updating Arrays in State",
    "code": "updateMyTodos(draft => {\n  const artwork = draft.find(a => a.id === artworkId);\n  artwork.seen = nextSeen;\n});",
    "code_language": "unknown",
    "code_type": "snippet",
    "tags": [
      "arrays",
      "state",
      "updating"
    ],
    "code_length": 4,
    "is_duplicate": false,
    "topic": "Updating Arrays in State",
    "purpose": "Updating Arrays in State",
    "explanation": "Updating Arrays in State – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/updating-arrays-in-state",
    "source_title": "Updating Arrays in State – React",
    "section": "Updating Arrays in State",
    "code": "import { useState } from 'react';\n\nconst initialProducts = [{\n  id: 0,\n  name: 'Baklava',\n  count: 1,\n}, {\n  id: 1,\n  name: 'Cheese',\n  count: 5,\n}, {\n  id: 2,\n  name: 'Spaghetti',\n  count: 2,\n}];\n\nexport default function ShoppingCart() {\n  const [\n    products,\n    setProducts\n  ] = useState(initialProducts)\n\n  function handleIncreaseClick(productId) {\n\n  }\n\n  return (\n    <ul>\n      {products.map(product => (\n        <li key={product.id}>\n          {product.name}\n          {' '}\n          (<b>{product.count}</b>)\n          <button onClick={() => {\n            handleIncreaseClick(product.id);\n          }}>\n            +\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "component",
      "arrays",
      "state",
      "updating"
    ],
    "code_length": 43,
    "is_duplicate": false,
    "topic": "Updating Arrays in State",
    "purpose": "Updating Arrays in State",
    "explanation": "Updating Arrays in State – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/react-compiler/debugging",
    "source_title": "Debugging and Troubleshooting – React",
    "section": "Debugging and Troubleshooting",
    "code": "function ProblematicComponent() {\n  \"use no memo\"; // Skip compilation for this component\n  // ... rest of component\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "troubleshooting",
      "debugging"
    ],
    "code_length": 4,
    "is_duplicate": false,
    "topic": "Debugging and Troubleshooting",
    "purpose": "Debugging and Troubleshooting",
    "explanation": "Debugging and Troubleshooting – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/importing-and-exporting-components",
    "source_title": "Importing and Exporting Components – React",
    "section": "Importing and Exporting Components",
    "code": "import Gallery from './Gallery.js';\n\nexport default function App() {\n  return (\n    <Gallery />\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "components",
      "importing",
      "component",
      "exporting"
    ],
    "code_length": 7,
    "is_duplicate": false,
    "topic": "Importing and Exporting Components",
    "purpose": "Importing and Exporting Components",
    "explanation": "Importing and Exporting Components – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/importing-and-exporting-components",
    "source_title": "Importing and Exporting Components – React",
    "section": "Importing and Exporting Components",
    "code": "import Gallery from './Gallery';",
    "code_language": "javascript/jsx",
    "code_type": "import",
    "tags": [
      "components",
      "importing",
      "exporting"
    ],
    "code_length": 1,
    "is_duplicate": false,
    "topic": "Importing and Exporting Components",
    "purpose": "Importing and Exporting Components",
    "explanation": "Importing and Exporting Components – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/importing-and-exporting-components",
    "source_title": "Importing and Exporting Components – React",
    "section": "Importing and Exporting Components",
    "code": "export function Profile() {\n  // ...\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "components",
      "importing",
      "exporting"
    ],
    "code_length": 3,
    "is_duplicate": false,
    "topic": "Importing and Exporting Components",
    "purpose": "Importing and Exporting Components",
    "explanation": "Importing and Exporting Components – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/importing-and-exporting-components",
    "source_title": "Importing and Exporting Components – React",
    "section": "Importing and Exporting Components",
    "code": "import { Profile } from './Gallery.js';",
    "code_language": "javascript/jsx",
    "code_type": "import",
    "tags": [
      "components",
      "importing",
      "exporting"
    ],
    "code_length": 1,
    "is_duplicate": false,
    "topic": "Importing and Exporting Components",
    "purpose": "Importing and Exporting Components",
    "explanation": "Importing and Exporting Components – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/importing-and-exporting-components",
    "source_title": "Importing and Exporting Components – React",
    "section": "Importing and Exporting Components",
    "code": "export default function App() {\n  return <Profile />;\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "components",
      "importing",
      "component",
      "exporting"
    ],
    "code_length": 3,
    "is_duplicate": false,
    "topic": "Importing and Exporting Components",
    "purpose": "Importing and Exporting Components",
    "explanation": "Importing and Exporting Components – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/importing-and-exporting-components",
    "source_title": "Importing and Exporting Components – React",
    "section": "Importing and Exporting Components",
    "code": "import Gallery from './Gallery.js';\nimport { Profile } from './Gallery.js';\n\nexport default function App() {\n  return (\n    <Profile />\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "components",
      "importing",
      "component",
      "exporting"
    ],
    "code_length": 8,
    "is_duplicate": false,
    "topic": "Importing and Exporting Components",
    "purpose": "Importing and Exporting Components",
    "explanation": "Importing and Exporting Components – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/importing-and-exporting-components",
    "source_title": "Importing and Exporting Components – React",
    "section": "Importing and Exporting Components",
    "code": "// Move me to Profile.js!\nexport function Profile() {\n  return (\n    <img\n      src=\"https://i.imgur.com/QIrZWGIs.jpg\"\n      alt=\"Alan L. Hart\"\n    />\n  );\n}\n\nexport default function Gallery() {\n  return (\n    <section>\n      <h1>Amazing scientists</h1>\n      <Profile />\n      <Profile />\n      <Profile />\n    </section>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "components",
      "importing",
      "component",
      "exporting"
    ],
    "code_length": 20,
    "is_duplicate": false,
    "topic": "Importing and Exporting Components",
    "purpose": "Importing and Exporting Components",
    "explanation": "Importing and Exporting Components – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/you-might-not-need-an-effect",
    "source_title": "You Might Not Need an Effect – React",
    "section": "You Might Not Need an Effect",
    "code": "function Form() {\n  const [firstName, setFirstName] = useState('Taylor');\n  const [lastName, setLastName] = useState('Swift');\n\n  // 🔴 Avoid: redundant state and unnecessary Effect\n  const [fullName, setFullName] = useState('');\n  useEffect(() => {\n    setFullName(firstName + ' ' + lastName);\n  }, [firstName, lastName]);\n  // ...\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "effect",
      "you",
      "need",
      "state",
      "not",
      "might"
    ],
    "code_length": 11,
    "is_duplicate": true,
    "topic": "You Might Not Need an Effect",
    "purpose": "You Might Not Need an Effect",
    "explanation": "You Might Not Need an Effect – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/you-might-not-need-an-effect",
    "source_title": "You Might Not Need an Effect – React",
    "section": "You Might Not Need an Effect",
    "code": "function Form() {\n  const [firstName, setFirstName] = useState('Taylor');\n  const [lastName, setLastName] = useState('Swift');\n  // ✅ Good: calculated during rendering\n  const fullName = firstName + ' ' + lastName;\n  // ...\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "effect",
      "you",
      "need",
      "state",
      "not",
      "might"
    ],
    "code_length": 7,
    "is_duplicate": true,
    "topic": "You Might Not Need an Effect",
    "purpose": "You Might Not Need an Effect",
    "explanation": "You Might Not Need an Effect – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/you-might-not-need-an-effect",
    "source_title": "You Might Not Need an Effect – React",
    "section": "You Might Not Need an Effect",
    "code": "function TodoList({ todos, filter }) {\n  const [newTodo, setNewTodo] = useState('');\n\n  // 🔴 Avoid: redundant state and unnecessary Effect\n  const [visibleTodos, setVisibleTodos] = useState([]);\n  useEffect(() => {\n    setVisibleTodos(getFilteredTodos(todos, filter));\n  }, [todos, filter]);\n\n  // ...\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "effect",
      "you",
      "need",
      "state",
      "not",
      "might"
    ],
    "code_length": 11,
    "is_duplicate": false,
    "topic": "You Might Not Need an Effect",
    "purpose": "You Might Not Need an Effect",
    "explanation": "You Might Not Need an Effect – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/you-might-not-need-an-effect",
    "source_title": "You Might Not Need an Effect – React",
    "section": "You Might Not Need an Effect",
    "code": "function TodoList({ todos, filter }) {\n  const [newTodo, setNewTodo] = useState('');\n  // ✅ This is fine if getFilteredTodos() is not slow.\n  const visibleTodos = getFilteredTodos(todos, filter);\n  // ...\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "effect",
      "you",
      "need",
      "state",
      "not",
      "might"
    ],
    "code_length": 6,
    "is_duplicate": false,
    "topic": "You Might Not Need an Effect",
    "purpose": "You Might Not Need an Effect",
    "explanation": "You Might Not Need an Effect – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/you-might-not-need-an-effect",
    "source_title": "You Might Not Need an Effect – React",
    "section": "You Might Not Need an Effect",
    "code": "import { useMemo, useState } from 'react';\n\nfunction TodoList({ todos, filter }) {\n  const [newTodo, setNewTodo] = useState('');\n  const visibleTodos = useMemo(() => {\n    // ✅ Does not re-run unless todos or filter change\n    return getFilteredTodos(todos, filter);\n  }, [todos, filter]);\n  // ...\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "effect",
      "you",
      "need",
      "state",
      "not",
      "might"
    ],
    "code_length": 10,
    "is_duplicate": false,
    "topic": "You Might Not Need an Effect",
    "purpose": "You Might Not Need an Effect",
    "explanation": "You Might Not Need an Effect – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/you-might-not-need-an-effect",
    "source_title": "You Might Not Need an Effect – React",
    "section": "You Might Not Need an Effect",
    "code": "import { useMemo, useState } from 'react';\n\nfunction TodoList({ todos, filter }) {\n  const [newTodo, setNewTodo] = useState('');\n  // ✅ Does not re-run getFilteredTodos() unless todos or filter change\n  const visibleTodos = useMemo(() => getFilteredTodos(todos, filter), [todos, filter]);\n  // ...\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "effect",
      "you",
      "need",
      "state",
      "not",
      "might"
    ],
    "code_length": 8,
    "is_duplicate": false,
    "topic": "You Might Not Need an Effect",
    "purpose": "You Might Not Need an Effect",
    "explanation": "You Might Not Need an Effect – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/you-might-not-need-an-effect",
    "source_title": "You Might Not Need an Effect – React",
    "section": "You Might Not Need an Effect",
    "code": "export default function ProfilePage({ userId }) {\n  const [comment, setComment] = useState('');\n\n  // 🔴 Avoid: Resetting state on prop change in an Effect\n  useEffect(() => {\n    setComment('');\n  }, [userId]);\n  // ...\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "effect",
      "you",
      "need",
      "state",
      "component",
      "not",
      "might"
    ],
    "code_length": 9,
    "is_duplicate": false,
    "topic": "You Might Not Need an Effect",
    "purpose": "You Might Not Need an Effect",
    "explanation": "You Might Not Need an Effect – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/you-might-not-need-an-effect",
    "source_title": "You Might Not Need an Effect – React",
    "section": "You Might Not Need an Effect",
    "code": "export default function ProfilePage({ userId }) {\n  return (\n    <Profile\n      userId={userId}\n      key={userId}\n    />\n  );\n}\n\nfunction Profile({ userId }) {\n  // ✅ This and any other state below will reset on key change automatically\n  const [comment, setComment] = useState('');\n  // ...\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "effect",
      "you",
      "need",
      "state",
      "component",
      "not",
      "might"
    ],
    "code_length": 14,
    "is_duplicate": false,
    "topic": "You Might Not Need an Effect",
    "purpose": "You Might Not Need an Effect",
    "explanation": "You Might Not Need an Effect – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/you-might-not-need-an-effect",
    "source_title": "You Might Not Need an Effect – React",
    "section": "You Might Not Need an Effect",
    "code": "function List({ items }) {\n  const [isReverse, setIsReverse] = useState(false);\n  const [selection, setSelection] = useState(null);\n\n  // 🔴 Avoid: Adjusting state on prop change in an Effect\n  useEffect(() => {\n    setSelection(null);\n  }, [items]);\n  // ...\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "effect",
      "you",
      "need",
      "state",
      "not",
      "might"
    ],
    "code_length": 10,
    "is_duplicate": false,
    "topic": "You Might Not Need an Effect",
    "purpose": "You Might Not Need an Effect",
    "explanation": "You Might Not Need an Effect – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/you-might-not-need-an-effect",
    "source_title": "You Might Not Need an Effect – React",
    "section": "You Might Not Need an Effect",
    "code": "function List({ items }) {\n  const [isReverse, setIsReverse] = useState(false);\n  const [selection, setSelection] = useState(null);\n\n  // Better: Adjust the state while rendering\n  const [prevItems, setPrevItems] = useState(items);\n  if (items !== prevItems) {\n    setPrevItems(items);\n    setSelection(null);\n  }\n  // ...\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "effect",
      "you",
      "need",
      "state",
      "not",
      "might"
    ],
    "code_length": 12,
    "is_duplicate": false,
    "topic": "You Might Not Need an Effect",
    "purpose": "You Might Not Need an Effect",
    "explanation": "You Might Not Need an Effect – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/you-might-not-need-an-effect",
    "source_title": "You Might Not Need an Effect – React",
    "section": "You Might Not Need an Effect",
    "code": "function List({ items }) {\n  const [isReverse, setIsReverse] = useState(false);\n  const [selectedId, setSelectedId] = useState(null);\n  // ✅ Best: Calculate everything during rendering\n  const selection = items.find(item => item.id === selectedId) ?? null;\n  // ...\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "effect",
      "you",
      "need",
      "state",
      "not",
      "might"
    ],
    "code_length": 7,
    "is_duplicate": false,
    "topic": "You Might Not Need an Effect",
    "purpose": "You Might Not Need an Effect",
    "explanation": "You Might Not Need an Effect – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/you-might-not-need-an-effect",
    "source_title": "You Might Not Need an Effect – React",
    "section": "You Might Not Need an Effect",
    "code": "function ProductPage({ product, addToCart }) {\n  // 🔴 Avoid: Event-specific logic inside an Effect\n  useEffect(() => {\n    if (product.isInCart) {\n      showNotification(`Added ${product.name} to the shopping cart!`);\n    }\n  }, [product]);\n\n  function handleBuyClick() {\n    addToCart(product);\n  }\n\n  function handleCheckoutClick() {\n    addToCart(product);\n    navigateTo('/checkout');\n  }\n  // ...\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "effect",
      "you",
      "need",
      "not",
      "might"
    ],
    "code_length": 18,
    "is_duplicate": false,
    "topic": "You Might Not Need an Effect",
    "purpose": "You Might Not Need an Effect",
    "explanation": "You Might Not Need an Effect – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/you-might-not-need-an-effect",
    "source_title": "You Might Not Need an Effect – React",
    "section": "You Might Not Need an Effect",
    "code": "function ProductPage({ product, addToCart }) {\n  // ✅ Good: Event-specific logic is called from event handlers\n  function buyProduct() {\n    addToCart(product);\n    showNotification(`Added ${product.name} to the shopping cart!`);\n  }\n\n  function handleBuyClick() {\n    buyProduct();\n  }\n\n  function handleCheckoutClick() {\n    buyProduct();\n    navigateTo('/checkout');\n  }\n  // ...\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "effect",
      "you",
      "need",
      "not",
      "might"
    ],
    "code_length": 17,
    "is_duplicate": false,
    "topic": "You Might Not Need an Effect",
    "purpose": "You Might Not Need an Effect",
    "explanation": "You Might Not Need an Effect – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/you-might-not-need-an-effect",
    "source_title": "You Might Not Need an Effect – React",
    "section": "You Might Not Need an Effect",
    "code": "function Form() {\n  const [firstName, setFirstName] = useState('');\n  const [lastName, setLastName] = useState('');\n\n  // ✅ Good: This logic should run because the component was displayed\n  useEffect(() => {\n    post('/analytics/event', { eventName: 'visit_form' });\n  }, []);\n\n  // 🔴 Avoid: Event-specific logic inside an Effect\n  const [jsonToSubmit, setJsonToSubmit] = useState(null);\n  useEffect(() => {\n    if (jsonToSubmit !== null) {\n      post('/api/register', jsonToSubmit);\n    }\n  }, [jsonToSubmit]);\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    setJsonToSubmit({ firstName, lastName });\n  }\n  // ...\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "effect",
      "you",
      "need",
      "state",
      "not",
      "might"
    ],
    "code_length": 23,
    "is_duplicate": false,
    "topic": "You Might Not Need an Effect",
    "purpose": "You Might Not Need an Effect",
    "explanation": "You Might Not Need an Effect – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/you-might-not-need-an-effect",
    "source_title": "You Might Not Need an Effect – React",
    "section": "You Might Not Need an Effect",
    "code": "function Form() {\n  const [firstName, setFirstName] = useState('');\n  const [lastName, setLastName] = useState('');\n\n  // ✅ Good: This logic runs because the component was displayed\n  useEffect(() => {\n    post('/analytics/event', { eventName: 'visit_form' });\n  }, []);\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    // ✅ Good: Event-specific logic is in the event handler\n    post('/api/register', { firstName, lastName });\n  }\n  // ...\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "effect",
      "you",
      "need",
      "state",
      "not",
      "might"
    ],
    "code_length": 16,
    "is_duplicate": false,
    "topic": "You Might Not Need an Effect",
    "purpose": "You Might Not Need an Effect",
    "explanation": "You Might Not Need an Effect – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/you-might-not-need-an-effect",
    "source_title": "You Might Not Need an Effect – React",
    "section": "You Might Not Need an Effect",
    "code": "function Game() {\n  const [card, setCard] = useState(null);\n  const [goldCardCount, setGoldCardCount] = useState(0);\n  const [round, setRound] = useState(1);\n  const [isGameOver, setIsGameOver] = useState(false);\n\n  // 🔴 Avoid: Chains of Effects that adjust the state solely to trigger each other\n  useEffect(() => {\n    if (card !== null && card.gold) {\n      setGoldCardCount(c => c + 1);\n    }\n  }, [card]);\n\n  useEffect(() => {\n    if (goldCardCount > 3) {\n      setRound(r => r + 1)\n      setGoldCardCount(0);\n    }\n  }, [goldCardCount]);\n\n  useEffect(() => {\n    if (round > 5) {\n      setIsGameOver(true);\n    }\n  }, [round]);\n\n  useEffect(() => {\n    alert('Good game!');\n  }, [isGameOver]);\n\n  function handlePlaceCard(nextCard) {\n    if (isGameOver) {\n      throw Error('Game already ended.');\n    } else {\n      setCard(nextCard);\n    }\n  }\n\n  // ...",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "effect",
      "you",
      "need",
      "state",
      "not",
      "might"
    ],
    "code_length": 39,
    "is_duplicate": false,
    "topic": "You Might Not Need an Effect",
    "purpose": "You Might Not Need an Effect",
    "explanation": "You Might Not Need an Effect – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/you-might-not-need-an-effect",
    "source_title": "You Might Not Need an Effect – React",
    "section": "You Might Not Need an Effect",
    "code": "function Game() {\n  const [card, setCard] = useState(null);\n  const [goldCardCount, setGoldCardCount] = useState(0);\n  const [round, setRound] = useState(1);\n\n  // ✅ Calculate what you can during rendering\n  const isGameOver = round > 5;\n\n  function handlePlaceCard(nextCard) {\n    if (isGameOver) {\n      throw Error('Game already ended.');\n    }\n\n    // ✅ Calculate all the next state in the event handler\n    setCard(nextCard);\n    if (nextCard.gold) {\n      if (goldCardCount <= 3) {\n        setGoldCardCount(goldCardCount + 1);\n      } else {\n        setGoldCardCount(0);\n        setRound(round + 1);\n        if (round === 5) {\n          alert('Good game!');\n        }\n      }\n    }\n  }\n\n  // ...",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "effect",
      "you",
      "need",
      "state",
      "not",
      "might"
    ],
    "code_length": 29,
    "is_duplicate": false,
    "topic": "You Might Not Need an Effect",
    "purpose": "You Might Not Need an Effect",
    "explanation": "You Might Not Need an Effect – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/you-might-not-need-an-effect",
    "source_title": "You Might Not Need an Effect – React",
    "section": "You Might Not Need an Effect",
    "code": "function App() {\n  // 🔴 Avoid: Effects with logic that should only ever run once\n  useEffect(() => {\n    loadDataFromLocalStorage();\n    checkAuthToken();\n  }, []);\n  // ...\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "effect",
      "you",
      "need",
      "not",
      "might"
    ],
    "code_length": 8,
    "is_duplicate": false,
    "topic": "You Might Not Need an Effect",
    "purpose": "You Might Not Need an Effect",
    "explanation": "You Might Not Need an Effect – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/you-might-not-need-an-effect",
    "source_title": "You Might Not Need an Effect – React",
    "section": "You Might Not Need an Effect",
    "code": "let didInit = false;\n\nfunction App() {\n  useEffect(() => {\n    if (!didInit) {\n      didInit = true;\n      // ✅ Only runs once per app load\n      loadDataFromLocalStorage();\n      checkAuthToken();\n    }\n  }, []);\n  // ...\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "effect",
      "you",
      "need",
      "not",
      "might"
    ],
    "code_length": 13,
    "is_duplicate": false,
    "topic": "You Might Not Need an Effect",
    "purpose": "You Might Not Need an Effect",
    "explanation": "You Might Not Need an Effect – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/you-might-not-need-an-effect",
    "source_title": "You Might Not Need an Effect – React",
    "section": "You Might Not Need an Effect",
    "code": "if (typeof window !== 'undefined') { // Check if we're running in the browser.\n   // ✅ Only runs once per app load\n  checkAuthToken();\n  loadDataFromLocalStorage();\n}\n\nfunction App() {\n  // ...\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "effect",
      "you",
      "need",
      "not",
      "might"
    ],
    "code_length": 9,
    "is_duplicate": false,
    "topic": "You Might Not Need an Effect",
    "purpose": "You Might Not Need an Effect",
    "explanation": "You Might Not Need an Effect – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/you-might-not-need-an-effect",
    "source_title": "You Might Not Need an Effect – React",
    "section": "You Might Not Need an Effect",
    "code": "function Toggle({ onChange }) {\n  const [isOn, setIsOn] = useState(false);\n\n  // 🔴 Avoid: The onChange handler runs too late\n  useEffect(() => {\n    onChange(isOn);\n  }, [isOn, onChange])\n\n  function handleClick() {\n    setIsOn(!isOn);\n  }\n\n  function handleDragEnd(e) {\n    if (isCloserToRightEdge(e)) {\n      setIsOn(true);\n    } else {\n      setIsOn(false);\n    }\n  }\n\n  // ...\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "effect",
      "you",
      "need",
      "state",
      "not",
      "might"
    ],
    "code_length": 22,
    "is_duplicate": false,
    "topic": "You Might Not Need an Effect",
    "purpose": "You Might Not Need an Effect",
    "explanation": "You Might Not Need an Effect – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/you-might-not-need-an-effect",
    "source_title": "You Might Not Need an Effect – React",
    "section": "You Might Not Need an Effect",
    "code": "function Toggle({ onChange }) {\n  const [isOn, setIsOn] = useState(false);\n\n  function updateToggle(nextIsOn) {\n    // ✅ Good: Perform all updates during the event that caused them\n    setIsOn(nextIsOn);\n    onChange(nextIsOn);\n  }\n\n  function handleClick() {\n    updateToggle(!isOn);\n  }\n\n  function handleDragEnd(e) {\n    if (isCloserToRightEdge(e)) {\n      updateToggle(true);\n    } else {\n      updateToggle(false);\n    }\n  }\n\n  // ...\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "effect",
      "you",
      "need",
      "state",
      "not",
      "might"
    ],
    "code_length": 23,
    "is_duplicate": false,
    "topic": "You Might Not Need an Effect",
    "purpose": "You Might Not Need an Effect",
    "explanation": "You Might Not Need an Effect – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/you-might-not-need-an-effect",
    "source_title": "You Might Not Need an Effect – React",
    "section": "You Might Not Need an Effect",
    "code": "// ✅ Also good: the component is fully controlled by its parent\nfunction Toggle({ isOn, onChange }) {\n  function handleClick() {\n    onChange(!isOn);\n  }\n\n  function handleDragEnd(e) {\n    if (isCloserToRightEdge(e)) {\n      onChange(true);\n    } else {\n      onChange(false);\n    }\n  }\n\n  // ...\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "effect",
      "you",
      "need",
      "not",
      "might"
    ],
    "code_length": 16,
    "is_duplicate": false,
    "topic": "You Might Not Need an Effect",
    "purpose": "You Might Not Need an Effect",
    "explanation": "You Might Not Need an Effect – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/you-might-not-need-an-effect",
    "source_title": "You Might Not Need an Effect – React",
    "section": "You Might Not Need an Effect",
    "code": "function Parent() {\n  const [data, setData] = useState(null);\n  // ...\n  return <Child onFetched={setData} />;\n}\n\nfunction Child({ onFetched }) {\n  const data = useSomeAPI();\n  // 🔴 Avoid: Passing data to the parent in an Effect\n  useEffect(() => {\n    if (data) {\n      onFetched(data);\n    }\n  }, [onFetched, data]);\n  // ...\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "effect",
      "you",
      "need",
      "state",
      "not",
      "might"
    ],
    "code_length": 16,
    "is_duplicate": false,
    "topic": "You Might Not Need an Effect",
    "purpose": "You Might Not Need an Effect",
    "explanation": "You Might Not Need an Effect – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/you-might-not-need-an-effect",
    "source_title": "You Might Not Need an Effect – React",
    "section": "You Might Not Need an Effect",
    "code": "function Parent() {\n  const data = useSomeAPI();\n  // ...\n  // ✅ Good: Passing data down to the child\n  return <Child data={data} />;\n}\n\nfunction Child({ data }) {\n  // ...\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "effect",
      "you",
      "need",
      "not",
      "might"
    ],
    "code_length": 10,
    "is_duplicate": false,
    "topic": "You Might Not Need an Effect",
    "purpose": "You Might Not Need an Effect",
    "explanation": "You Might Not Need an Effect – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/you-might-not-need-an-effect",
    "source_title": "You Might Not Need an Effect – React",
    "section": "You Might Not Need an Effect",
    "code": "function useOnlineStatus() {\n  // Not ideal: Manual store subscription in an Effect\n  const [isOnline, setIsOnline] = useState(true);\n  useEffect(() => {\n    function updateState() {\n      setIsOnline(navigator.onLine);\n    }\n\n    updateState();\n\n    window.addEventListener('online', updateState);\n    window.addEventListener('offline', updateState);\n    return () => {\n      window.removeEventListener('online', updateState);\n      window.removeEventListener('offline', updateState);\n    };\n  }, []);\n  return isOnline;\n}\n\nfunction ChatIndicator() {\n  const isOnline = useOnlineStatus();\n  // ...\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "effect",
      "you",
      "need",
      "state",
      "not",
      "might"
    ],
    "code_length": 24,
    "is_duplicate": false,
    "topic": "You Might Not Need an Effect",
    "purpose": "You Might Not Need an Effect",
    "explanation": "You Might Not Need an Effect – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/you-might-not-need-an-effect",
    "source_title": "You Might Not Need an Effect – React",
    "section": "You Might Not Need an Effect",
    "code": "function subscribe(callback) {\n  window.addEventListener('online', callback);\n  window.addEventListener('offline', callback);\n  return () => {\n    window.removeEventListener('online', callback);\n    window.removeEventListener('offline', callback);\n  };\n}\n\nfunction useOnlineStatus() {\n  // ✅ Good: Subscribing to an external store with a built-in Hook\n  return useSyncExternalStore(\n    subscribe, // React won't resubscribe for as long as you pass the same function\n    () => navigator.onLine, // How to get the value on the client\n    () => true // How to get the value on the server\n  );\n}\n\nfunction ChatIndicator() {\n  const isOnline = useOnlineStatus();\n  // ...\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "effect",
      "you",
      "need",
      "not",
      "might"
    ],
    "code_length": 22,
    "is_duplicate": false,
    "topic": "You Might Not Need an Effect",
    "purpose": "You Might Not Need an Effect",
    "explanation": "You Might Not Need an Effect – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/you-might-not-need-an-effect",
    "source_title": "You Might Not Need an Effect – React",
    "section": "You Might Not Need an Effect",
    "code": "function SearchResults({ query }) {\n  const [results, setResults] = useState([]);\n  const [page, setPage] = useState(1);\n\n  useEffect(() => {\n    // 🔴 Avoid: Fetching without cleanup logic\n    fetchResults(query, page).then(json => {\n      setResults(json);\n    });\n  }, [query, page]);\n\n  function handleNextPageClick() {\n    setPage(page + 1);\n  }\n  // ...\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "effect",
      "you",
      "need",
      "state",
      "not",
      "might"
    ],
    "code_length": 16,
    "is_duplicate": false,
    "topic": "You Might Not Need an Effect",
    "purpose": "You Might Not Need an Effect",
    "explanation": "You Might Not Need an Effect – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/you-might-not-need-an-effect",
    "source_title": "You Might Not Need an Effect – React",
    "section": "You Might Not Need an Effect",
    "code": "function SearchResults({ query }) {\n  const [results, setResults] = useState([]);\n  const [page, setPage] = useState(1);\n  useEffect(() => {\n    let ignore = false;\n    fetchResults(query, page).then(json => {\n      if (!ignore) {\n        setResults(json);\n      }\n    });\n    return () => {\n      ignore = true;\n    };\n  }, [query, page]);\n\n  function handleNextPageClick() {\n    setPage(page + 1);\n  }\n  // ...\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "effect",
      "you",
      "need",
      "state",
      "not",
      "might"
    ],
    "code_length": 20,
    "is_duplicate": false,
    "topic": "You Might Not Need an Effect",
    "purpose": "You Might Not Need an Effect",
    "explanation": "You Might Not Need an Effect – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/you-might-not-need-an-effect",
    "source_title": "You Might Not Need an Effect – React",
    "section": "You Might Not Need an Effect",
    "code": "function SearchResults({ query }) {\n  const [page, setPage] = useState(1);\n  const params = new URLSearchParams({ query, page });\n  const results = useData(`/api/search?${params}`);\n\n  function handleNextPageClick() {\n    setPage(page + 1);\n  }\n  // ...\n}\n\nfunction useData(url) {\n  const [data, setData] = useState(null);\n  useEffect(() => {\n    let ignore = false;\n    fetch(url)\n      .then(response => response.json())\n      .then(json => {\n        if (!ignore) {\n          setData(json);\n        }\n      });\n    return () => {\n      ignore = true;\n    };\n  }, [url]);\n  return data;\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "effect",
      "you",
      "need",
      "state",
      "not",
      "might"
    ],
    "code_length": 28,
    "is_duplicate": false,
    "topic": "You Might Not Need an Effect",
    "purpose": "You Might Not Need an Effect",
    "explanation": "You Might Not Need an Effect – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/you-might-not-need-an-effect",
    "source_title": "You Might Not Need an Effect – React",
    "section": "You Might Not Need an Effect",
    "code": "import { useState, useEffect } from 'react';\nimport { initialTodos, createTodo } from './todos.js';\n\nexport default function TodoList() {\n  const [todos, setTodos] = useState(initialTodos);\n  const [showActive, setShowActive] = useState(false);\n  const [activeTodos, setActiveTodos] = useState([]);\n  const [visibleTodos, setVisibleTodos] = useState([]);\n  const [footer, setFooter] = useState(null);\n\n  useEffect(() => {\n    setActiveTodos(todos.filter(todo => !todo.completed));\n  }, [todos]);\n\n  useEffect(() => {\n    setVisibleTodos(showActive ? activeTodos : todos);\n  }, [showActive, todos, activeTodos]);\n\n  useEffect(() => {\n    setFooter(\n      <footer>\n        {activeTodos.length} todos left\n      </footer>\n    );\n  }, [activeTodos]);\n\n  return (\n    <>\n      <label>\n        <input\n          type=\"checkbox\"\n          checked={showActive}\n          onChange={e => setShowActive(e.target.checked)}\n        />\n        Show only active todos\n      </label>\n      <NewTodo onAdd={newTodo => setTodos([...todos, newTodo])} />\n      <ul>\n        {visibleTodos.map(todo => (\n          <li key={todo.id}>\n            {todo.completed ? <s>{todo.text}</s> : todo.text}\n          </li>\n        ))}\n      </ul>\n      {footer}\n    </>\n  );\n}\n\nfunction NewTodo({ onAdd }) {\n  const [text, setText] = useState('');\n\n  function handleAddClick() {\n    setText('');\n    onAdd(createTodo(text));\n  }\n\n  return (\n    <>\n      <input value={text} onChange={e => setText(e.target.value)} />\n      <button onClick={handleAddClick}>\n        Add\n      </button>\n    </>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "effect",
      "you",
      "need",
      "state",
      "component",
      "not",
      "might"
    ],
    "code_length": 66,
    "is_duplicate": false,
    "topic": "You Might Not Need an Effect",
    "purpose": "You Might Not Need an Effect",
    "explanation": "You Might Not Need an Effect – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/referencing-values-with-refs",
    "source_title": "Referencing Values with Refs – React",
    "section": "Referencing Values with Refs",
    "code": "import { useRef } from 'react';",
    "code_language": "javascript/jsx",
    "code_type": "import",
    "tags": [
      "values",
      "refs",
      "referencing"
    ],
    "code_length": 1,
    "is_duplicate": true,
    "topic": "Referencing Values with Refs",
    "purpose": "Referencing Values with Refs",
    "explanation": "Referencing Values with Refs – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/referencing-values-with-refs",
    "source_title": "Referencing Values with Refs – React",
    "section": "Referencing Values with Refs",
    "code": "const ref = useRef(0);",
    "code_language": "unknown",
    "code_type": "snippet",
    "tags": [
      "values",
      "refs",
      "referencing"
    ],
    "code_length": 1,
    "is_duplicate": true,
    "topic": "Referencing Values with Refs",
    "purpose": "Referencing Values with Refs",
    "explanation": "Referencing Values with Refs – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/referencing-values-with-refs",
    "source_title": "Referencing Values with Refs – React",
    "section": "Referencing Values with Refs",
    "code": "{ \n  current: 0 // The value you passed to useRef\n}",
    "code_language": "unknown",
    "code_type": "snippet",
    "tags": [
      "values",
      "refs",
      "referencing"
    ],
    "code_length": 3,
    "is_duplicate": false,
    "topic": "Referencing Values with Refs",
    "purpose": "Referencing Values with Refs",
    "explanation": "Referencing Values with Refs – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/referencing-values-with-refs",
    "source_title": "Referencing Values with Refs – React",
    "section": "Referencing Values with Refs",
    "code": "import { useRef } from 'react';\n\nexport default function Counter() {\n  let ref = useRef(0);\n\n  function handleClick() {\n    ref.current = ref.current + 1;\n    alert('You clicked ' + ref.current + ' times!');\n  }\n\n  return (\n    <button onClick={handleClick}>\n      Click me!\n    </button>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "values",
      "refs",
      "referencing",
      "component"
    ],
    "code_length": 16,
    "is_duplicate": false,
    "topic": "Referencing Values with Refs",
    "purpose": "Referencing Values with Refs",
    "explanation": "Referencing Values with Refs – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/referencing-values-with-refs",
    "source_title": "Referencing Values with Refs – React",
    "section": "Referencing Values with Refs",
    "code": "const [startTime, setStartTime] = useState(null);\nconst [now, setNow] = useState(null);",
    "code_language": "unknown",
    "code_type": "snippet",
    "tags": [
      "values",
      "refs",
      "state",
      "referencing"
    ],
    "code_length": 2,
    "is_duplicate": false,
    "topic": "Referencing Values with Refs",
    "purpose": "Referencing Values with Refs",
    "explanation": "Referencing Values with Refs – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/referencing-values-with-refs",
    "source_title": "Referencing Values with Refs – React",
    "section": "Referencing Values with Refs",
    "code": "import { useState } from 'react';\n\nexport default function Stopwatch() {\n  const [startTime, setStartTime] = useState(null);\n  const [now, setNow] = useState(null);\n\n  function handleStart() {\n    // Start counting.\n    setStartTime(Date.now());\n    setNow(Date.now());\n\n    setInterval(() => {\n      // Update the current time every 10ms.\n      setNow(Date.now());\n    }, 10);\n  }\n\n  let secondsPassed = 0;\n  if (startTime != null && now != null) {\n    secondsPassed = (now - startTime) / 1000;\n  }\n\n  return (\n    <>\n      <h1>Time passed: {secondsPassed.toFixed(3)}</h1>\n      <button onClick={handleStart}>\n        Start\n      </button>\n    </>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "state",
      "component",
      "refs",
      "values",
      "referencing"
    ],
    "code_length": 31,
    "is_duplicate": false,
    "topic": "Referencing Values with Refs",
    "purpose": "Referencing Values with Refs",
    "explanation": "Referencing Values with Refs – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/referencing-values-with-refs",
    "source_title": "Referencing Values with Refs – React",
    "section": "Referencing Values with Refs",
    "code": "import { useState, useRef } from 'react';\n\nexport default function Stopwatch() {\n  const [startTime, setStartTime] = useState(null);\n  const [now, setNow] = useState(null);\n  const intervalRef = useRef(null);\n\n  function handleStart() {\n    setStartTime(Date.now());\n    setNow(Date.now());\n\n    clearInterval(intervalRef.current);\n    intervalRef.current = setInterval(() => {\n      setNow(Date.now());\n    }, 10);\n  }\n\n  function handleStop() {\n    clearInterval(intervalRef.current);\n  }\n\n  let secondsPassed = 0;\n  if (startTime != null && now != null) {\n    secondsPassed = (now - startTime) / 1000;\n  }\n\n  return (\n    <>\n      <h1>Time passed: {secondsPassed.toFixed(3)}</h1>\n      <button onClick={handleStart}>\n        Start\n      </button>\n      <button onClick={handleStop}>\n        Stop\n      </button>\n    </>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "state",
      "component",
      "refs",
      "values",
      "referencing"
    ],
    "code_length": 38,
    "is_duplicate": false,
    "topic": "Referencing Values with Refs",
    "purpose": "Referencing Values with Refs",
    "explanation": "Referencing Values with Refs – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/referencing-values-with-refs",
    "source_title": "Referencing Values with Refs – React",
    "section": "Referencing Values with Refs",
    "code": "import { useState } from 'react';\n\nexport default function Counter() {\n  const [count, setCount] = useState(0);\n\n  function handleClick() {\n    setCount(count + 1);\n  }\n\n  return (\n    <button onClick={handleClick}>\n      You clicked {count} times\n    </button>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "state",
      "component",
      "refs",
      "values",
      "referencing"
    ],
    "code_length": 15,
    "is_duplicate": false,
    "topic": "Referencing Values with Refs",
    "purpose": "Referencing Values with Refs",
    "explanation": "Referencing Values with Refs – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/referencing-values-with-refs",
    "source_title": "Referencing Values with Refs – React",
    "section": "Referencing Values with Refs",
    "code": "import { useRef } from 'react';\n\nexport default function Counter() {\n  let countRef = useRef(0);\n\n  function handleClick() {\n    // This doesn't re-render the component!\n    countRef.current = countRef.current + 1;\n  }\n\n  return (\n    <button onClick={handleClick}>\n      You clicked {countRef.current} times\n    </button>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "values",
      "refs",
      "referencing",
      "component"
    ],
    "code_length": 16,
    "is_duplicate": false,
    "topic": "Referencing Values with Refs",
    "purpose": "Referencing Values with Refs",
    "explanation": "Referencing Values with Refs – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/referencing-values-with-refs",
    "source_title": "Referencing Values with Refs – React",
    "section": "Referencing Values with Refs",
    "code": "ref.current = 5;\nconsole.log(ref.current); // 5",
    "code_language": "unknown",
    "code_type": "snippet",
    "tags": [
      "values",
      "refs",
      "referencing"
    ],
    "code_length": 2,
    "is_duplicate": false,
    "topic": "Referencing Values with Refs",
    "purpose": "Referencing Values with Refs",
    "explanation": "Referencing Values with Refs – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/referencing-values-with-refs",
    "source_title": "Referencing Values with Refs – React",
    "section": "Referencing Values with Refs",
    "code": "import { useState } from 'react';\n\nexport default function Chat() {\n  const [text, setText] = useState('');\n  const [isSending, setIsSending] = useState(false);\n  let timeoutID = null;\n\n  function handleSend() {\n    setIsSending(true);\n    timeoutID = setTimeout(() => {\n      alert('Sent!');\n      setIsSending(false);\n    }, 3000);\n  }\n\n  function handleUndo() {\n    setIsSending(false);\n    clearTimeout(timeoutID);\n  }\n\n  return (\n    <>\n      <input\n        disabled={isSending}\n        value={text}\n        onChange={e => setText(e.target.value)}\n      />\n      <button\n        disabled={isSending}\n        onClick={handleSend}>\n        {isSending ? 'Sending...' : 'Send'}\n      </button>\n      {isSending &&\n        <button onClick={handleUndo}>\n          Undo\n        </button>\n      }\n    </>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "state",
      "component",
      "refs",
      "values",
      "referencing"
    ],
    "code_length": 40,
    "is_duplicate": false,
    "topic": "Referencing Values with Refs",
    "purpose": "Referencing Values with Refs",
    "explanation": "Referencing Values with Refs – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/state-a-components-memory",
    "source_title": "State: A Component's Memory – React",
    "section": "State: A Component's Memory",
    "code": "import { useState } from 'react';",
    "code_language": "javascript/jsx",
    "code_type": "import",
    "tags": [
      "state",
      "memory",
      "state:",
      "component's"
    ],
    "code_length": 1,
    "is_duplicate": false,
    "topic": "State: A Component's Memory",
    "purpose": "State: A Component's Memory",
    "explanation": "State: A Component's Memory – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/state-a-components-memory",
    "source_title": "State: A Component's Memory – React",
    "section": "State: A Component's Memory",
    "code": "let index = 0;",
    "code_language": "unknown",
    "code_type": "snippet",
    "tags": [
      "memory",
      "state:",
      "component's"
    ],
    "code_length": 1,
    "is_duplicate": false,
    "topic": "State: A Component's Memory",
    "purpose": "State: A Component's Memory",
    "explanation": "State: A Component's Memory – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/state-a-components-memory",
    "source_title": "State: A Component's Memory – React",
    "section": "State: A Component's Memory",
    "code": "const [index, setIndex] = useState(0);",
    "code_language": "unknown",
    "code_type": "snippet",
    "tags": [
      "state",
      "memory",
      "state:",
      "component's"
    ],
    "code_length": 1,
    "is_duplicate": false,
    "topic": "State: A Component's Memory",
    "purpose": "State: A Component's Memory",
    "explanation": "State: A Component's Memory – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/state-a-components-memory",
    "source_title": "State: A Component's Memory – React",
    "section": "State: A Component's Memory",
    "code": "function handleClick() {\n  setIndex(index + 1);\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "memory",
      "state:",
      "component's"
    ],
    "code_length": 3,
    "is_duplicate": false,
    "topic": "State: A Component's Memory",
    "purpose": "State: A Component's Memory",
    "explanation": "State: A Component's Memory – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/state-a-components-memory",
    "source_title": "State: A Component's Memory – React",
    "section": "State: A Component's Memory",
    "code": "import { useState } from 'react';\nimport { sculptureList } from './data.js';\n\nexport default function Gallery() {\n  const [index, setIndex] = useState(0);\n\n  function handleClick() {\n    setIndex(index + 1);\n  }\n\n  let sculpture = sculptureList[index];\n  return (\n    <>\n      <button onClick={handleClick}>\n        Next\n      </button>\n      <h2>\n        <i>{sculpture.name} </i> \n        by {sculpture.artist}\n      </h2>\n      <h3>  \n        ({index + 1} of {sculptureList.length})\n      </h3>\n      <img \n        src={sculpture.url} \n        alt={sculpture.alt}\n      />\n      <p>\n        {sculpture.description}\n      </p>\n    </>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "memory",
      "state",
      "component",
      "state:",
      "component's"
    ],
    "code_length": 33,
    "is_duplicate": false,
    "topic": "State: A Component's Memory",
    "purpose": "State: A Component's Memory",
    "explanation": "State: A Component's Memory – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/state-a-components-memory",
    "source_title": "State: A Component's Memory – React",
    "section": "State: A Component's Memory",
    "code": "const [index, setIndex] = useState(0);",
    "code_language": "unknown",
    "code_type": "snippet",
    "tags": [
      "state",
      "memory",
      "state:",
      "component's"
    ],
    "code_length": 1,
    "is_duplicate": true,
    "topic": "State: A Component's Memory",
    "purpose": "State: A Component's Memory",
    "explanation": "State: A Component's Memory – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/state-a-components-memory",
    "source_title": "State: A Component's Memory – React",
    "section": "State: A Component's Memory",
    "code": "const [index, setIndex] = useState(0);",
    "code_language": "unknown",
    "code_type": "snippet",
    "tags": [
      "state",
      "memory",
      "state:",
      "component's"
    ],
    "code_length": 1,
    "is_duplicate": true,
    "topic": "State: A Component's Memory",
    "purpose": "State: A Component's Memory",
    "explanation": "State: A Component's Memory – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/state-a-components-memory",
    "source_title": "State: A Component's Memory – React",
    "section": "State: A Component's Memory",
    "code": "import { useState } from 'react';\nimport { sculptureList } from './data.js';\n\nexport default function Gallery() {\n  const [index, setIndex] = useState(0);\n  const [showMore, setShowMore] = useState(false);\n\n  function handleNextClick() {\n    setIndex(index + 1);\n  }\n\n  function handleMoreClick() {\n    setShowMore(!showMore);\n  }\n\n  let sculpture = sculptureList[index];\n  return (\n    <>\n      <button onClick={handleNextClick}>\n        Next\n      </button>\n      <h2>\n        <i>{sculpture.name} </i> \n        by {sculpture.artist}\n      </h2>\n      <h3>  \n        ({index + 1} of {sculptureList.length})\n      </h3>\n      <button onClick={handleMoreClick}>\n        {showMore ? 'Hide' : 'Show'} details\n      </button>\n      {showMore && <p>{sculpture.description}</p>}\n      <img \n        src={sculpture.url} \n        alt={sculpture.alt}\n      />\n    </>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "memory",
      "state",
      "component",
      "state:",
      "component's"
    ],
    "code_length": 39,
    "is_duplicate": false,
    "topic": "State: A Component's Memory",
    "purpose": "State: A Component's Memory",
    "explanation": "State: A Component's Memory – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/state-a-components-memory",
    "source_title": "State: A Component's Memory – React",
    "section": "State: A Component's Memory",
    "code": "import Gallery from './Gallery.js';\n\nexport default function Page() {\n  return (\n    <div className=\"Page\">\n      <Gallery />\n      <Gallery />\n    </div>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "memory",
      "state:",
      "component's",
      "component"
    ],
    "code_length": 10,
    "is_duplicate": false,
    "topic": "State: A Component's Memory",
    "purpose": "State: A Component's Memory",
    "explanation": "State: A Component's Memory – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/state-a-components-memory",
    "source_title": "State: A Component's Memory – React",
    "section": "State: A Component's Memory",
    "code": "import { useState } from 'react';\nimport { sculptureList } from './data.js';\n\nexport default function Gallery() {\n  const [index, setIndex] = useState(0);\n  const [showMore, setShowMore] = useState(false);\n\n  function handleNextClick() {\n    setIndex(index + 1);\n  }\n\n  function handleMoreClick() {\n    setShowMore(!showMore);\n  }\n\n  let sculpture = sculptureList[index];\n  return (\n    <>\n      <button onClick={handleNextClick}>\n        Next\n      </button>\n      <h2>\n        <i>{sculpture.name} </i> \n        by {sculpture.artist}\n      </h2>\n      <h3>  \n        ({index + 1} of {sculptureList.length})\n      </h3>\n      <button onClick={handleMoreClick}>\n        {showMore ? 'Hide' : 'Show'} details\n      </button>\n      {showMore && <p>{sculpture.description}</p>}\n      <img \n        src={sculpture.url} \n        alt={sculpture.alt}\n      />\n    </>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "memory",
      "state",
      "component",
      "state:",
      "component's"
    ],
    "code_length": 39,
    "is_duplicate": true,
    "topic": "State: A Component's Memory",
    "purpose": "State: A Component's Memory",
    "explanation": "State: A Component's Memory – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/reacting-to-input-with-state",
    "source_title": "Reacting to Input with State – React",
    "section": "Reacting to Input with State",
    "code": "async function handleFormSubmit(e) {\n  e.preventDefault();\n  disable(textarea);\n  disable(button);\n  show(loadingMessage);\n  hide(errorMessage);\n  try {\n    await submitForm(textarea.value);\n    show(successMessage);\n    hide(form);\n  } catch (err) {\n    show(errorMessage);\n    errorMessage.textContent = err.message;\n  } finally {\n    hide(loadingMessage);\n    enable(textarea);\n    enable(button);\n  }\n}\n\nfunction handleTextareaChange() {\n  if (textarea.value.length === 0) {\n    disable(button);\n  } else {\n    enable(button);\n  }\n}\n\nfunction hide(el) {\n  el.style.display = 'none';\n}\n\nfunction show(el) {\n  el.style.display = '';\n}\n\nfunction enable(el) {\n  el.disabled = false;\n}\n\nfunction disable(el) {\n  el.disabled = true;\n}\n\nfunction submitForm(answer) {\n  // Pretend it's hitting the network.\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (answer.toLowerCase() === 'istanbul') {\n        resolve();\n      } else {\n        reject(new Error('Good guess but a wrong answer. Try again!'));\n      }\n    }, 1500);\n  });\n}\n\nlet form = document.getElementById('form');\nlet textarea = document.getElementById('textarea');\nlet button = document.getElementById('button');\nlet loadingMessage = document.getElementById('loading');\nlet errorMessage = document.getElementById('error');\nlet successMessage = document.getElementById('success');\nform.onsubmit = handleFormSubmit;\ntextarea.oninput = handleTextareaChange;",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "reacting",
      "state",
      "input"
    ],
    "code_length": 65,
    "is_duplicate": false,
    "topic": "Reacting to Input with State",
    "purpose": "Reacting to Input with State",
    "explanation": "Reacting to Input with State – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/reacting-to-input-with-state",
    "source_title": "Reacting to Input with State – React",
    "section": "Reacting to Input with State",
    "code": "export default function Form({\n  status = 'empty'\n}) {\n  if (status === 'success') {\n    return <h1>That's right!</h1>\n  }\n  return (\n    <>\n      <h2>City quiz</h2>\n      <p>\n        In which city is there a billboard that turns air into drinkable water?\n      </p>\n      <form>\n        <textarea />\n        <br />\n        <button>\n          Submit\n        </button>\n      </form>\n    </>\n  )\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "reacting",
      "state",
      "input",
      "component"
    ],
    "code_length": 22,
    "is_duplicate": false,
    "topic": "Reacting to Input with State",
    "purpose": "Reacting to Input with State",
    "explanation": "Reacting to Input with State – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/reacting-to-input-with-state",
    "source_title": "Reacting to Input with State – React",
    "section": "Reacting to Input with State",
    "code": "export default function Form({\n  // Try 'submitting', 'error', 'success':\n  status = 'empty'\n}) {\n  if (status === 'success') {\n    return <h1>That's right!</h1>\n  }\n  return (\n    <>\n      <h2>City quiz</h2>\n      <p>\n        In which city is there a billboard that turns air into drinkable water?\n      </p>\n      <form>\n        <textarea disabled={\n          status === 'submitting'\n        } />\n        <br />\n        <button disabled={\n          status === 'empty' ||\n          status === 'submitting'\n        }>\n          Submit\n        </button>\n        {status === 'error' &&\n          <p className=\"Error\">\n            Good guess but a wrong answer. Try again!\n          </p>\n        }\n      </form>\n      </>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "reacting",
      "state",
      "input",
      "component"
    ],
    "code_length": 33,
    "is_duplicate": false,
    "topic": "Reacting to Input with State",
    "purpose": "Reacting to Input with State",
    "explanation": "Reacting to Input with State – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/reacting-to-input-with-state",
    "source_title": "Reacting to Input with State – React",
    "section": "Reacting to Input with State",
    "code": "const [answer, setAnswer] = useState('');\nconst [error, setError] = useState(null);",
    "code_language": "unknown",
    "code_type": "snippet",
    "tags": [
      "reacting",
      "state",
      "input"
    ],
    "code_length": 2,
    "is_duplicate": false,
    "topic": "Reacting to Input with State",
    "purpose": "Reacting to Input with State",
    "explanation": "Reacting to Input with State – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/reacting-to-input-with-state",
    "source_title": "Reacting to Input with State – React",
    "section": "Reacting to Input with State",
    "code": "const [isEmpty, setIsEmpty] = useState(true);\nconst [isTyping, setIsTyping] = useState(false);\nconst [isSubmitting, setIsSubmitting] = useState(false);\nconst [isSuccess, setIsSuccess] = useState(false);\nconst [isError, setIsError] = useState(false);",
    "code_language": "unknown",
    "code_type": "snippet",
    "tags": [
      "reacting",
      "state",
      "input"
    ],
    "code_length": 5,
    "is_duplicate": false,
    "topic": "Reacting to Input with State",
    "purpose": "Reacting to Input with State",
    "explanation": "Reacting to Input with State – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/reacting-to-input-with-state",
    "source_title": "Reacting to Input with State – React",
    "section": "Reacting to Input with State",
    "code": "const [answer, setAnswer] = useState('');\nconst [error, setError] = useState(null);\nconst [status, setStatus] = useState('typing'); // 'typing', 'submitting', or 'success'",
    "code_language": "unknown",
    "code_type": "snippet",
    "tags": [
      "reacting",
      "state",
      "input"
    ],
    "code_length": 3,
    "is_duplicate": false,
    "topic": "Reacting to Input with State",
    "purpose": "Reacting to Input with State",
    "explanation": "Reacting to Input with State – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/reacting-to-input-with-state",
    "source_title": "Reacting to Input with State – React",
    "section": "Reacting to Input with State",
    "code": "import { useState } from 'react';\n\nexport default function Form() {\n  const [answer, setAnswer] = useState('');\n  const [error, setError] = useState(null);\n  const [status, setStatus] = useState('typing');\n\n  if (status === 'success') {\n    return <h1>That's right!</h1>\n  }\n\n  async function handleSubmit(e) {\n    e.preventDefault();\n    setStatus('submitting');\n    try {\n      await submitForm(answer);\n      setStatus('success');\n    } catch (err) {\n      setStatus('typing');\n      setError(err);\n    }\n  }\n\n  function handleTextareaChange(e) {\n    setAnswer(e.target.value);\n  }\n\n  return (\n    <>\n      <h2>City quiz</h2>\n      <p>\n        In which city is there a billboard that turns air into drinkable water?\n      </p>\n      <form onSubmit={handleSubmit}>\n        <textarea\n          value={answer}\n          onChange={handleTextareaChange}\n          disabled={status === 'submitting'}\n        />\n        <br />\n        <button disabled={\n          answer.length === 0 ||\n          status === 'submitting'\n        }>\n          Submit\n        </button>\n        {error !== null &&\n          <p className=\"Error\">\n            {error.message}\n          </p>\n        }\n      </form>\n    </>\n  );\n}\n\nfunction submitForm(answer) {\n  // Pretend it's hitting the network.\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      let shouldError = answer.toLowerCase() !== 'lima'\n      if (shouldError) {\n        reject(new Error('Good guess but a wrong answer. Try again!'));\n      } else {\n        resolve();\n      }\n    }, 1500);\n  });\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "reacting",
      "state",
      "input",
      "component"
    ],
    "code_length": 69,
    "is_duplicate": false,
    "topic": "Reacting to Input with State",
    "purpose": "Reacting to Input with State",
    "explanation": "Reacting to Input with State – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/reacting-to-input-with-state",
    "source_title": "Reacting to Input with State – React",
    "section": "Reacting to Input with State",
    "code": "export default function Picture() {\n  return (\n    <div className=\"background background--active\">\n      <img\n        className=\"picture\"\n        alt=\"Rainbow houses in Kampung Pelangi, Indonesia\"\n        src=\"https://i.imgur.com/5qwVYb1.jpeg\"\n      />\n    </div>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "reacting",
      "state",
      "input",
      "component"
    ],
    "code_length": 11,
    "is_duplicate": false,
    "topic": "Reacting to Input with State",
    "purpose": "Reacting to Input with State",
    "explanation": "Reacting to Input with State – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/managing-state",
    "source_title": "Managing State – React",
    "section": "Managing State",
    "code": "import { useState } from 'react';\n\nexport default function Form() {\n  const [firstName, setFirstName] = useState('');\n  const [lastName, setLastName] = useState('');\n  const [fullName, setFullName] = useState('');\n\n  function handleFirstNameChange(e) {\n    setFirstName(e.target.value);\n    setFullName(e.target.value + ' ' + lastName);\n  }\n\n  function handleLastNameChange(e) {\n    setLastName(e.target.value);\n    setFullName(firstName + ' ' + e.target.value);\n  }\n\n  return (\n    <>\n      <h2>Let’s check you in</h2>\n      <label>\n        First name:{' '}\n        <input\n          value={firstName}\n          onChange={handleFirstNameChange}\n        />\n      </label>\n      <label>\n        Last name:{' '}\n        <input\n          value={lastName}\n          onChange={handleLastNameChange}\n        />\n      </label>\n      <p>\n        Your ticket will be issued to: <b>{fullName}</b>\n      </p>\n    </>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "managing",
      "state",
      "component"
    ],
    "code_length": 40,
    "is_duplicate": true,
    "topic": "Managing State",
    "purpose": "Managing State",
    "explanation": "Managing State – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/managing-state",
    "source_title": "Managing State – React",
    "section": "Managing State",
    "code": "import { useState } from 'react';\n\nexport default function Form() {\n  const [firstName, setFirstName] = useState('');\n  const [lastName, setLastName] = useState('');\n\n  const fullName = firstName + ' ' + lastName;\n\n  function handleFirstNameChange(e) {\n    setFirstName(e.target.value);\n  }\n\n  function handleLastNameChange(e) {\n    setLastName(e.target.value);\n  }\n\n  return (\n    <>\n      <h2>Let’s check you in</h2>\n      <label>\n        First name:{' '}\n        <input\n          value={firstName}\n          onChange={handleFirstNameChange}\n        />\n      </label>\n      <label>\n        Last name:{' '}\n        <input\n          value={lastName}\n          onChange={handleLastNameChange}\n        />\n      </label>\n      <p>\n        Your ticket will be issued to: <b>{fullName}</b>\n      </p>\n    </>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "managing",
      "state",
      "component"
    ],
    "code_length": 39,
    "is_duplicate": true,
    "topic": "Managing State",
    "purpose": "Managing State",
    "explanation": "Managing State – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/managing-state",
    "source_title": "Managing State – React",
    "section": "Managing State",
    "code": "import { useState } from 'react';\n\nexport default function Accordion() {\n  const [activeIndex, setActiveIndex] = useState(0);\n  return (\n    <>\n      <h2>Almaty, Kazakhstan</h2>\n      <Panel\n        title=\"About\"\n        isActive={activeIndex === 0}\n        onShow={() => setActiveIndex(0)}\n      >\n        With a population of about 2 million, Almaty is Kazakhstan's largest city. From 1929 to 1997, it was its capital city.\n      </Panel>\n      <Panel\n        title=\"Etymology\"\n        isActive={activeIndex === 1}\n        onShow={() => setActiveIndex(1)}\n      >\n        The name comes from <span lang=\"kk-KZ\">алма</span>, the Kazakh word for \"apple\" and is often translated as \"full of apples\". In fact, the region surrounding Almaty is thought to be the ancestral home of the apple, and the wild <i lang=\"la\">Malus sieversii</i> is considered a likely candidate for the ancestor of the modern domestic apple.\n      </Panel>\n    </>\n  );\n}\n\nfunction Panel({\n  title,\n  children,\n  isActive,\n  onShow\n}) {\n  return (\n    <section className=\"panel\">\n      <h3>{title}</h3>\n      {isActive ? (\n        <p>{children}</p>\n      ) : (\n        <button onClick={onShow}>\n          Show\n        </button>\n      )}\n    </section>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "managing",
      "state",
      "component"
    ],
    "code_length": 44,
    "is_duplicate": true,
    "topic": "Managing State",
    "purpose": "Managing State",
    "explanation": "Managing State – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/managing-state",
    "source_title": "Managing State – React",
    "section": "Managing State",
    "code": "import { useState } from 'react';\nimport Chat from './Chat.js';\nimport ContactList from './ContactList.js';\n\nexport default function Messenger() {\n  const [to, setTo] = useState(contacts[0]);\n  return (\n    <div>\n      <ContactList\n        contacts={contacts}\n        selectedContact={to}\n        onSelect={contact => setTo(contact)}\n      />\n      <Chat contact={to} />\n    </div>\n  )\n}\n\nconst contacts = [\n  { name: 'Taylor', email: 'taylor@mail.com' },\n  { name: 'Alice', email: 'alice@mail.com' },\n  { name: 'Bob', email: 'bob@mail.com' }\n];",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "managing",
      "state",
      "component"
    ],
    "code_length": 23,
    "is_duplicate": false,
    "topic": "Managing State",
    "purpose": "Managing State",
    "explanation": "Managing State – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/managing-state",
    "source_title": "Managing State – React",
    "section": "Managing State",
    "code": "import { useState } from 'react';\nimport Chat from './Chat.js';\nimport ContactList from './ContactList.js';\n\nexport default function Messenger() {\n  const [to, setTo] = useState(contacts[0]);\n  return (\n    <div>\n      <ContactList\n        contacts={contacts}\n        selectedContact={to}\n        onSelect={contact => setTo(contact)}\n      />\n      <Chat key={to.email} contact={to} />\n    </div>\n  )\n}\n\nconst contacts = [\n  { name: 'Taylor', email: 'taylor@mail.com' },\n  { name: 'Alice', email: 'alice@mail.com' },\n  { name: 'Bob', email: 'bob@mail.com' }\n];",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "managing",
      "state",
      "component"
    ],
    "code_length": 23,
    "is_duplicate": false,
    "topic": "Managing State",
    "purpose": "Managing State",
    "explanation": "Managing State – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/managing-state",
    "source_title": "Managing State – React",
    "section": "Managing State",
    "code": "import { useReducer } from 'react';\nimport AddTask from './AddTask.js';\nimport TaskList from './TaskList.js';\n\nexport default function TaskApp() {\n  const [tasks, dispatch] = useReducer(\n    tasksReducer,\n    initialTasks\n  );\n\n  function handleAddTask(text) {\n    dispatch({\n      type: 'added',\n      id: nextId++,\n      text: text,\n    });\n  }\n\n  function handleChangeTask(task) {\n    dispatch({\n      type: 'changed',\n      task: task\n    });\n  }\n\n  function handleDeleteTask(taskId) {\n    dispatch({\n      type: 'deleted',\n      id: taskId\n    });\n  }\n\n  return (\n    <>\n      <h1>Prague itinerary</h1>\n      <AddTask\n        onAddTask={handleAddTask}\n      />\n      <TaskList\n        tasks={tasks}\n        onChangeTask={handleChangeTask}\n        onDeleteTask={handleDeleteTask}\n      />\n    </>\n  );\n}\n\nfunction tasksReducer(tasks, action) {\n  switch (action.type) {\n    case 'added': {\n      return [...tasks, {\n        id: action.id,\n        text: action.text,\n        done: false\n      }];\n    }\n    case 'changed': {\n      return tasks.map(t => {\n        if (t.id === action.task.id) {\n          return action.task;\n        } else {\n          return t;\n        }\n      });\n    }\n    case 'deleted': {\n      return tasks.filter(t => t.id !== action.id);\n    }\n    default: {\n      throw Error('Unknown action: ' + action.type);\n    }\n  }\n}\n\nlet nextId = 3;\nconst initialTasks = [\n  { id: 0, text: 'Visit Kafka Museum', done: true },\n  { id: 1, text: 'Watch a puppet show', done: false },\n  { id: 2, text: 'Lennon Wall pic', done: false }\n];",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "managing",
      "state",
      "reducer",
      "component"
    ],
    "code_length": 80,
    "is_duplicate": false,
    "topic": "Managing State",
    "purpose": "Managing State",
    "explanation": "Managing State – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/managing-state",
    "source_title": "Managing State – React",
    "section": "Managing State",
    "code": "import Heading from './Heading.js';\nimport Section from './Section.js';\n\nexport default function Page() {\n  return (\n    <Section>\n      <Heading>Title</Heading>\n      <Section>\n        <Heading>Heading</Heading>\n        <Heading>Heading</Heading>\n        <Heading>Heading</Heading>\n        <Section>\n          <Heading>Sub-heading</Heading>\n          <Heading>Sub-heading</Heading>\n          <Heading>Sub-heading</Heading>\n          <Section>\n            <Heading>Sub-sub-heading</Heading>\n            <Heading>Sub-sub-heading</Heading>\n            <Heading>Sub-sub-heading</Heading>\n          </Section>\n        </Section>\n      </Section>\n    </Section>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "managing",
      "state",
      "component"
    ],
    "code_length": 25,
    "is_duplicate": true,
    "topic": "Managing State",
    "purpose": "Managing State",
    "explanation": "Managing State – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/managing-state",
    "source_title": "Managing State – React",
    "section": "Managing State",
    "code": "import AddTask from './AddTask.js';\nimport TaskList from './TaskList.js';\nimport { TasksProvider } from './TasksContext.js';\n\nexport default function TaskApp() {\n  return (\n    <TasksProvider>\n      <h1>Day off in Kyoto</h1>\n      <AddTask />\n      <TaskList />\n    </TasksProvider>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "managing",
      "state",
      "component"
    ],
    "code_length": 13,
    "is_duplicate": true,
    "topic": "Managing State",
    "purpose": "Managing State",
    "explanation": "Managing State – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/separating-events-from-effects",
    "source_title": "Separating Events from Effects – React",
    "section": "Separating Events from Effects",
    "code": "function ChatRoom({ roomId }) {\n  const [message, setMessage] = useState('');\n  // ...\n  function handleSendClick() {\n    sendMessage(message);\n  }\n  // ...\n  return (\n    <>\n      <input value={message} onChange={e => setMessage(e.target.value)} />\n      <button onClick={handleSendClick}>Send</button>\n    </>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "events",
      "state",
      "separating",
      "effects"
    ],
    "code_length": 14,
    "is_duplicate": false,
    "topic": "Separating Events from Effects",
    "purpose": "Separating Events from Effects",
    "explanation": "Separating Events from Effects – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/separating-events-from-effects",
    "source_title": "Separating Events from Effects – React",
    "section": "Separating Events from Effects",
    "code": "function ChatRoom({ roomId }) {\n  // ...\n  useEffect(() => {\n    const connection = createConnection(serverUrl, roomId);\n    connection.connect();\n    return () => {\n      connection.disconnect();\n    };\n  }, [roomId]);\n  // ...\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "events",
      "effect",
      "separating",
      "effects"
    ],
    "code_length": 11,
    "is_duplicate": false,
    "topic": "Separating Events from Effects",
    "purpose": "Separating Events from Effects",
    "explanation": "Separating Events from Effects – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/separating-events-from-effects",
    "source_title": "Separating Events from Effects – React",
    "section": "Separating Events from Effects",
    "code": "import { useState, useEffect } from 'react';\nimport { createConnection, sendMessage } from './chat.js';\n\nconst serverUrl = 'https://localhost:1234';\n\nfunction ChatRoom({ roomId }) {\n  const [message, setMessage] = useState('');\n\n  useEffect(() => {\n    const connection = createConnection(serverUrl, roomId);\n    connection.connect();\n    return () => connection.disconnect();\n  }, [roomId]);\n\n  function handleSendClick() {\n    sendMessage(message);\n  }\n\n  return (\n    <>\n      <h1>Welcome to the {roomId} room!</h1>\n      <input value={message} onChange={e => setMessage(e.target.value)} />\n      <button onClick={handleSendClick}>Send</button>\n    </>\n  );\n}\n\nexport default function App() {\n  const [roomId, setRoomId] = useState('general');\n  const [show, setShow] = useState(false);\n  return (\n    <>\n      <label>\n        Choose the chat room:{' '}\n        <select\n          value={roomId}\n          onChange={e => setRoomId(e.target.value)}\n        >\n          <option value=\"general\">general</option>\n          <option value=\"travel\">travel</option>\n          <option value=\"music\">music</option>\n        </select>\n      </label>\n      <button onClick={() => setShow(!show)}>\n        {show ? 'Close chat' : 'Open chat'}\n      </button>\n      {show && <hr />}\n      {show && <ChatRoom roomId={roomId} />}\n    </>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "effect",
      "events",
      "separating",
      "effects",
      "state",
      "component"
    ],
    "code_length": 51,
    "is_duplicate": false,
    "topic": "Separating Events from Effects",
    "purpose": "Separating Events from Effects",
    "explanation": "Separating Events from Effects – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/separating-events-from-effects",
    "source_title": "Separating Events from Effects – React",
    "section": "Separating Events from Effects",
    "code": "const serverUrl = 'https://localhost:1234';\n\nfunction ChatRoom({ roomId }) {\n  const [message, setMessage] = useState('');\n\n  // ...\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "events",
      "state",
      "separating",
      "effects"
    ],
    "code_length": 7,
    "is_duplicate": false,
    "topic": "Separating Events from Effects",
    "purpose": "Separating Events from Effects",
    "explanation": "Separating Events from Effects – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/separating-events-from-effects",
    "source_title": "Separating Events from Effects – React",
    "section": "Separating Events from Effects",
    "code": "// ...\n    sendMessage(message);\n    // ...",
    "code_language": "unknown",
    "code_type": "snippet",
    "tags": [
      "events",
      "separating",
      "effects"
    ],
    "code_length": 3,
    "is_duplicate": false,
    "topic": "Separating Events from Effects",
    "purpose": "Separating Events from Effects",
    "explanation": "Separating Events from Effects – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/separating-events-from-effects",
    "source_title": "Separating Events from Effects – React",
    "section": "Separating Events from Effects",
    "code": "function handleSendClick() {\n    sendMessage(message);\n  }",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "events",
      "separating",
      "effects"
    ],
    "code_length": 3,
    "is_duplicate": false,
    "topic": "Separating Events from Effects",
    "purpose": "Separating Events from Effects",
    "explanation": "Separating Events from Effects – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/separating-events-from-effects",
    "source_title": "Separating Events from Effects – React",
    "section": "Separating Events from Effects",
    "code": "// ...\n    const connection = createConnection(serverUrl, roomId);\n    connection.connect();\n    // ...",
    "code_language": "unknown",
    "code_type": "snippet",
    "tags": [
      "events",
      "separating",
      "effects"
    ],
    "code_length": 4,
    "is_duplicate": false,
    "topic": "Separating Events from Effects",
    "purpose": "Separating Events from Effects",
    "explanation": "Separating Events from Effects – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/separating-events-from-effects",
    "source_title": "Separating Events from Effects – React",
    "section": "Separating Events from Effects",
    "code": "useEffect(() => {\n    const connection = createConnection(serverUrl, roomId);\n    connection.connect();\n    return () => {\n      connection.disconnect()\n    };\n  }, [roomId]);",
    "code_language": "unknown",
    "code_type": "snippet",
    "tags": [
      "events",
      "effect",
      "separating",
      "effects"
    ],
    "code_length": 7,
    "is_duplicate": false,
    "topic": "Separating Events from Effects",
    "purpose": "Separating Events from Effects",
    "explanation": "Separating Events from Effects – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/separating-events-from-effects",
    "source_title": "Separating Events from Effects – React",
    "section": "Separating Events from Effects",
    "code": "function ChatRoom({ roomId, theme }) {\n  useEffect(() => {\n    const connection = createConnection(serverUrl, roomId);\n    connection.on('connected', () => {\n      showNotification('Connected!', theme);\n    });\n    connection.connect();\n    // ...",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "events",
      "effect",
      "separating",
      "effects"
    ],
    "code_length": 8,
    "is_duplicate": false,
    "topic": "Separating Events from Effects",
    "purpose": "Separating Events from Effects",
    "explanation": "Separating Events from Effects – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/separating-events-from-effects",
    "source_title": "Separating Events from Effects – React",
    "section": "Separating Events from Effects",
    "code": "function ChatRoom({ roomId, theme }) {\n  useEffect(() => {\n    const connection = createConnection(serverUrl, roomId);\n    connection.on('connected', () => {\n      showNotification('Connected!', theme);\n    });\n    connection.connect();\n    return () => {\n      connection.disconnect()\n    };\n  }, [roomId, theme]); // ✅ All dependencies declared\n  // ...",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "events",
      "effect",
      "separating",
      "effects"
    ],
    "code_length": 12,
    "is_duplicate": false,
    "topic": "Separating Events from Effects",
    "purpose": "Separating Events from Effects",
    "explanation": "Separating Events from Effects – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/separating-events-from-effects",
    "source_title": "Separating Events from Effects – React",
    "section": "Separating Events from Effects",
    "code": "import { useState, useEffect } from 'react';\nimport { createConnection, sendMessage } from './chat.js';\nimport { showNotification } from './notifications.js';\n\nconst serverUrl = 'https://localhost:1234';\n\nfunction ChatRoom({ roomId, theme }) {\n  useEffect(() => {\n    const connection = createConnection(serverUrl, roomId);\n    connection.on('connected', () => {\n      showNotification('Connected!', theme);\n    });\n    connection.connect();\n    return () => connection.disconnect();\n  }, [roomId, theme]);\n\n  return <h1>Welcome to the {roomId} room!</h1>\n}\n\nexport default function App() {\n  const [roomId, setRoomId] = useState('general');\n  const [isDark, setIsDark] = useState(false);\n  return (\n    <>\n      <label>\n        Choose the chat room:{' '}\n        <select\n          value={roomId}\n          onChange={e => setRoomId(e.target.value)}\n        >\n          <option value=\"general\">general</option>\n          <option value=\"travel\">travel</option>\n          <option value=\"music\">music</option>\n        </select>\n      </label>\n      <label>\n        <input\n          type=\"checkbox\"\n          checked={isDark}\n          onChange={e => setIsDark(e.target.checked)}\n        />\n        Use dark theme\n      </label>\n      <hr />\n      <ChatRoom\n        roomId={roomId}\n        theme={isDark ? 'dark' : 'light'}\n      />\n    </>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "effect",
      "events",
      "separating",
      "effects",
      "state",
      "component"
    ],
    "code_length": 51,
    "is_duplicate": false,
    "topic": "Separating Events from Effects",
    "purpose": "Separating Events from Effects",
    "explanation": "Separating Events from Effects – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/separating-events-from-effects",
    "source_title": "Separating Events from Effects – React",
    "section": "Separating Events from Effects",
    "code": "// ...\n      showNotification('Connected!', theme);\n      // ...",
    "code_language": "unknown",
    "code_type": "snippet",
    "tags": [
      "events",
      "separating",
      "effects"
    ],
    "code_length": 3,
    "is_duplicate": false,
    "topic": "Separating Events from Effects",
    "purpose": "Separating Events from Effects",
    "explanation": "Separating Events from Effects – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/separating-events-from-effects",
    "source_title": "Separating Events from Effects – React",
    "section": "Separating Events from Effects",
    "code": "import { useEffect, useEffectEvent } from 'react';\n\nfunction ChatRoom({ roomId, theme }) {\n  const onConnected = useEffectEvent(() => {\n    showNotification('Connected!', theme);\n  });\n  // ...",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "events",
      "effect",
      "separating",
      "effects"
    ],
    "code_length": 7,
    "is_duplicate": false,
    "topic": "Separating Events from Effects",
    "purpose": "Separating Events from Effects",
    "explanation": "Separating Events from Effects – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/separating-events-from-effects",
    "source_title": "Separating Events from Effects – React",
    "section": "Separating Events from Effects",
    "code": "function ChatRoom({ roomId, theme }) {\n  const onConnected = useEffectEvent(() => {\n    showNotification('Connected!', theme);\n  });\n\n  useEffect(() => {\n    const connection = createConnection(serverUrl, roomId);\n    connection.on('connected', () => {\n      onConnected();\n    });\n    connection.connect();\n    return () => connection.disconnect();\n  }, [roomId]); // ✅ All dependencies declared\n  // ...",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "events",
      "effect",
      "separating",
      "effects"
    ],
    "code_length": 14,
    "is_duplicate": false,
    "topic": "Separating Events from Effects",
    "purpose": "Separating Events from Effects",
    "explanation": "Separating Events from Effects – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/separating-events-from-effects",
    "source_title": "Separating Events from Effects – React",
    "section": "Separating Events from Effects",
    "code": "import { useState, useEffect } from 'react';\nimport { experimental_useEffectEvent as useEffectEvent } from 'react';\nimport { createConnection, sendMessage } from './chat.js';\nimport { showNotification } from './notifications.js';\n\nconst serverUrl = 'https://localhost:1234';\n\nfunction ChatRoom({ roomId, theme }) {\n  const onConnected = useEffectEvent(() => {\n    showNotification('Connected!', theme);\n  });\n\n  useEffect(() => {\n    const connection = createConnection(serverUrl, roomId);\n    connection.on('connected', () => {\n      onConnected();\n    });\n    connection.connect();\n    return () => connection.disconnect();\n  }, [roomId]);\n\n  return <h1>Welcome to the {roomId} room!</h1>\n}\n\nexport default function App() {\n  const [roomId, setRoomId] = useState('general');\n  const [isDark, setIsDark] = useState(false);\n  return (\n    <>\n      <label>\n        Choose the chat room:{' '}\n        <select\n          value={roomId}\n          onChange={e => setRoomId(e.target.value)}\n        >\n          <option value=\"general\">general</option>\n          <option value=\"travel\">travel</option>\n          <option value=\"music\">music</option>\n        </select>\n      </label>\n      <label>\n        <input\n          type=\"checkbox\"\n          checked={isDark}\n          onChange={e => setIsDark(e.target.checked)}\n        />\n        Use dark theme\n      </label>\n      <hr />\n      <ChatRoom\n        roomId={roomId}\n        theme={isDark ? 'dark' : 'light'}\n      />\n    </>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "effect",
      "events",
      "separating",
      "effects",
      "state",
      "component"
    ],
    "code_length": 56,
    "is_duplicate": false,
    "topic": "Separating Events from Effects",
    "purpose": "Separating Events from Effects",
    "explanation": "Separating Events from Effects – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/separating-events-from-effects",
    "source_title": "Separating Events from Effects – React",
    "section": "Separating Events from Effects",
    "code": "function Page() {\n  useEffect(() => {\n    logVisit();\n  }, []);\n  // ...\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "events",
      "effect",
      "separating",
      "effects"
    ],
    "code_length": 6,
    "is_duplicate": false,
    "topic": "Separating Events from Effects",
    "purpose": "Separating Events from Effects",
    "explanation": "Separating Events from Effects – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/separating-events-from-effects",
    "source_title": "Separating Events from Effects – React",
    "section": "Separating Events from Effects",
    "code": "function Page({ url }) {\n  useEffect(() => {\n    logVisit(url);\n  }, []); // 🔴 React Hook useEffect has a missing dependency: 'url'\n  // ...\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "events",
      "effect",
      "separating",
      "effects"
    ],
    "code_length": 6,
    "is_duplicate": false,
    "topic": "Separating Events from Effects",
    "purpose": "Separating Events from Effects",
    "explanation": "Separating Events from Effects – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/separating-events-from-effects",
    "source_title": "Separating Events from Effects – React",
    "section": "Separating Events from Effects",
    "code": "function Page({ url }) {\n  useEffect(() => {\n    logVisit(url);\n  }, [url]); // ✅ All dependencies declared\n  // ...\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "events",
      "effect",
      "separating",
      "effects"
    ],
    "code_length": 6,
    "is_duplicate": false,
    "topic": "Separating Events from Effects",
    "purpose": "Separating Events from Effects",
    "explanation": "Separating Events from Effects – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/separating-events-from-effects",
    "source_title": "Separating Events from Effects – React",
    "section": "Separating Events from Effects",
    "code": "function Page({ url }) {\n  const { items } = useContext(ShoppingCartContext);\n  const numberOfItems = items.length;\n\n  useEffect(() => {\n    logVisit(url, numberOfItems);\n  }, [url]); // 🔴 React Hook useEffect has a missing dependency: 'numberOfItems'\n  // ...\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "events",
      "effect",
      "separating",
      "effects"
    ],
    "code_length": 9,
    "is_duplicate": false,
    "topic": "Separating Events from Effects",
    "purpose": "Separating Events from Effects",
    "explanation": "Separating Events from Effects – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/separating-events-from-effects",
    "source_title": "Separating Events from Effects – React",
    "section": "Separating Events from Effects",
    "code": "function Page({ url }) {\n  const { items } = useContext(ShoppingCartContext);\n  const numberOfItems = items.length;\n\n  const onVisit = useEffectEvent(visitedUrl => {\n    logVisit(visitedUrl, numberOfItems);\n  });\n\n  useEffect(() => {\n    onVisit(url);\n  }, [url]); // ✅ All dependencies declared\n  // ...\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "events",
      "effect",
      "separating",
      "effects"
    ],
    "code_length": 13,
    "is_duplicate": false,
    "topic": "Separating Events from Effects",
    "purpose": "Separating Events from Effects",
    "explanation": "Separating Events from Effects – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/separating-events-from-effects",
    "source_title": "Separating Events from Effects – React",
    "section": "Separating Events from Effects",
    "code": "const onVisit = useEffectEvent(() => {\n    logVisit(url, numberOfItems);\n  });\n\n  useEffect(() => {\n    onVisit();\n  }, [url]);",
    "code_language": "unknown",
    "code_type": "snippet",
    "tags": [
      "events",
      "effect",
      "separating",
      "effects"
    ],
    "code_length": 7,
    "is_duplicate": false,
    "topic": "Separating Events from Effects",
    "purpose": "Separating Events from Effects",
    "explanation": "Separating Events from Effects – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/separating-events-from-effects",
    "source_title": "Separating Events from Effects – React",
    "section": "Separating Events from Effects",
    "code": "const onVisit = useEffectEvent(visitedUrl => {\n    logVisit(visitedUrl, numberOfItems);\n  });\n\n  useEffect(() => {\n    onVisit(url);\n  }, [url]);",
    "code_language": "unknown",
    "code_type": "snippet",
    "tags": [
      "events",
      "effect",
      "separating",
      "effects"
    ],
    "code_length": 7,
    "is_duplicate": false,
    "topic": "Separating Events from Effects",
    "purpose": "Separating Events from Effects",
    "explanation": "Separating Events from Effects – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/separating-events-from-effects",
    "source_title": "Separating Events from Effects – React",
    "section": "Separating Events from Effects",
    "code": "const onVisit = useEffectEvent(visitedUrl => {\n    logVisit(visitedUrl, numberOfItems);\n  });\n\n  useEffect(() => {\n    setTimeout(() => {\n      onVisit(url);\n    }, 5000); // Delay logging visits\n  }, [url]);",
    "code_language": "unknown",
    "code_type": "snippet",
    "tags": [
      "events",
      "effect",
      "separating",
      "effects"
    ],
    "code_length": 9,
    "is_duplicate": false,
    "topic": "Separating Events from Effects",
    "purpose": "Separating Events from Effects",
    "explanation": "Separating Events from Effects – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/separating-events-from-effects",
    "source_title": "Separating Events from Effects – React",
    "section": "Separating Events from Effects",
    "code": "function Timer() {\n  const [count, setCount] = useState(0);\n\n  const onTick = useEffectEvent(() => {\n    setCount(count + 1);\n  });\n\n  useTimer(onTick, 1000); // 🔴 Avoid: Passing Effect Events\n\n  return <h1>{count}</h1>\n}\n\nfunction useTimer(callback, delay) {\n  useEffect(() => {\n    const id = setInterval(() => {\n      callback();\n    }, delay);\n    return () => {\n      clearInterval(id);\n    };\n  }, [delay, callback]); // Need to specify \"callback\" in dependencies\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "effect",
      "events",
      "separating",
      "effects",
      "state"
    ],
    "code_length": 22,
    "is_duplicate": false,
    "topic": "Separating Events from Effects",
    "purpose": "Separating Events from Effects",
    "explanation": "Separating Events from Effects – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/separating-events-from-effects",
    "source_title": "Separating Events from Effects – React",
    "section": "Separating Events from Effects",
    "code": "function Timer() {\n  const [count, setCount] = useState(0);\n  useTimer(() => {\n    setCount(count + 1);\n  }, 1000);\n  return <h1>{count}</h1>\n}\n\nfunction useTimer(callback, delay) {\n  const onTick = useEffectEvent(() => {\n    callback();\n  });\n\n  useEffect(() => {\n    const id = setInterval(() => {\n      onTick(); // ✅ Good: Only called locally inside an Effect\n    }, delay);\n    return () => {\n      clearInterval(id);\n    };\n  }, [delay]); // No need to specify \"onTick\" (an Effect Event) as a dependency\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "effect",
      "events",
      "separating",
      "effects",
      "state"
    ],
    "code_length": 22,
    "is_duplicate": false,
    "topic": "Separating Events from Effects",
    "purpose": "Separating Events from Effects",
    "explanation": "Separating Events from Effects – React"
  },
  {
    "timestamp": "2025-08-28T11:31:25.367019",
    "crawl_id": "3daac64b0185e2ef005655560825aafe",
    "url": "https://react.dev/learn/separating-events-from-effects",
    "source_title": "Separating Events from Effects – React",
    "section": "Separating Events from Effects",
    "code": "import { useState, useEffect } from 'react';\n\nexport default function Timer() {\n  const [count, setCount] = useState(0);\n  const [increment, setIncrement] = useState(1);\n\n  useEffect(() => {\n    const id = setInterval(() => {\n      setCount(c => c + increment);\n    }, 1000);\n    return () => {\n      clearInterval(id);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <>\n      <h1>\n        Counter: {count}\n        <button onClick={() => setCount(0)}>Reset</button>\n      </h1>\n      <hr />\n      <p>\n        Every second, increment by:\n        <button disabled={increment === 0} onClick={() => {\n          setIncrement(i => i - 1);\n        }}>–</button>\n        <b>{increment}</b>\n        <button onClick={() => {\n          setIncrement(i => i + 1);\n        }}>+</button>\n      </p>\n    </>\n  );\n}",
    "code_language": "javascript/jsx",
    "code_type": "function",
    "tags": [
      "effect",
      "events",
      "separating",
      "effects",
      "state",
      "component"
    ],
    "code_length": 36,
    "is_duplicate": false,
    "topic": "Separating Events from Effects",
    "purpose": "Separating Events from Effects",
    "explanation": "Separating Events from Effects – React"
  }
]